<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ivucenter.cloud.portal.req.catalogue.ReqCatalogueDAO">

	<!--프로젝트 리스트-->
    <select id="getProjectList" resultType="CustomReqCatalogueVO">
		SELECT
			distinct
			a.project_box_id,
			c.project_id,
			a.customer_id,
			a.project_manager_id,
			a.project_name,
			a.project_alias,
			a.reg_datetime,
			a.reg_user_id,
			a.mod_datetime,
			a.mod_user_id,
			a.delete_flag,
			c.cloud_id,
			c.env_type,
			e.cloud_type
		FROM
			oss_project_manager m
			LEFT JOIN
			oss_project_box a
				ON m.project_id = a.project_box_id
			LEFT JOIN
			req_project b
				ON a.program_seq = b.req_project_seq
			LEFT JOIN
			oss_project c
				ON a.project_box_id = c.project_box_id
			LEFT JOIN
			oss_cloud e
				ON c.cloud_id = e.cloud_id
		WHERE
			(b.complete_flag = 'Y' OR b.complete_flag IS NULL)
			AND a.delete_flag <![CDATA[<>]]> 'Y'
			<if test="regUserId != '' and regUserId != 'admin' ">
			AND ( a.project_manager_id=#{regUserId} OR m.manager_id=#{regUserId} )
			</if>
			<if test="searchKey == 'project_name' and searchValue != ''">
			AND a.project_name like CONCAT('%',#{searchValue},'%')
			</if>
			<if test="searchKey == 'project_alias' and searchValue != ''">
			AND a.project_alias like CONCAT('%',#{searchValue},'%')
			</if>
			<if test="searchKey == 'searchAll' and searchValue != ''">
			AND ( a.project_name like CONCAT('%',#{searchValue},'%') OR a.project_alias like CONCAT('%',#{searchValue},'%') )
			</if>
			<if test="searchKey == null and searchValue != '' and searchValue != null">
			AND ( a.project_name like CONCAT('%',#{searchValue},'%') OR a.project_alias like CONCAT('%',#{searchValue},'%') )
			</if>
			<if test="cloudId != null and !cloudId.equals('')">
<!-- 			AND (SELECT COUNT(*) FROM oss_project WHERE project_box_id = a.project_box_id AND cloud_id = #{cloudId}) > 0 -->
			AND c.cloud_id = #{cloudId}
			</if>
		GROUP BY
			a.project_box_id
		ORDER BY
			a.project_name DESC

		<if test="!length.equals(0)">
			LIMIT #{start}, #{length}
		</if>
  	</select>

	<!-- 개발환경 리스트-->
    <select id="getDevEnvList" resultType="CustomReqCatalogueVO">
		SELECT
			DISTINCT OPJ.project_box_id,
			OPJ.customer_id,
			OPJ.project_manager_id,
			OPJ.project_name,
			OPJ.project_alias,
			OPJ.delete_flag,
			OENV.url as cicdUrl,
			OENV.name as env_name,
			OENV.description as env_alias,
			OENV.cicd_project_id env_id,
			OENV.visibility as env_visibility_level,
			OENVG.group_id as env_group_id,
			OPJ.project_id,
			OPJ.project_name,
			OPJ.project_alias,
			OENV.reg_datetime
		FROM
				oss_project_box OP
			INNER JOIN oss_project OPJ ON
				OP.project_box_id = OPJ.project_box_id
			INNER JOIN oss_project_manager OPM ON
				OP.project_box_id = OPM.project_id
			INNER JOIN cicd_project OENV ON
				OPJ.project_box_id = OENV.project_box_id
			INNER JOIN cicd_group OENVG ON
				OENV.group_id = OENVG.group_id
		WHERE 1=1
			<if test="searchKey == 'projectName' and searchValue != ''">
			AND OPJ.project_name like CONCAT('%',#{searchValue},'%')
			</if>
			<if test="searchKey == 'envName' and searchValue != ''">
			AND OENV.name like CONCAT('%',#{searchValue},'%')
			</if>
			<if test="searchKey == 'searchAll' and searchValue != ''">
			AND ( OPJ.project_name like CONCAT('%',#{searchValue},'%') OR OENV.name like CONCAT('%',#{searchValue},'%') )
			</if>
			<if test="searchKey == null and searchValue != '' and searchValue != null">
			AND ( OPJ.project_name like CONCAT('%',#{searchValue},'%') OR OENV.name like CONCAT('%',#{searchValue},'%') )
			</if>
			<if test="cloudId != null and !cloudId.equals('')">
			AND OPJ.cloud_id = #{cloudId}
			</if>
		GROUP BY OENV.cicd_project_id
		ORDER BY OENV.reg_datetime desc, OPJ.project_name DESC
		<if test="!length.equals(0)">
			LIMIT #{start}, #{length}
		</if>
  	</select>

  	<select id="getSnapshots" resultType="CustomMngOssVo">
		SELECT
			*
		FROM
			oss_snapshot OS
		LEFT JOIN
			oss_disk OD ON OS.disk_id = OD.disk_id
		where
			OS.vm_uuid = #{vmUuid}
			AND OS.disk_id = #{diskId}
			AND OS.del_flag = 'N'
		ORDER BY OS.reg_datetime desc

  	</select>

 	<!--로드밸런서 네트워크vm리스트 2017.08.02 박현오 추가-->
    <select id="networkVmPopList" resultType="CustomReqCatalogueVO">
		SELECT
			OV.*
		FROM
			oss_vm OV,oss_vm_network OVN
		WHERE
			OV.vm_uuid=OVN.vm_uuid
		AND
			OV.expire_datetime IS NULL
		AND
			OVN.network_id=#{networkId}
  	</select>

  	<!--catalogue 리스트 2017.07.30 이윤준 추가-->
    <select id="getCatalogueSelectBasicView" resultType="CustomReqCatalogueVO">
    <![CDATA[
		SELECT
			CAPR.catalog_seq,
			CAPR.catalog_category,
			CD.code_name AS catalog_category_name,
			PROD.product_seq,
			CAPR.display_name,
			CAPR.display_flag,
		 	(SELECT CONCAT(CF.file_path,CF.file_id) FROM cmm_file CF WHERE CF.program_name =CAPR.catalog_seq AND CF.program_seq = PROD.product_seq  ) AS image_path,
 			(SELECT CF.file_id FROM cmm_file CF WHERE CF.program_name =CAPR.catalog_seq AND CF.program_seq = PROD.product_seq  ) AS image_name,
		 	CAPR.description,
		 	CAPR.display_order,
		 	PROD.product_seq,
		 	PROD.product_category,
		 	/*가상서버 시작*/
		 	PROD.vcpus, 		/* vcpu*/
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.cpu_quantity ELSE 0 END AS cpu_quantity ,			/* vpcu 과금 단위*/
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.cpu_hourly_price ELSE 0 END AS cpu_hourly_price ,		/* 시간 단위 금액*/
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.cpu_monthly_price ELSE 0 END AS cpu_monthly_price ,		/* 월 단위 금액 */
		 	PROD.mem_gb,		/* 메모리*/
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.mem_quantity ELSE 0 END AS mem_quantity ,			/* mem 과금 단위*/
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.mem_hourly_price ELSE 0 END AS mem_hourly_price ,		/* 시간 단위 금액*/
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.mem_monthly_price ELSE 0 END AS mem_monthly_price ,		/* 월 단위 금액 	*/
		 	PROD.vm_disk_gb,	/* 디스크*/
			CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.disk_quantity ELSE 0 END AS vm_disk_quantity ,			/* disk 과금 단위*/
			CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.disk_hourly_price ELSE 0 END AS vm_disk_hourly_price ,		/* 시간 단위 금액*/
			CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.disk_monthly_price ELSE 0 END AS vm_disk_monthly_price ,	/* 월 단위 금액*/
		 	/*가상서버 끝*/

		 	/*블록 디스크 시작*/
		 	PROD.disk_gb,	/* 블록 디스크 용량*/
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_DISK' THEN PRIC.disk_quantity ELSE 0 END AS disk_quantity ,			/* disk 과금 단위*/
			CASE CAPR.catalog_category  WHEN 'CATACATE_DISK' THEN PRIC.disk_hourly_price ELSE 0 END AS disk_hourly_price ,		/* 시간 단위 금액*/
			CASE CAPR.catalog_category  WHEN 'CATACATE_DISK' THEN PRIC.disk_monthly_price ELSE 0 END AS disk_monthly_price ,	/* 월 단위 금액*/
		 	/*블록 디스크  끝*/

		 	/*NAS 디스크 시작*/
		 	PROD.nas_gb,	/* NAS 용량*/
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_NAS' THEN PRIC.nas_quantity ELSE 0 END AS nas_quantity ,			/* NAS 과금 단위*/
			CASE CAPR.catalog_category  WHEN 'CATACATE_NAS' THEN PRIC.nas_hourly_price ELSE 0 END AS nas_hourly_price ,		/* 시간 단위 금액*/
			CASE CAPR.catalog_category  WHEN 'CATACATE_NAS' THEN PRIC.nas_monthly_price ELSE 0 END AS nas_monthly_price ,		/* 월 단위 금액*/
		 	/*NAS 디스크  끝*/

		 	/*로드밸런서 시작*/
		 	PROD.loadbalancer_ea,	/* 로드 밸런서 갯수*/
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_LOADBALANCER' THEN PRIC.loadbalancer_quantity ELSE 0 END AS loadbalancer_quantity ,			/* 로드밸런서 과금 단위*/
			CASE CAPR.catalog_category  WHEN 'CATACATE_LOADBALANCER' THEN PRIC.loadbalancer_hourly_price ELSE 0 END AS loadbalancer_hourly_price ,		/* 시간 단위 금액*/
			CASE CAPR.catalog_category  WHEN 'CATACATE_LOADBALANCER' THEN PRIC.loadbalancer_monthly_price ELSE 0 END AS loadbalancer_monthly_price ,	/* 월 단위 금액*/
		 	/*N로드밸런서  끝*/

		 	/*공인IP 시작*/
		 	PROD.publicip_ea,	/* 공인 IP 갯수*/
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_PUBLICIP' THEN PRIC.publicip_quantity ELSE 0 END AS publicip_quantity ,			/* 공인IP 과금 단위*/
			CASE CAPR.catalog_category  WHEN 'CATACATE_PUBLICIP' THEN PRIC.publicip_hourly_price ELSE 0 END AS publicip_hourly_price ,		/* 시간 단위 금액*/
			CASE CAPR.catalog_category  WHEN 'CATACATE_PUBLICIP' THEN PRIC.publicip_monthly_price ELSE 0 END AS publicip_monthly_price ,		/* 월 단위 금액  	*/
		 	/*공인IP 끝*/


		 	CASE CAPR.catalog_category
		 	WHEN 'CATACATE_VM' THEN ((PROD.vcpus / PRIC.cpu_quantity) * PRIC.cpu_hourly_price) + ((PROD.mem_gb / PRIC.mem_quantity) * PRIC.mem_hourly_price) + ((PROD.vm_disk_gb / PRIC.disk_quantity) * PRIC.disk_hourly_price)
		 	WHEN 'CATACATE_DISK' THEN (PROD.disk_gb / PRIC.disk_quantity) * PRIC.disk_hourly_price
		 	WHEN 'CATACATE_NAS' THEN (PROD.nas_gb / PRIC.nas_quantity) * PRIC.nas_hourly_price
		 	WHEN 'CATACATE_PUBLICIP' THEN (PROD.publicip_ea / PRIC.publicip_quantity) * PRIC.publicip_hourly_price
		 	WHEN 'CATACATE_LOADBALANCER' THEN (PROD.loadbalancer_ea / PRIC.loadbalancer_quantity) * PRIC.loadbalancer_hourly_price
		 	ELSE 0 END AS hourly_price,

		 	CASE CAPR.catalog_category
		 	WHEN 'CATACATE_VM' THEN ((PROD.vcpus / PRIC.cpu_quantity) * PRIC.cpu_monthly_price) + ((PROD.mem_gb / PRIC.mem_quantity) * PRIC.mem_monthly_price) + ((PROD.vm_disk_gb / PRIC.disk_quantity) * PRIC.disk_monthly_price)
		 	WHEN 'CATACATE_DISK' THEN (PROD.disk_gb / PRIC.disk_quantity) * PRIC.disk_monthly_price
		 	WHEN 'CATACATE_NAS' THEN (PROD.nas_gb / PRIC.nas_quantity) * PRIC.nas_monthly_price
		 	WHEN 'CATACATE_PUBLICIP' THEN (PROD.publicip_ea / PRIC.publicip_quantity) * PRIC.publicip_monthly_price
		 	WHEN 'CATACATE_LOADBALANCER' THEN (PROD.loadbalancer_ea / PRIC.loadbalancer_quantity) * PRIC.loadbalancer_monthly_price

		 	ELSE 0 END AS monthly_price

		FROM	bss_product_catalog CATA,
			bss_product_catalog_item CAPR,
			cmm_code CD,
			(
				/* 상품 구성 */
				SELECT
					PROD.product_seq,
					PROD.product_name,
					PROD.product_category,
					IFNULL(VM.vcpus,0) AS vcpus ,
					IFNULL(VM.mem_gb,0) AS mem_gb,
					IFNULL(VM.disk_gb,0) AS vm_disk_gb,
					IFNULL(DSK.disk_gb,0) AS disk_gb,
					IFNULL(NAS.nas_gb,0) AS nas_gb,
					IFNULL(BAL.loadbalancer_ea,0) AS loadbalancer_ea,
					IFNULL(IP.publicip_ea,0) AS publicip_ea
				 FROM bss_product PROD
				 LEFT OUTER JOIN bss_product_vm VM		/* 가상서버 */
				 ON PROD.product_seq = VM.product_seq
				 LEFT OUTER JOIN bss_product_disk DSK		/* 블록 디스크*/
				 ON PROD.product_seq = DSK.product_seq
				 LEFT OUTER JOIN bss_product_nas NAS		/* NAS*/
				 ON PROD.product_seq = NAS.product_seq
				 LEFT OUTER JOIN bss_product_loadbalancer BAL	/* 로드 밸런서*/
				 ON PROD.product_seq = BAL.product_seq
				 LEFT OUTER JOIN bss_product_publicip IP	/* 공인IP*/
				 ON PROD.product_seq = IP.product_seq
				 WHERE PROD.del_flag = 'N'

			) PROD,
			( /* 가격표 */
				SELECT	SUM(CASE ITEM.item_id WHEN 'CPU010' THEN PRIC.hourly_price ELSE 0 END) cpu_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'CPU010' THEN PRIC.monthly_price ELSE 0 END) cpu_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'CPU010' THEN ITEM.quantity ELSE 0 END) cpu_quantity,
					SUM(CASE ITEM.item_id WHEN 'MEM010' THEN PRIC.hourly_price ELSE 0 END) mem_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'MEM010' THEN PRIC.monthly_price ELSE 0 END) mem_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'MEM010' THEN ITEM.quantity ELSE 0 END) mem_quantity,
					SUM(CASE ITEM.item_id WHEN 'DISK010' THEN PRIC.hourly_price ELSE 0 END) disk_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'DISK010' THEN PRIC.monthly_price ELSE 0 END) disk_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'DISK010' THEN ITEM.quantity ELSE 0 END) disk_quantity,

					SUM(CASE ITEM.item_id WHEN 'NAS010' THEN PRIC.hourly_price ELSE 0 END) nas_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'NAS010' THEN PRIC.monthly_price ELSE 0 END) nas_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'NAS010' THEN ITEM.quantity ELSE 0 END) nas_quantity,

					SUM(CASE ITEM.item_id WHEN 'LOADBALANCER010' THEN PRIC.hourly_price ELSE 0 END) loadbalancer_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'LOADBALANCER010' THEN PRIC.monthly_price ELSE 0 END) loadbalancer_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'LOADBALANCER010' THEN ITEM.quantity ELSE 0 END) loadbalancer_quantity,

					SUM(CASE ITEM.item_id WHEN 'PUBLICIP010' THEN PRIC.hourly_price ELSE 0 END) publicip_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'PUBLICIP010' THEN PRIC.monthly_price ELSE 0 END) publicip_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'PUBLICIP010' THEN ITEM.quantity ELSE 0 END) publicip_quantity

				FROM	bill_product_catalog POLC,
					bill_policy_item POIT,
					bill_product ITEM,
					bill_product_catalog_item PRIC
				WHERE	POLC.apply_date = (
						SELECT	MAX(A.apply_date)
						FROM	bill_product_catalog A
						WHERE	A.apply_date <= #{applyDate}
						AND	A.del_flag = 'N'
					)
				AND	POLC.policy_seq = POIT.policy_seq
				AND	POIT.item_id = ITEM.item_id
				AND	ITEM.item_id IN ('CPU010', 'MEM010', 'DISK010', 'NAS010', 'LOADBALANCER010','PUBLICIP010', 'SCM010', 'BACKUP010', 'MCA010', 'SECURITY010')
				AND	POIT.policy_seq = PRIC.policy_seq
				AND	POIT.item_id = PRIC.item_id
				AND	POLC.del_flag = 'N'
			) PRIC

		WHERE	CATA.apply_date = (
						SELECT	MAX(A.apply_date)
						FROM	bss_product_catalog A
						WHERE	A.apply_date <= #{applyDate}
						AND	A.del_flag = 'N'
					)
		AND	CATA.catalog_seq = CAPR.catalog_seq
		AND	CAPR.product_seq = PROD.product_seq
		AND CAPR.catalog_category = CD.code_id
		AND CD.code_key_id = 'CATALOG_CATEGORY'
		AND CAPR.catalog_category ='CATACATE_VM'
		AND	CAPR.display_flag ='Y'
		AND CAPR.basic_product_flag = 'Y'
		AND CAPR.del_flag = 'N'
		ORDER BY CAPR.catalog_category, CAPR.display_order
	]]>
  	</select>

  	<!--자원 변경/ 삭제 신청-->
    <select id="getChangOrderViewPriceInfo" resultType="CustomReqCatalogueVO">
    <![CDATA[

		 SELECT	SUM(CASE ITEM.item_id WHEN 'CPU010' THEN PRIC.hourly_price ELSE 0 END) cpu_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'CPU010' THEN PRIC.monthly_price ELSE 0 END) cpu_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'CPU010' THEN ITEM.quantity ELSE 0 END) cpu_quantity,
					SUM(CASE ITEM.item_id WHEN 'MEM010' THEN PRIC.hourly_price ELSE 0 END) mem_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'MEM010' THEN PRIC.monthly_price ELSE 0 END) mem_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'MEM010' THEN ITEM.quantity ELSE 0 END) mem_quantity,
					SUM(CASE ITEM.item_id WHEN 'DISK010' THEN PRIC.hourly_price ELSE 0 END) disk_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'DISK010' THEN PRIC.monthly_price ELSE 0 END) disk_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'DISK010' THEN ITEM.quantity ELSE 0 END) disk_quantity,
					POLC.cloud_id
				FROM	bill_product_catalog POLC,
					bill_policy_item POIT,
					bill_product ITEM,
					bill_product_catalog_item PRIC
				WHERE	POLC.apply_date = (
						SELECT	MAX(A.apply_date)
						FROM	bill_product_catalog A
						WHERE	A.apply_date <=  #{applyDate}
						AND	A.del_flag = 'N'
					)
				AND POLC.policy_seq = POIT.policy_seq
				AND POIT.item_id = ITEM.item_id
				AND ITEM.item_id IN (SELECT item_id FROM bill_product)
				AND POIT.policy_seq = PRIC.policy_seq
				AND POIT.item_id = PRIC.item_id
				AND POLC.del_flag = 'N'
				AND POLC.cloud_id = #{cloudId}
	   GROUP BY POLC.cloud_id
	]]>
  	</select>

  	<!--catalogue 리스트 2017.07.18 이윤준 수정-->
  	<!--catalogue 리스트 2017.11.06 상품설명컬럼(description_top, description_list) 추가-->
    <select id="getCatalogueList" parameterType="CustomReqCatalogueVO" resultType="CustomReqCatalogueVO">
    <![CDATA[
		SELECT
			*
		FROM	bss_product_catalog CATA,
			bss_product_catalog_item CAPR,
			cmm_code CD,
			(
				/* 상품 구성 */
				SELECT
					PROD.product_seq,
					PROD.product_name,
					PROD.product_category,
					VM.image_type,
					IFNULL(VM.vcpus,0) AS vcpus ,
					IFNULL(VM.mem_gb,0) AS mem_gb,
					IFNULL(VM.disk_gb,0) AS vm_disk_gb,
					IFNULL(DSK.disk_gb,0) AS disk_gb,
					IFNULL(DSN.nas_gb, 0) AS nas_gb
				 FROM bss_product PROD
				 LEFT OUTER JOIN bss_product_vm VM		 /* 가상서버 */
				 ON PROD.product_seq = VM.product_seq
				 LEFT OUTER JOIN bss_product_disk DSK		 /* 블록 디스크*/
				 ON PROD.product_seq = DSK.product_seq
				 LEFT OUTER JOIN bss_product_nas DSN		 /* NAS*/
				 ON PROD.product_seq = DSN.product_seq
			) PROD
    WHERE CATA.catalog_seq = CAPR.catalog_seq
		AND CAPR.product_seq = PROD.product_seq
		AND CAPR.catalog_category = CD.code_id
		AND CD.code_key_id = 'CATALOG_CATEGORY'
		]]>
		<if test="conditionCategory == null ">
			AND CAPR.catalog_category <![CDATA[<>]]> 'CATACATE_OS'
		</if>
		<if test="conditionCategory != null ">
			AND CAPR.catalog_category in
				<foreach item="item" index="index" collection="conditionCategory" open="(" close=")" separator="," >
					#{item}
				</foreach>
		</if>
		AND	CAPR.display_flag ='Y'
		<if test='enableRecommandFlag == "Y" '>
		AND	CAPR.recommand_flag = 'Y'
		</if>
		AND CAPR.del_flag = 'N'
		AND CATA.catalog_seq = (SELECT catalog_seq FROM bss_product_catalog WHERE del_flag = 'N' ORDER BY apply_date desc LIMIT 1)
		ORDER BY CAPR.catalog_category, CAPR.display_order

  	</select>

  	<select id="getContainerList" parameterType="CustomReqCatalogueVO" resultType="CustomReqCatalogueVO">
    <![CDATA[
		SELECT
			  CAPR.catalog_seq 			AS catalog_seq
			, CAPR.catalog_category 	AS catalog_category
			, CD.code_name 				AS catalog_category_name
			, CAPR.display_name 		AS display_name
			, CAPR.display_flag 		AS display_flag
			, CAPR.image_path 			AS image_path
			, CAPR.image_name 			AS image_name
		 	, CAPR.description 			AS description
		 	, CAPR.description_top 		AS description_top
		 	, CAPR.description_list 	AS description_list
		 	, CAPR.display_order 		AS display_order
		 	, PROD.product_seq 			AS product_seq
		 	, PROD.product_name 		AS product_name
		 	, PROD.product_category 	AS product_category
		 	, PROD.pod_cpu 				AS pod_cpu
		 	, PROD.pod_mem 				AS pod_mem
		 	, PROD.pod_cnt 				AS pod_cnt
		 	, PROD.pod_pv 				AS pod_pv
		 	, PROD.hourly_price 		AS hourly_price
		 	, PROD.monthly_price 		AS monthly_price
		 	, PROD.cloud_id 			AS cloud_id
		 	, PROD.image_type 			AS image_type
		 	, (select A.cloud_type from oss_cloud A where PROD.cloud_id = A.cloud_id limit 1) AS cloud_type
		FROM	bss_product_catalog 	 AS CATA,
				bss_product_catalog_item AS CAPR,
				cmm_code 				 AS CD,
			(
				SELECT
					PROD.product_seq 			AS product_seq,
					PROD.product_name 			AS product_name,
					PROD.product_category 		AS product_category,
					IFNULL(APP.pod_cpu,		0)  AS pod_cpu ,
					IFNULL(APP.pod_mem,		0)  AS pod_mem,
					IFNULL(APP.pod_cnt,		0)  AS pod_cnt,
					IFNULL(APP.pod_pv,		0)  AS pod_pv,
					IFNULL(APP.hourly_price,		0) AS hourly_price,
					IFNULL(APP.monthly_price,		0) AS monthly_price,
					APP.cloud_id 					   AS cloud_id,
					CASE WHEN APP.image_type != '' THEN APP.image_type ELSE VM.image_type END AS image_type
				FROM		bss_product PROD
				LEFT OUTER JOIN bss_product_app APP
					ON PROD.product_seq = APP.product_seq
				LEFT OUTER JOIN bss_product_vm VM
					ON PROD.product_seq = VM.product_seq)	AS PROD
      WHERE CATA.catalog_seq = CAPR.catalog_seq
		AND CAPR.product_seq = PROD.product_seq
		AND CAPR.catalog_category = CD.code_id
		AND CD.code_key_id = 'CATALOG_CATEGORY'
		]]>
		<if test="conditionCategory == null ">
			AND CAPR.catalog_category <![CDATA[<>]]> 'CATACATE_OS'
		</if>
		<if test="conditionCategory != null ">
			AND CAPR.catalog_category IN
				<foreach item="item" index="index" collection="conditionCategory" open="(" close=")" separator="," >
					#{item}
				</foreach>
			AND PROD.image_type LIKE 'APPIMG%'
		</if>
		AND	CAPR.display_flag ='Y'
		<if test='enableRecommandFlag == "Y" '>
		AND	CAPR.recommand_flag = 'Y'
		</if>
		AND CAPR.del_flag = 'N'
		AND CATA.catalog_seq = (
							SELECT catalog_seq
							FROM bss_product_catalog
							WHERE del_flag = 'N'
							  AND apply_date <![CDATA[<=]]>  DATE_FORMAT(NOW(), '%Y-%m-%d')
							ORDER BY apply_date DESC LIMIT 1)
		ORDER BY CAPR.catalog_category, CAPR.display_order
  	</select>

  	<select id="getCatalogueAppList" parameterType="CustomReqCatalogueVO" resultType="CustomReqCatalogueVO">
    <![CDATA[
		SELECT
			*
		FROM	bss_product_catalog CATA,
			bss_product_catalog_item CAPR,
			cmm_code CD,
			(
				/* 상품 구성 */
				SELECT
					PROD.product_seq,
					PROD.product_name,
					PROD.product_category,
					TMP.template_name,
					TMP.template_name_space,
					TMP.template_vcpus,
					TMP.template_mem,
					TMP.template_pod,
					TMP.item_id,
					TCD.code_name AS template_code_name
				 FROM bss_product PROD
				 LEFT OUTER JOIN bss_product_template TMP		-- 템플릿
				 ON PROD.product_seq = TMP.product_seq
				 LEFT JOIN cmm_code TCD
				 ON TMP.item_id = TCD.code_id
			) PROD
    WHERE CATA.catalog_seq = CAPR.catalog_seq
		AND CAPR.product_seq = PROD.product_seq
		AND CAPR.catalog_category = CD.code_id
		AND CD.code_key_id = 'CATALOG_CATEGORY'
		]]>
		<if test="conditionCategory == null ">
			AND CAPR.catalog_category <![CDATA[<>]]> 'CATACATE_APP'
		</if>
		<if test="conditionCategory != null ">
			AND CAPR.catalog_category in
				<foreach item="item" index="index" collection="conditionCategory" open="(" close=")" separator="," >
					#{item}
				</foreach>
		</if>
		AND	CAPR.display_flag ='Y'
		<if test='enableRecommandFlag == "Y" '>
		AND	CAPR.recommand_flag = 'Y'
		</if>
		AND CAPR.del_flag = 'N'
		AND CATA.catalog_seq = (SELECT catalog_seq FROM bss_product_catalog WHERE del_flag = 'N' ORDER BY apply_date desc LIMIT 1)
		ORDER BY CAPR.catalog_category, CAPR.display_order

  	</select>


  	<!--catalogue Service 리스트 2017.07.24 이윤준 추가-->
  	<select id="getCatalogueServiceList" resultType="CustomReqCatalogueVO">
    <![CDATA[
		SELECT
			*

		FROM	bss_product_catalog CATA,
			bss_product_catalog_item CAPR,
			cmm_code CD,
			(
				/* 상품 구성 */
				SELECT
					PROD.product_seq,
					PROD.product_name,
					PROD.product_category,
					SVS.service_type,
					IFNULL(VM.vcpus,0) AS vcpus ,
					IFNULL(VM.mem_gb,0) AS mem_gb,
					IFNULL(VM.disk_gb,0) AS vm_disk_gb,
					IFNULL(DSK.disk_gb,0) AS disk_gb,
					IFNULL(SVS.service_ea,0) AS service_ea
				 FROM bss_product PROD
				 LEFT OUTER JOIN bss_product_vm VM		-- 가상서버
				 ON PROD.product_seq = VM.product_seq
				 LEFT OUTER JOIN bss_product_disk DSK		-- 블록 디스크
				 ON PROD.product_seq = DSK.product_seq
				 LEFT OUTER JOIN bss_product_service SVS	-- 서비스
				 ON PROD.product_seq = SVS.product_seq
				 WHERE PROD.del_flag = 'N'

			) PROD

	WHERE	CATA.catalog_seq = CAPR.catalog_seq
		AND	CAPR.product_seq = PROD.product_seq
		AND CAPR.catalog_category = CD.code_id
		AND CD.code_key_id = 'CATALOG_CATEGORY'
		AND CAPR.catalog_category <> 'CATACATE_OS'
		AND	CAPR.display_flag ='Y'
		AND CAPR.del_flag = 'N'
	]]>
		AND CATA.catalog_seq = (SELECT catalog_seq FROM bss_product_catalog WHERE apply_date  <![CDATA[<=]]> #{applyDate} AND del_flag = 'N' ORDER BY apply_date desc LIMIT 1)
		AND	CAPR.catalog_category = 'CATACATE_SERVICE'
		ORDER BY CAPR.catalog_category, CAPR.display_order

  	</select>

  	<!--catalogue 리스트 예전-->
   <!--  <select id="getCatalogueListOld" resultType="CustomReqCatalogueVO">
    <![CDATA[
	    SELECT
	    		CAPR.display_name,
	    		CAPR.image_path,
				VM.vcpus,
				VM.mem_gb,
				VM.disk_gb,
				PROD.product_seq,
				PROD.product_category,
				CONCAT(VM.vcpus, 'vCPU / ', VM.mem_gb, 'GB / ', VM.disk_gb, 'GB') AS spec,
				FLOOR((((VM.vcpus / PRIC.cpu_quantity) * PRIC.cpu_hourly_price) +
					((VM.mem_gb / PRIC.mem_quantity) * PRIC.mem_hourly_price) +
					((VM.disk_gb / PRIC.disk_quantity) * PRIC.disk_hourly_price))) hourly_price,
				FLOOR((((VM.vcpus / PRIC.cpu_quantity) * PRIC.cpu_monthly_price) +
					((VM.mem_gb / PRIC.mem_quantity) * PRIC.mem_monthly_price) +
					((VM.disk_gb / PRIC.disk_quantity) * PRIC.disk_monthly_price))) monthly_price
		FROM	bss_product_catalog CATA,
				bss_product_catalog_item CAPR,
				bss_product PROD,
				bss_product_vm VM,
				(
					SELECT	SUM(CASE ITEM.item_id WHEN 'CPU010' THEN PRIC.hourly_price ELSE 0 END) cpu_hourly_price,
						SUM(CASE ITEM.item_id WHEN 'CPU010' THEN PRIC.monthly_price ELSE 0 END) cpu_monthly_price,
						SUM(CASE ITEM.item_id WHEN 'CPU010' THEN ITEM.quantity ELSE 0 END) cpu_quantity,
						SUM(CASE ITEM.item_id WHEN 'MEM010' THEN PRIC.hourly_price ELSE 0 END) mem_hourly_price,
						SUM(CASE ITEM.item_id WHEN 'MEM010' THEN PRIC.monthly_price ELSE 0 END) mem_monthly_price,
						SUM(CASE ITEM.item_id WHEN 'MEM010' THEN ITEM.quantity ELSE 0 END) mem_quantity,
						SUM(CASE ITEM.item_id WHEN 'DISK010' THEN PRIC.hourly_price ELSE 0 END) disk_hourly_price,
						SUM(CASE ITEM.item_id WHEN 'DISK010' THEN PRIC.monthly_price ELSE 0 END) disk_monthly_price,
						SUM(CASE ITEM.item_id WHEN 'DISK010' THEN ITEM.quantity ELSE 0 END) disk_quantity
					FROM	bill_product_catalog POLC,
						bill_policy_item POIT,
						bill_product ITEM,
						bill_product_catalog_item PRIC
					WHERE	POLC.apply_date = (
							SELECT	MAX(A.apply_date)
							FROM	bill_product_catalog A
							WHERE	A.apply_date <= #{applyDate}
							AND	A.del_flag = 'N'
						)
					AND	POLC.policy_seq = POIT.policy_seq
					AND	POIT.item_id = ITEM.item_id
					AND	ITEM.item_id IN ('CPU010', 'MEM010', 'DISK010')
					AND	POIT.policy_seq = PRIC.policy_seq
					AND	POIT.item_id = PRIC.item_id
					AND	POLC.del_flag = 'N'
				) PRIC
		WHERE	CATA.apply_date = (
					SELECT	MAX(A.apply_date)
					FROM	bss_product_catalog A
					WHERE	A.apply_date <= #{applyDate}
					AND	A.del_flag = 'N'
				)
		AND	CATA.catalog_seq = CAPR.catalog_seq
		AND	CAPR.catalog_category = 'CATACATE_VM'
		AND	CAPR.product_seq = PROD.product_seq
		AND	PROD.product_category = 'PRODCATE_VM'
		AND	PROD.product_seq = VM.product_seq
	]]>
  	</select> -->

    <select id="getCatalogueSelectView" resultType="CustomReqCatalogueVO">
    <![CDATA[
		SELECT
			CAPR.catalog_seq,
			CAPR.catalog_category,
			CD.code_name AS catalog_category_name,
			PROD.product_seq,
			CAPR.display_name,
			CAPR.display_flag,
			CAPR.image_path,
			CAPR.image_name,
		 	CAPR.description,
		 	CAPR.description_top,
		 	CAPR.description_list,
		 	CAPR.display_order,
		 	PROD.product_seq,
		 	PROD.product_category,

		 	PROD.vcpus,
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.cpu_quantity ELSE 0 END AS cpu_quantity ,
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.cpu_hourly_price ELSE 0 END AS cpu_hourly_price ,
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.cpu_monthly_price ELSE 0 END AS cpu_monthly_price ,
		 	PROD.mem_gb,
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.mem_quantity ELSE 0 END AS mem_quantity ,
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.mem_hourly_price ELSE 0 END AS mem_hourly_price ,
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.mem_monthly_price ELSE 0 END AS mem_monthly_price ,
		 	PROD.vm_disk_gb,
			CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.disk_quantity ELSE 0 END AS vm_disk_quantity ,
			CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.disk_hourly_price ELSE 0 END AS vm_disk_hourly_price ,
			CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.disk_monthly_price ELSE 0 END AS vm_disk_monthly_price ,
		 	PROD.vm_image_type,


		 	PROD.disk_type,
		 	PROD.disk_gb,
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_DISK' THEN PRIC.disk_quantity ELSE 0 END AS disk_quantity ,
			CASE CAPR.catalog_category  WHEN 'CATACATE_DISK' THEN PRIC.disk_hourly_price ELSE 0 END AS disk_hourly_price ,
			CASE CAPR.catalog_category  WHEN 'CATACATE_DISK' THEN PRIC.disk_monthly_price ELSE 0 END AS disk_monthly_price ,

		 	PROD.nas_gb,
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_NAS' THEN PRIC.nas_quantity ELSE 0 END AS nas_quantity ,
			CASE CAPR.catalog_category  WHEN 'CATACATE_NAS' THEN PRIC.nas_hourly_price ELSE 0 END AS nas_hourly_price ,
			CASE CAPR.catalog_category  WHEN 'CATACATE_NAS' THEN PRIC.nas_monthly_price ELSE 0 END AS nas_monthly_price ,

		 	PROD.loadbalancer_ea,
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_LOADBALANCER' THEN PRIC.loadbalancer_quantity ELSE 0 END AS loadbalancer_quantity ,
			CASE CAPR.catalog_category  WHEN 'CATACATE_LOADBALANCER' THEN PRIC.loadbalancer_hourly_price ELSE 0 END AS loadbalancer_hourly_price ,
			CASE CAPR.catalog_category  WHEN 'CATACATE_LOADBALANCER' THEN PRIC.loadbalancer_monthly_price ELSE 0 END AS loadbalancer_monthly_price ,

		 	PROD.publicip_ea,
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_PUBLICIP' THEN PRIC.publicip_quantity ELSE 0 END AS publicip_quantity ,
			CASE CAPR.catalog_category  WHEN 'CATACATE_PUBLICIP' THEN PRIC.publicip_hourly_price ELSE 0 END AS publicip_hourly_price ,
			CASE CAPR.catalog_category  WHEN 'CATACATE_PUBLICIP' THEN PRIC.publicip_monthly_price ELSE 0 END AS publicip_monthly_price ,

		 	CASE CAPR.catalog_category
		 	WHEN 'CATACATE_VM' THEN ((PROD.vcpus / PRIC.cpu_quantity) * PRIC.cpu_hourly_price) + ((PROD.mem_gb / PRIC.mem_quantity) * PRIC.mem_hourly_price) + ((PROD.vm_disk_gb / PRIC.disk_quantity) * PRIC.disk_hourly_price)
		 	WHEN 'CATACATE_DISK' THEN (PROD.disk_gb / PRIC.disk_quantity) * PRIC.disk_hourly_price
		 	WHEN 'CATACATE_NAS' THEN (PROD.nas_gb / PRIC.nas_quantity) * PRIC.nas_hourly_price
		 	WHEN 'CATACATE_PUBLICIP' THEN (PROD.publicip_ea / PRIC.publicip_quantity) * PRIC.publicip_hourly_price
		 	WHEN 'CATACATE_LOADBALANCER' THEN (PROD.loadbalancer_ea / PRIC.loadbalancer_quantity) * PRIC.loadbalancer_hourly_price
		 	ELSE 0 END AS hourly_price,

		 	CASE CAPR.catalog_category
		 	WHEN 'CATACATE_VM' THEN ((PROD.vcpus / PRIC.cpu_quantity) * PRIC.cpu_monthly_price) + ((PROD.mem_gb / PRIC.mem_quantity) * PRIC.mem_monthly_price) + ((PROD.vm_disk_gb / PRIC.disk_quantity) * PRIC.disk_monthly_price)
		 	WHEN 'CATACATE_DISK' THEN (PROD.disk_gb / PRIC.disk_quantity) * PRIC.disk_monthly_price
		 	WHEN 'CATACATE_NAS' THEN (PROD.nas_gb / PRIC.nas_quantity) * PRIC.nas_monthly_price
		 	WHEN 'CATACATE_PUBLICIP' THEN (PROD.publicip_ea / PRIC.publicip_quantity) * PRIC.publicip_monthly_price
		 	WHEN 'CATACATE_LOADBALANCER' THEN (PROD.loadbalancer_ea / PRIC.loadbalancer_quantity) * PRIC.loadbalancer_monthly_price
		 	ELSE 0 END AS monthly_price

		FROM	bss_product_catalog CATA,
			bss_product_catalog_item CAPR,
			cmm_code CD,
			(

				SELECT
					PROD.product_seq,
					PROD.product_name,
					PROD.product_category,
					IFNULL(VM.vcpus,0) AS vcpus ,
					IFNULL(VM.mem_gb,0) AS mem_gb,
					IFNULL(VM.disk_gb,0) AS vm_disk_gb,
					IFNULL(VM.image_type,0) AS vm_image_type,
					IFNULL(DSK.disk_type,0) AS disk_type,
					IFNULL(DSK.disk_gb,0) AS disk_gb,
					IFNULL(NAS.nas_gb,0) AS nas_gb,
					IFNULL(BAL.loadbalancer_ea,0) AS loadbalancer_ea,
					IFNULL(IP.publicip_ea,0) AS publicip_ea
				 FROM bss_product PROD
				 LEFT OUTER JOIN bss_product_vm VM
				 ON PROD.product_seq = VM.product_seq
				 LEFT OUTER JOIN bss_product_disk DSK
				 ON PROD.product_seq = DSK.product_seq
				 LEFT OUTER JOIN bss_product_nas NAS
				 ON PROD.product_seq = NAS.product_seq
				 LEFT OUTER JOIN bss_product_loadbalancer BAL
				 ON PROD.product_seq = BAL.product_seq
				 LEFT OUTER JOIN bss_product_publicip IP
				 ON PROD.product_seq = IP.product_seq
				 WHERE PROD.del_flag = 'N'

			) PROD,
			(
				SELECT	SUM(CASE ITEM.item_id WHEN 'CPU010' THEN PRIC.hourly_price ELSE 0 END) cpu_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'CPU010' THEN PRIC.monthly_price ELSE 0 END) cpu_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'CPU010' THEN ITEM.quantity ELSE 0 END) cpu_quantity,
					SUM(CASE ITEM.item_id WHEN 'MEM010' THEN PRIC.hourly_price ELSE 0 END) mem_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'MEM010' THEN PRIC.monthly_price ELSE 0 END) mem_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'MEM010' THEN ITEM.quantity ELSE 0 END) mem_quantity,
					SUM(CASE ITEM.item_id WHEN 'DISK010' THEN PRIC.hourly_price ELSE 0 END) disk_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'DISK010' THEN PRIC.monthly_price ELSE 0 END) disk_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'DISK010' THEN ITEM.quantity ELSE 0 END) disk_quantity,

					SUM(CASE ITEM.item_id WHEN 'NAS010' THEN PRIC.hourly_price ELSE 0 END) nas_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'NAS010' THEN PRIC.monthly_price ELSE 0 END) nas_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'NAS010' THEN ITEM.quantity ELSE 0 END) nas_quantity,

					SUM(CASE ITEM.item_id WHEN 'LOADBALANCER010' THEN PRIC.hourly_price ELSE 0 END) loadbalancer_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'LOADBALANCER010' THEN PRIC.monthly_price ELSE 0 END) loadbalancer_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'LOADBALANCER010' THEN ITEM.quantity ELSE 0 END) loadbalancer_quantity,

					SUM(CASE ITEM.item_id WHEN 'PUBLICIP010' THEN PRIC.hourly_price ELSE 0 END) publicip_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'PUBLICIP010' THEN PRIC.monthly_price ELSE 0 END) publicip_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'PUBLICIP010' THEN ITEM.quantity ELSE 0 END) publicip_quantity

				FROM	bill_product_catalog POLC,
					bill_policy_item POIT,
					bill_product ITEM,
					bill_product_catalog_item PRIC
				WHERE	POLC.apply_date = (
						SELECT	MAX(A.apply_date)
						FROM	bill_product_catalog A
						WHERE	A.apply_date <= #{applyDate}
						AND	A.del_flag = 'N'
					)
				AND	POLC.policy_seq = POIT.policy_seq
				AND	POIT.item_id = ITEM.item_id
				AND	ITEM.item_id IN ('CPU010', 'MEM010', 'DISK010', 'NAS010', 'LOADBALANCER010','PUBLICIP010', 'SCM010', 'BACKUP010', 'MCA010', 'SECURITY010')
				AND	POIT.policy_seq = PRIC.policy_seq
				AND	POIT.item_id = PRIC.item_id
				AND	POLC.del_flag = 'N'
			) PRIC

		WHERE	CATA.apply_date = (
						SELECT	MAX(A.apply_date)
						FROM	bss_product_catalog A
						WHERE	A.apply_date <= #{applyDate}
						AND	A.del_flag = 'N'
					)
		AND	CATA.catalog_seq = CAPR.catalog_seq
		AND	CAPR.product_seq = PROD.product_seq
		AND 	CAPR.catalog_category = CD.code_id
		AND 	CD.code_key_id = 'CATALOG_CATEGORY'
		AND 	CAPR.catalog_category <> 'CATACATE_OS'
		AND	CAPR.display_flag ='Y'
		AND CAPR.del_flag = 'N'
		AND CATA.catalog_seq = (SELECT catalog_seq FROM bss_product_catalog WHERE del_flag='N' ORDER BY apply_date desc LIMIT 1)

		-- AND	CAPR.catalog_category IN('CATACATE_MCA', 'CATACATE_BACKUP','CATACATE_SCM', 'CATACATE_SECURITY')
		-- AND	CAPR.catalog_category IN('CATACATE_DISK', 'CATACATE_NAS','CATACATE_PUBLICIP', 'CATACATE_LOADBALANCER')
		-- AND 	CAPR.display_order ='1'
		  AND 	PROD.product_seq = #{productSeq}


		ORDER BY CAPR.catalog_category, CAPR.display_order
	]]>
  	</select>

    <select id="getSelectContainer" parameterType="CustomReqCatalogueVO" resultType="CustomReqCatalogueVO">
    <![CDATA[
		SELECT
			CAPR.catalog_seq 			AS catalog_seq
			, CAPR.catalog_category 	AS catalog_category
			, CD.code_name 				AS catalog_category_name
			, CAPR.display_name 		AS display_name
			, CAPR.display_flag 		AS display_flag
			, CAPR.image_path 			AS image_path
			, CAPR.image_name 			AS image_name
		 	, CAPR.description 			AS description
		 	, CAPR.description_top 		AS description_top
		 	, CAPR.description_list 	AS description_list
		 	, CAPR.display_order 		AS display_order
		 	, PROD.product_seq 			AS product_seq
		 	, PROD.product_name 		AS product_name
		 	, PROD.product_category 	AS product_category
		 	, PROD.pod_cpu 				AS pod_cpu
		 	, PROD.pod_mem 				AS pod_mem
		 	, PROD.pod_cnt 				AS pod_cnt
		 	, PROD.pod_pv 				AS pod_pv
		 	, PROD.hourly_price 		AS hourly_price
		 	, PROD.monthly_price 		AS monthly_price
		 	, PROD.cloud_id 			AS cloud_id
		 	, PROD.image_type 			AS image_type
		FROM	bss_product_catalog CATA,
			bss_product_catalog_item CAPR,
			cmm_code CD,
			(
				SELECT
					PROD.product_seq 			as product_seq,
					PROD.product_name 			as product_name,
					PROD.product_category 		as product_category,
					IFNULL(APP.pod_cpu,		0)  as pod_cpu ,
					IFNULL(APP.pod_mem,		0)  as pod_mem,
					IFNULL(APP.pod_cnt,		0)  as pod_cnt,
					IFNULL(APP.pod_pv,		0)  as pod_pv,
					IFNULL(APP.hourly_price,0)  as hourly_price,
					IFNULL(APP.monthly_price,0) as monthly_price,
					APP.cloud_id 			    as cloud_id,
					APP.image_type
				FROM		bss_product PROD
				LEFT OUTER JOIN bss_product_app APP
					ON PROD.product_seq = APP.product_seq  ) 	as PROD
      WHERE CATA.catalog_seq = CAPR.catalog_seq
		AND CAPR.product_seq = PROD.product_seq
		AND CAPR.catalog_category = CD.code_id
		AND CD.code_key_id = 'CATALOG_CATEGORY'
		]]>
		<if test="conditionCategory == null ">
			AND CAPR.catalog_category <![CDATA[<>]]> 'CATACATE_OS'
		</if>
		<if test="conditionCategory != null ">
			AND CAPR.catalog_category in
				<foreach item="item" index="index" collection="conditionCategory" open="(" close=")" separator="," >
					#{item}
				</foreach>
		</if>
		AND	CAPR.display_flag ='Y'
		<if test='enableRecommandFlag == "Y" '>
		AND	CAPR.recommand_flag = 'Y'
		</if>
		AND CAPR.del_flag = 'N'
		AND CATA.catalog_seq = (
                                 SELECT catalog_seq
                                   FROM bss_product_catalog
                                 WHERE del_flag = 'N'
                                     AND apply_date <![CDATA[<=]]>  DATE_FORMAT(NOW(), '%Y-%m-%d')
                             	 ORDER BY apply_date desc LIMIT 1
		                        )
		AND 	PROD.product_seq = #{productSeq}
		ORDER BY CAPR.catalog_category, CAPR.display_order
  	</select>

  	<select id="getCatalogueSelectApp" resultType="CustomReqCatalogueVO">
  	<![CDATA[
  		SELECT
			CAPR.catalog_seq,
			CAPR.catalog_category,
			CD.code_name AS catalog_category_name,
			PROD.product_seq,
			CAPR.display_name,
			CAPR.display_flag,
			CAPR.image_path,
			CAPR.image_name,
		 	CAPR.description,
		 	CAPR.description_top,
		 	CAPR.description_list,
		 	CAPR.display_order,
		 	PROD.product_seq,
		 	PROD.product_category,
		 	PROD.template_name,
			PROD.template_id,
			PROD.template_vcpus,
			PROD.template_mem,
			PROD.template_pod,
			PROD.template_name_space,
			PROD.cloud_id
		FROM
			bss_product_catalog CATA,
			bss_product_catalog_item CAPR,
			cmm_code CD,
			(
				/* 상품 구성 */
				SELECT
					PROD.product_seq,
					PROD.product_name,
					PROD.product_category,
					TMP.template_name,
					TMP.template_id,
					TMP.template_vcpus,
					TMP.template_mem,
					TMP.template_pod,
					TMP.template_name_space,
					TMP.cloud_id
				 FROM bss_product PROD
				 LEFT OUTER JOIN bss_product_template TMP		-- 가상서버
				 ON PROD.product_seq = TMP.product_seq
				 WHERE PROD.del_flag = 'N'
			) PROD
		WHERE	CATA.apply_date = (
						SELECT	MAX(A.apply_date)
						FROM	bss_product_catalog A
						WHERE	A.apply_date <= #{applyDate}
						AND	A.del_flag = 'N'
					)
		AND	CATA.catalog_seq = CAPR.catalog_seq
		AND	CAPR.product_seq = PROD.product_seq
		AND 	CAPR.catalog_category = CD.code_id
		AND 	CD.code_key_id = 'CATALOG_CATEGORY'
		AND 	CAPR.catalog_category = 'CATACATE_APP'
		AND	CAPR.display_flag ='Y'
		AND CAPR.del_flag = 'N'
		AND CATA.catalog_seq = (SELECT catalog_seq FROM bss_product_catalog WHERE del_flag='N' ORDER BY apply_date desc LIMIT 1)
		AND 	PROD.product_seq = #{productSeq}
		ORDER BY CAPR.catalog_category, CAPR.display_order
	]]>
  	</select>

  	<!--catalogue service 선택 상세 내용 2017.07.24 이윤준 추가-->
    <select id="getCatalogueServiceView" resultType="CustomReqCatalogueVO">
    <![CDATA[
		SELECT
			CAPR.catalog_seq,
			CAPR.catalog_category,
			CD.code_name AS catalog_category_name,
			PROD.product_seq,
			PROD.product_name,
			PROD.service_type,
			CAPR.display_name,
			CAPR.display_flag,
			CAPR.recommand_flag,
			CAPR.image_path,
			CAPR.image_name,
		 	CAPR.description,
		 	CAPR.description_top,
		 	CAPR.description_list,
		 	CAPR.display_order,
		 	CAPR.basic_product_flag,
		 	PROD.product_seq,
		 	PROD.product_category,
		 	/*가상서버 시작*/
		 	PROD.vcpus, 		-- vcpu
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.cpu_quantity ELSE 0 END AS cpu_quantity ,			-- vpcu 과금 단위
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.cpu_hourly_price ELSE 0 END AS cpu_hourly_price ,		-- 시간 단위 금액
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.cpu_monthly_price ELSE 0 END AS cpu_monthly_price ,		-- 월 단위 금액
		 	PROD.mem_gb,		-- 메모리
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.mem_quantity ELSE 0 END AS mem_quantity ,			-- mem 과금 단위
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.mem_hourly_price ELSE 0 END AS mem_hourly_price ,		-- 시간 단위 금액
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.mem_monthly_price ELSE 0 END AS mem_monthly_price ,		-- 월 단위 금액
		 	PROD.vm_disk_gb,	-- 디스크
			CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.disk_quantity ELSE 0 END AS vm_disk_quantity ,			-- disk 과금 단위
			CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.disk_hourly_price ELSE 0 END AS vm_disk_hourly_price ,		-- 시간 단위 금액
			CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.disk_monthly_price ELSE 0 END AS vm_disk_monthly_price ,	-- 월 단위 금액
		 	/*가상서버 끝*/

		 	/*블록 디스크 시작*/
		 	PROD.disk_gb,	-- 블록 디스크 용량
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_DISK' THEN PRIC.disk_quantity ELSE 0 END AS disk_quantity ,			-- disk 과금 단위
			CASE CAPR.catalog_category  WHEN 'CATACATE_DISK' THEN PRIC.disk_hourly_price ELSE 0 END AS disk_hourly_price ,		-- 시간 단위 금액
			CASE CAPR.catalog_category  WHEN 'CATACATE_DISK' THEN PRIC.disk_monthly_price ELSE 0 END AS disk_monthly_price ,	-- 월 단위 금액
		 	/*블록 디스크  끝*/

		 	/*NAS 디스크 시작*/
		 	PROD.nas_gb,	-- NAS 용량
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_NAS' THEN PRIC.nas_quantity ELSE 0 END AS nas_quantity ,			-- NAS 과금 단위
			CASE CAPR.catalog_category  WHEN 'CATACATE_NAS' THEN PRIC.nas_hourly_price ELSE 0 END AS nas_hourly_price ,		-- 시간 단위 금액
			CASE CAPR.catalog_category  WHEN 'CATACATE_NAS' THEN PRIC.nas_monthly_price ELSE 0 END AS nas_monthly_price ,		-- 월 단위 금액
		 	/*NAS 디스크  끝*/

		 	/*로드밸런서 시작*/
		 	PROD.loadbalancer_ea,	-- 로드 밸런서 갯수
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_LOADBALANCER' THEN PRIC.loadbalancer_quantity ELSE 0 END AS loadbalancer_quantity ,			-- 로드밸런서 과금 단위
			CASE CAPR.catalog_category  WHEN 'CATACATE_LOADBALANCER' THEN PRIC.loadbalancer_hourly_price ELSE 0 END AS loadbalancer_hourly_price ,		-- 시간 단위 금액
			CASE CAPR.catalog_category  WHEN 'CATACATE_LOADBALANCER' THEN PRIC.loadbalancer_monthly_price ELSE 0 END AS loadbalancer_monthly_price ,	-- 월 단위 금액
		 	/*N로드밸런서  끝*/

		 	/*공인IP 시작*/
		 	PROD.publicip_ea,	-- 공인 IP 갯수
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_PUBLICIP' THEN PRIC.publicip_quantity ELSE 0 END AS publicip_quantity ,			-- 공인IP 과금 단위
			CASE CAPR.catalog_category  WHEN 'CATACATE_PUBLICIP' THEN PRIC.publicip_hourly_price ELSE 0 END AS publicip_hourly_price ,		-- 시간 단위 금액
			CASE CAPR.catalog_category  WHEN 'CATACATE_PUBLICIP' THEN PRIC.publicip_monthly_price ELSE 0 END AS publicip_monthly_price ,		-- 월 단위 금액
		 	/*공인IP 끝*/

		 	/*서비스 시작*/
		 	CASE
		 	WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '01' THEN PRIC.service_account_quantity
		 	WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '02' THEN PRIC.service_security_quantity
		 	WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '03' THEN PRIC.service_backup_quantity
            WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '04' THEN PRIC.service_sw_quantity
            WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '05' THEN PRIC.service_disk_quantity
		 	ELSE 0 END AS service_quantity ,			-- 서비스 과금 단위

			CASE
			WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '01'  THEN PRIC.service_account_hourly_price
			WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '02'  THEN PRIC.service_security_hourly_price
			WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '03'  THEN PRIC.service_backup_hourly_price
			WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '04'  THEN PRIC.service_sw_hourly_price
			WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '05'  THEN PRIC.service_disk_hourly_price

			ELSE 0 END AS service_hourly_price ,		-- 시간 단위 금액

			CASE
			WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '01' THEN PRIC.service_account_monthly_price
			WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '02' THEN PRIC.service_security_monthly_price
			WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '03' THEN PRIC.service_backup_monthly_price
			WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '04' THEN PRIC.service_sw_monthly_price
			WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '05' THEN PRIC.service_disk_monthly_price
			ELSE 0 END AS service_monthly_price ,		-- 월 단위 금액

		 	/*서비스  끝*/
		 	CASE
		 	WHEN CAPR.catalog_category = 'CATACATE_VM' THEN ((PROD.vcpus / PRIC.cpu_quantity) * PRIC.cpu_hourly_price) + ((PROD.mem_gb / PRIC.mem_quantity) * PRIC.mem_hourly_price) + ((PROD.vm_disk_gb / PRIC.disk_quantity) * PRIC.disk_hourly_price)
		 	WHEN CAPR.catalog_category = 'CATACATE_DISK' THEN (PROD.disk_gb / PRIC.disk_quantity) * PRIC.disk_hourly_price
		 	WHEN CAPR.catalog_category = 'CATACATE_NAS' THEN (PROD.nas_gb / PRIC.nas_quantity) * PRIC.nas_hourly_price
		 	WHEN CAPR.catalog_category = 'CATACATE_PUBLICIP' THEN (PROD.publicip_ea / PRIC.publicip_quantity) * PRIC.publicip_hourly_price
		 	WHEN CAPR.catalog_category = 'CATACATE_LOADBALANCER' THEN (PROD.loadbalancer_ea / PRIC.loadbalancer_quantity) * PRIC.loadbalancer_hourly_price

		 	WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '01' THEN (PROD.service_ea / PRIC.service_account_quantity) * PRIC.service_account_hourly_price
		 	WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '02' THEN (PROD.service_ea / PRIC.service_security_quantity) * PRIC.service_security_hourly_price
		 	WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '03' THEN (PROD.service_ea / PRIC.service_backup_quantity) * PRIC.service_backup_hourly_price
		 	WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '04' THEN (PROD.service_ea / PRIC.service_sw_quantity) * PRIC.service_sw_hourly_price
		 	WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '05' THEN (PROD.service_ea / PRIC.service_disk_quantity) * PRIC.service_disk_hourly_price
		 	ELSE 0 END AS hourly_price,

		 	CASE
		 	WHEN CAPR.catalog_category = 'CATACATE_VM' THEN ((PROD.vcpus / PRIC.cpu_quantity) * PRIC.cpu_monthly_price) + ((PROD.mem_gb / PRIC.mem_quantity) * PRIC.mem_monthly_price) + ((PROD.vm_disk_gb / PRIC.disk_quantity) * PRIC.disk_monthly_price)
		 	WHEN CAPR.catalog_category = 'CATACATE_DISK' THEN (PROD.disk_gb / PRIC.disk_quantity) * PRIC.disk_monthly_price
		 	WHEN CAPR.catalog_category = 'CATACATE_NAS' THEN (PROD.nas_gb / PRIC.nas_quantity) * PRIC.nas_monthly_price
		 	WHEN CAPR.catalog_category = 'CATACATE_PUBLICIP' THEN (PROD.publicip_ea / PRIC.publicip_quantity) * PRIC.publicip_monthly_price
		 	WHEN CAPR.catalog_category = 'CATACATE_LOADBALANCER' THEN (PROD.loadbalancer_ea / PRIC.loadbalancer_quantity) * PRIC.loadbalancer_monthly_price

		    WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '01' THEN (PROD.service_ea / PRIC.service_account_quantity) * PRIC.service_account_monthly_price
		    WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '02' THEN (PROD.service_ea / PRIC.service_security_quantity) * PRIC.service_security_monthly_price
		    WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '03' THEN (PROD.service_ea / PRIC.service_backup_quantity) * PRIC.service_backup_monthly_price
		    WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '04' THEN (PROD.service_ea / PRIC.service_sw_quantity) * PRIC.service_sw_monthly_price
            WHEN CAPR.catalog_category = 'CATACATE_SERVICE' AND PROD.service_type = '05' THEN (PROD.service_ea / PRIC.service_disk_quantity) * PRIC.service_disk_monthly_price
		 	ELSE 0 END AS monthly_price

		FROM	bss_product_catalog CATA,
			bss_product_catalog_item CAPR,
			cmm_code CD,
			(
				/* 상품 구성 */
				SELECT
					PROD.product_seq,
					PROD.product_name,
					PROD.product_category,
					SVS.service_type,
					IFNULL(VM.vcpus,0) AS vcpus ,
					IFNULL(VM.mem_gb,0) AS mem_gb,
					IFNULL(VM.disk_gb,0) AS vm_disk_gb,
					IFNULL(DSK.disk_gb,0) AS disk_gb,
					IFNULL(NAS.nas_gb,0) AS nas_gb,
					IFNULL(BAL.loadbalancer_ea,0) AS loadbalancer_ea,
					IFNULL(IP.publicip_ea,0) AS publicip_ea,
					IFNULL(SVS.service_ea,0) AS service_ea
				 FROM bss_product PROD
				 LEFT OUTER JOIN bss_product_vm VM		-- 가상서버
				 ON PROD.product_seq = VM.product_seq
				 LEFT OUTER JOIN bss_product_disk DSK		-- 블록 디스크
				 ON PROD.product_seq = DSK.product_seq
				 LEFT OUTER JOIN bss_product_nas NAS		-- NAS
				 ON PROD.product_seq = NAS.product_seq
				 LEFT OUTER JOIN bss_product_loadbalancer BAL	-- 로드 밸런서
				 ON PROD.product_seq = BAL.product_seq
				 LEFT OUTER JOIN bss_product_publicip IP	-- 공인IP
				 ON PROD.product_seq = IP.product_seq
				 LEFT OUTER JOIN BSS_product_service SVS    -- 서비스
				 ON PROD.product_seq = SVS.product_seq
				 WHERE PROD.del_flag = 'N'

			) PROD,
			( /* 가격표 */
				SELECT	SUM(CASE ITEM.item_id WHEN 'CPU010' THEN PRIC.hourly_price ELSE 0 END) cpu_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'CPU010' THEN PRIC.monthly_price ELSE 0 END) cpu_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'CPU010' THEN ITEM.quantity ELSE 0 END) cpu_quantity,
					SUM(CASE ITEM.item_id WHEN 'MEM010' THEN PRIC.hourly_price ELSE 0 END) mem_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'MEM010' THEN PRIC.monthly_price ELSE 0 END) mem_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'MEM010' THEN ITEM.quantity ELSE 0 END) mem_quantity,
					SUM(CASE ITEM.item_id WHEN 'DISK010' THEN PRIC.hourly_price ELSE 0 END) disk_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'DISK010' THEN PRIC.monthly_price ELSE 0 END) disk_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'DISK010' THEN ITEM.quantity ELSE 0 END) disk_quantity,

					SUM(CASE ITEM.item_id WHEN 'NAS010' THEN PRIC.hourly_price ELSE 0 END) nas_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'NAS010' THEN PRIC.monthly_price ELSE 0 END) nas_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'NAS010' THEN ITEM.quantity ELSE 0 END) nas_quantity,

					SUM(CASE ITEM.item_id WHEN 'LOADBALANCER010' THEN PRIC.hourly_price ELSE 0 END) loadbalancer_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'LOADBALANCER010' THEN PRIC.monthly_price ELSE 0 END) loadbalancer_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'LOADBALANCER010' THEN ITEM.quantity ELSE 0 END) loadbalancer_quantity,

					SUM(CASE ITEM.item_id WHEN 'PUBLICIP010' THEN PRIC.hourly_price ELSE 0 END) publicip_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'PUBLICIP010' THEN PRIC.monthly_price ELSE 0 END) publicip_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'PUBLICIP010' THEN ITEM.quantity ELSE 0 END) publicip_quantity,

					SUM(CASE ITEM.item_id WHEN 'SERVICE010' THEN PRIC.hourly_price ELSE 0 END) service_account_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'SERVICE010' THEN PRIC.monthly_price ELSE 0 END) service_account_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'SERVICE010' THEN ITEM.quantity ELSE 0 END) service_account_quantity,

					SUM(CASE ITEM.item_id WHEN 'SERVICE011' THEN PRIC.hourly_price ELSE 0 END) service_security_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'SERVICE011' THEN PRIC.monthly_price ELSE 0 END) service_security_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'SERVICE011' THEN ITEM.quantity ELSE 0 END) service_security_quantity,

					SUM(CASE ITEM.item_id WHEN 'SERVICE012' THEN PRIC.hourly_price ELSE 0 END) service_backup_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'SERVICE012' THEN PRIC.monthly_price ELSE 0 END) service_backup_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'SERVICE012' THEN ITEM.quantity ELSE 0 END) service_backup_quantity,

					SUM(CASE ITEM.item_id WHEN 'SERVICE013' THEN PRIC.hourly_price ELSE 0 END) service_sw_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'SERVICE013' THEN PRIC.monthly_price ELSE 0 END) service_sw_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'SERVICE013' THEN ITEM.quantity ELSE 0 END) service_sw_quantity,

					SUM(CASE ITEM.item_id WHEN 'SERVICE014' THEN PRIC.hourly_price ELSE 0 END) service_disk_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'SERVICE014' THEN PRIC.monthly_price ELSE 0 END) service_disk_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'SERVICE014' THEN ITEM.quantity ELSE 0 END) service_disk_quantity

				FROM	bill_product_catalog POLC,
					bill_policy_item POIT,
					bill_product ITEM,
					bill_product_catalog_item PRIC
				WHERE	POLC.apply_date = (
						SELECT	MAX(A.apply_date)
						FROM	bill_product_catalog A
						WHERE	A.apply_date <=  #{applyDate}
						AND	A.del_flag = 'N'
					)
				AND	POLC.policy_seq = POIT.policy_seq
				AND	POIT.item_id = ITEM.item_id
				AND	ITEM.item_id IN (SELECT item_id FROM bill_product)
				AND	POIT.policy_seq = PRIC.policy_seq
				AND	POIT.item_id = PRIC.item_id
				AND	POLC.del_flag = 'N'
			) PRIC

		WHERE	CATA.apply_date = (
						SELECT	MAX(A.apply_date)
						FROM	bss_product_catalog A
						WHERE	A.apply_date <= #{applyDate}
						AND	A.del_flag = 'N'
					)
		AND	CATA.catalog_seq = CAPR.catalog_seq
		AND	CAPR.product_seq = PROD.product_seq
		AND CAPR.catalog_category = CD.code_id
		AND CD.code_key_id = 'CATALOG_CATEGORY'
		AND CAPR.catalog_category <> 'CATACATE_OS'
		AND	CAPR.display_flag ='Y'
		AND CAPR.del_flag = 'N'
		AND CATA.catalog_seq = (SELECT catalog_seq FROM bss_product_catalog WHERE del_flag = 'N' ORDER BY apply_date desc LIMIT 1)
		/* 부가상품 검색 조건 시작*/
		-- AND	CAPR.catalog_category IN('CATACATE_MCA', 'CATACATE_BACKUP','CATACATE_SCM', 'CATACATE_SECURITY')
		  -- AND	CAPR.catalog_category IN('CATACATE_DISK', 'CATACATE_NAS','CATACATE_PUBLICIP', 'CATACATE_LOADBALANCER')
		  -- AND 	CAPR.display_order ='1'
		  AND 	PROD.product_seq = #{productSeq}
		/* 부가상품 검색 조건 종료*/

		ORDER BY CAPR.catalog_category, CAPR.display_order
	]]>
  	</select>

   	<!--catalogue 선택 상세 내용 에전-->
    <!-- <select id="getCatalogueSelectViewOld" resultType="CustomReqCatalogueVO">
    <![CDATA[
	    SELECT
	    		CAPR.display_name,
	    		CAPR.image_path,
				VM.vcpus,
				VM.mem_gb,
				VM.disk_gb,
				PROD.product_seq,
				PROD.product_category,
				CAPR.description,
				CONCAT(VM.vcpus, 'vCPU / ', VM.mem_gb, 'GB / ', VM.disk_gb, 'GB') AS spec,
				FLOOR((((VM.vcpus / PRIC.cpu_quantity) * PRIC.cpu_hourly_price) +
					((VM.mem_gb / PRIC.mem_quantity) * PRIC.mem_hourly_price) +
					((VM.disk_gb / PRIC.disk_quantity) * PRIC.disk_hourly_price))) hourly_price,
				FLOOR((((VM.vcpus / PRIC.cpu_quantity) * PRIC.cpu_monthly_price) +
					((VM.mem_gb / PRIC.mem_quantity) * PRIC.mem_monthly_price) +
					((VM.disk_gb / PRIC.disk_quantity) * PRIC.disk_monthly_price))) monthly_price
		FROM	bss_product_catalog CATA,
				bss_product_catalog_item CAPR,
				bss_product PROD,
				bss_product_vm VM,
				(
					SELECT	SUM(CASE ITEM.item_id WHEN 'CPU010' THEN PRIC.hourly_price ELSE 0 END) cpu_hourly_price,
						SUM(CASE ITEM.item_id WHEN 'CPU010' THEN PRIC.monthly_price ELSE 0 END) cpu_monthly_price,
						SUM(CASE ITEM.item_id WHEN 'CPU010' THEN ITEM.quantity ELSE 0 END) cpu_quantity,
						SUM(CASE ITEM.item_id WHEN 'MEM010' THEN PRIC.hourly_price ELSE 0 END) mem_hourly_price,
						SUM(CASE ITEM.item_id WHEN 'MEM010' THEN PRIC.monthly_price ELSE 0 END) mem_monthly_price,
						SUM(CASE ITEM.item_id WHEN 'MEM010' THEN ITEM.quantity ELSE 0 END) mem_quantity,
						SUM(CASE ITEM.item_id WHEN 'DISK010' THEN PRIC.hourly_price ELSE 0 END) disk_hourly_price,
						SUM(CASE ITEM.item_id WHEN 'DISK010' THEN PRIC.monthly_price ELSE 0 END) disk_monthly_price,
						SUM(CASE ITEM.item_id WHEN 'DISK010' THEN ITEM.quantity ELSE 0 END) disk_quantity
					FROM	bill_product_catalog POLC,
						bill_policy_item POIT,
						bill_product ITEM,
						bill_product_catalog_item PRIC
					WHERE	POLC.apply_date = (
							SELECT	MAX(A.apply_date)
							FROM	bill_product_catalog A
							WHERE	A.apply_date <= #{applyDate}
							AND	A.del_flag = 'N'
						)
					AND	POLC.policy_seq = POIT.policy_seq
					AND POLC.cloud_id = #{cloudId}
					AND	POIT.item_id = ITEM.item_id
					AND	ITEM.item_id IN ('CPU010', 'MEM010', 'DISK010')
					AND	POIT.policy_seq = PRIC.policy_seq
					AND	POIT.item_id = PRIC.item_id
					AND	POLC.del_flag = 'N'
				) PRIC
		WHERE	CATA.apply_date = (
					SELECT	MAX(A.apply_date)
					FROM	bss_product_catalog A
					WHERE	A.apply_date <= #{applyDate}
					AND	A.del_flag = 'N'
				)
		AND	CATA.catalog_seq = CAPR.catalog_seq
		AND	CAPR.catalog_category = 'CATACATE_VM'
		AND	CAPR.product_seq = PROD.product_seq
		AND	PROD.product_category = 'PRODCATE_VM'
		AND	PROD.product_seq = VM.product_seq
		AND	PROD.product_seq = #{productSeq}
	]]>
  	</select> -->

  	<!--catalogue item 금액 -->
    <select id="getCatalogueItempric" resultType="CustomReqCatalogueVO">
    <![CDATA[
		SELECT	FLOOR(SUM(CASE ITEM.item_id WHEN 'CPU010' THEN PRIC.hourly_price ELSE 0 END)) cpu_hourly_price,
					FLOOR(SUM(CASE ITEM.item_id WHEN 'CPU010' THEN PRIC.monthly_price ELSE 0 END)) cpu_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'CPU010' THEN ITEM.quantity ELSE 0 END) cpu_quantity,
					FLOOR(SUM(CASE ITEM.item_id WHEN 'MEM010' THEN PRIC.hourly_price ELSE 0 END)) mem_hourly_price,
					FLOOR(SUM(CASE ITEM.item_id WHEN 'MEM010' THEN PRIC.monthly_price ELSE 0 END)) mem_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'MEM010' THEN ITEM.quantity ELSE 0 END) mem_quantity,
					FLOOR(SUM(CASE ITEM.item_id WHEN 'DISK010' THEN PRIC.hourly_price ELSE 0 END)) disk_hourly_price,
					FLOOR(SUM(CASE ITEM.item_id WHEN 'DISK010' THEN PRIC.monthly_price ELSE 0 END)) disk_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'DISK010' THEN ITEM.quantity ELSE 0 END) disk_quantity,
					FLOOR(SUM(CASE ITEM.item_id WHEN 'SERVICE010' THEN PRIC.hourly_price ELSE 0 END)) service_hourly_price,
					FLOOR(SUM(CASE ITEM.item_id WHEN 'SERVICE010' THEN PRIC.monthly_price ELSE 0 END)) service_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'SERVICE010' THEN ITEM.quantity ELSE 0 END) service_quantity
		FROM	bill_product_catalog POLC,
			bill_policy_item POIT,
			bill_product ITEM,
			bill_product_catalog_item PRIC
		WHERE	POLC.apply_date = (
				SELECT	MAX(A.apply_date)
				FROM	bill_product_catalog A
				WHERE	A.apply_date <= #{applyDate}
				AND	A.del_flag = 'N'
			)
		AND	POLC.policy_seq = POIT.policy_seq
		AND	POIT.item_id = ITEM.item_id
		AND	ITEM.item_id IN ('CPU010', 'MEM010', 'DISK010','SERVICE010')
		AND	POIT.policy_seq = PRIC.policy_seq
		AND	POIT.item_id = PRIC.item_id
		AND	POLC.del_flag = 'N'
	]]>
  	</select>

  	<!--catalogue os 리스트 -->
    <select id="getCatalogueOslist" resultType="CustomReqCatalogueVO">
    <![CDATA[
		SELECT
			CATA.catalog_seq ,
			CAPR.product_seq,
			PROD.product_name,
			PROD.product_category,
			PRODOS.item_id,
			PRIC.item_name,
			FLOOR(PRIC.hourly_price) as hourly_price,
			FLOOR(PRIC.monthly_price) as monthly_price,
			OC.cloud_name,
			OC.cloud_type
		FROM
			bss_product_catalog CATA,
			bss_product_catalog_item CAPR,
			bss_product PROD,
			bss_product_os PRODOS,
			oss_cloud OC,
			(
			SELECT
				PRIC.policy_seq,
				PRIC.item_id,
				ITEM.item_name,
				PRIC.hourly_price,
				PRIC.monthly_price
			FROM
				bill_product_catalog POLC,
				bill_policy_item POIT,
				bill_product ITEM,
				bill_product_catalog_item PRIC
			WHERE
				POLC.apply_date = (SELECT MAX(A.apply_date) FROM bill_product_catalog A WHERE A.apply_date <= #{applyDate} AND A.del_flag = 'N')
				AND	POLC.policy_seq = POIT.policy_seq
				AND	POIT.item_id = ITEM.item_id
				AND	ITEM.item_category = 'ITEMCATE_OS'
				AND	POIT.policy_seq = PRIC.policy_seq
				AND	POIT.item_id = PRIC.item_id
				AND	POLC.del_flag = 'N'
			) PRIC
			WHERE
			CATA.apply_date = (SELECT MAX(A.apply_date) FROM bss_product_catalog A WHERE	A.apply_date <= #{applyDate} AND A.del_flag = 'N')
			AND	CATA.catalog_seq = CAPR.catalog_seq
			AND	CAPR.catalog_category = 'CATACATE_OS'
			AND	CAPR.product_seq = PROD.product_seq
			AND	PROD.product_seq = PRODOS.product_seq
	]]>
			<if test="vmImageType != '' or vmImageType != null ">
			AND	PRODOS.item_id = #{vmImageType}
			</if>
			<if test="cloudId != '' or cloudId != null ">
			AND PRODOS.cloud_id = #{cloudId}
			</if>
			AND	PRODOS.item_id = PRIC.item_id
			AND OC.cloud_id = PRODOS.cloud_id
			AND CAPR.del_flag = 'N'

  	</select>

  	<select id="getCatalogueFlavorList" resultType="OssFlavorVO">
  		SELECT
  			*
  		FROM
  			OSS_FLAVOR
  		WHERE
			cloud_id = #{cloudId}
		<if test="instanceType !='' and instanceType != null">
			AND instance_type = #{instanceType}
		</if>
		AND delete_flag = 'N'
		ORDER BY
			vcpus, ram_mb
  	</select>

  	<select id="getFlavorTypeList" resultType="OssFlavorVO">
  		SELECT
  			 A.flavor_type,
  			 B.code_name AS flavor_name,
  			 C.cloud_type AS cloud_type
  		FROM
  			OSS_FLAVOR A
  		LEFT JOIN
  			cmm_code B
  		ON A.flavor_type = B.code_value AND B.parent_code_id = 'FLAVOR_GROUP'

  		LEFT JOIN oss_cloud C
  		ON A.cloud_id = C.cloud_id
  		WHERE
			A.cloud_id = #{cloudId}
		GROUP BY
			A.flavor_type
		ORDER BY
			B.code_sort_num
		ASC
  	</select>


	<!--catalogue os 선택시 os 가격 -->
    <select id="getCatalogueOs" resultType="CustomReqCatalogueVO">
    <![CDATA[
		SELECT
			CATA.catalog_seq ,
			CAPR.product_seq,
			PROD.product_name,
			PROD.product_category,
			PRODOS.item_id,
			PRIC.item_name,
			FLOOR(PRIC.hourly_price) AS hourly_price,
			FLOOR(PRIC.monthly_price) AS monthly_price
		FROM	bss_product_catalog CATA,
			bss_product_catalog_item CAPR,
			bss_product PROD,
			bss_product_os PRODOS,
			(
				SELECT

					PRIC.policy_seq,
					PRIC.item_id,
					ITEM.item_name,
					PRIC.hourly_price,
					PRIC.monthly_price
				FROM	bill_product_catalog POLC,
					bill_policy_item POIT,
					bill_product ITEM,
					bill_product_catalog_item PRIC
				WHERE	POLC.apply_date = (
						SELECT	MAX(A.apply_date)
						FROM	bill_product_catalog A
						WHERE	A.apply_date <= #{applyDate}
						AND	A.del_flag = 'N'
					)
				AND	POLC.policy_seq = POIT.policy_seq
				AND	POIT.item_id = ITEM.item_id
				AND	ITEM.item_category = 'ITEMCATE_OS'
				AND	POIT.policy_seq = PRIC.policy_seq
				AND	POIT.item_id = PRIC.item_id
				AND	POLC.del_flag = 'N'
			) PRIC

		WHERE	CATA.apply_date = (
				SELECT	MAX(A.apply_date)
				FROM	bss_product_catalog A
				WHERE	A.apply_date <= #{applyDate}
				AND	A.del_flag = 'N'
			)
		AND 	CATA.catalog_seq = CAPR.catalog_seq
		AND	CAPR.catalog_category = 'CATACATE_OS'
		AND	CAPR.product_seq = PROD.product_seq
		AND	PROD.product_seq = PRODOS.product_seq
		AND PRODOS.item_id = PRIC.item_id
		AND PRODOS.product_seq = #{osProductSeq}
		AND CAPR.del_flag = 'N'
	]]>
  	</select>

  	<!-- 카테고리 주문시 bss_order_product_disk 입력 -->
    <update id="setOrderProductDisk" parameterType="CustomReqOrderVO" >
		INSERT INTO bss_order_product_disk
			(
				order_product_seq
				, on_demand_flag
				, apply_datetime
				, hourly_flag
				, project_id
				, disk_name
				, disk_type
				, disk_gb
				, before_disk_gb
				, description
				, disk_id
				, disk_catalog_seq
				, disk_product_seq
				, vm_uuid
				, vmdk_file
			)VALUES(
				#{orderProductSeq}
				, #{onDemandFlag}
				, #{applyDatetime}
				, #{hourlyFlag}
				, #{projectId}
				, #{diskName}
				, #{diskType}
				, #{diskGb}
				, #{beforeDiskGb}
				, #{description}
				, #{diskId}
				, #{diskCatalogSeq}
				, #{diskProductSeq}
				, #{vmUuid}
				, #{vmdkFile}
			)
  	</update>

    <!-- 카테고리 주문시 bss_order_product_loadbalancer 입력 -->
    <update id="setOrderProductLb" parameterType="CustomReqOrderVO" >
		INSERT INTO bss_order_product_loadbalancer
			(
				order_product_seq,
				on_demand_flag,
				apply_datetime,
				hourly_flag,
				project_id,
				default_network_id,
				loadbalancer_name,
				loadbalancer_ea,
				protocol,
				[method],
				monitor_type,
				loadbalancer_catalog_seq,
				loadbalancer_product_seq,
				description,
				loadbalancer_id,
				ip,
				port
			)
		VALUES
			(
				#{orderProductSeq},
				#{onDemandFlag},
				#{applyDatetime},
				#{hourlyFlag},
				#{projectId},
				#{defaultNetworkId},
				#{loadbalancerName},
				#{loadbalancerEa},
				#{protocol},
				#{method},
				#{monitorType},
				#{catalogSeq},
				#{loadbalancerProductSeq},
				#{description},
				#{loadbalancerId},
				#{ip},
				#{port}
			)
  	</update>

  	<!-- 카테고리 주문시 bss_order_product_loadbalancer 입력 -->
    <update id="setOrderProductSn" parameterType="CustomReqOrderVO" >
		INSERT INTO bss_order_product_snapshot
			(
				order_product_seq,
				on_demand_flag,
				apply_datetime,
				hourly_flag,
				project_id,
				description,
				snapshot_catalog_seq,
				snapshot_product_seq,
				snapshot_id,
				snapshot_name,
				vm_uuid,
				disk_id
			)
		VALUES
			(
				#{orderProductSeq},
				#{onDemandFlag},
				#{applyDatetime},
				#{hourlyFlag},
				#{projectId},
				#{description},
				#{catalogSeq},
				#{snapshotProductSeq},
				#{snapshotId},
				#{snapshotName},
				#{vmUuid},
				#{diskId}
			)
  	</update>

  	<!-- 카테고리 주문시 bss_order_product_app 입력 -->
    <update id="setOrderProductApp" parameterType="CustomReqOrderVO" >
		INSERT INTO bss_order_product_app
			(
				order_product_seq,
				on_demand_flag,
				apply_datetime,
				project_id,
				template_product_seq,
				template_catalog_seq,
				app_name,
				git_repository,
				git_reference,
				cpu_req,
				cpu_limit,
				mem_req,
				mem_limit,
				pod_cnt,
				volume,
				label,
				params,
				description,
				app_name_project,
				os_product_seq,
				image_id,
				app_alias,
				pvc_yn,
				env_type,
				deploys_name,
				cicd_project_id,
				branch_id,
				deploys_directory,
				domain_url,
				deployment_port,
				export_type,
				flavor_id,
				cicd_request_type,
				app_version,
				before_order_product_seq
			)
		VALUES
			(
				#{orderProductSeq},
				#{onDemandFlag},
				#{applyDatetime},
				#{projectId},
				#{productSeq},
				#{catalogSeq},
				#{appName},
				#{gitRepository},
				#{gitReference},
				#{cpuReq},
				#{cpuLimit},
				#{memReq},
				#{memLimit},
				#{podCnt},
				#{volume},
				#{label},
				#{params},
				#{description},
				#{appNameProject},
				#{osProductSeq},
				#{imageId},
				#{appAlias},
				#{pvcYn},
				#{envType},
				#{deploysName},
				#{cicdProjectId},
				#{branchId},
				#{deploysDirectory},
				#{domainUrl},
				#{deploymentPort},
				#{exportType},
				#{flavorId},
				#{cicdRequestType},
				#{appVersion},
				#{beforeOrderProductSeq}
			)
  	</update>

  	<!-- 개발환경 신청 쿼리 -->
    <update id="setOrderProductEnv" parameterType="CustomReqOrderVO">
		INSERT INTO
			bss_order_product_env (
				order_product_seq,
				env_name,
				env_alias,
				env_product_seq,
				env_catalog_seq,
				description,
				on_demand_flag,
				project_box_id,
				env_visibility_level,
				env_group_url,
				env_group_name
			)
		VALUES
			(
				#{orderProductSeq},
				#{envName},
				#{envAlias},
				#{productSeq},
				#{catalogSeq},
				#{description},
				#{onDemandFlag},
				#{projectBoxId},
				#{envVisibilityLevel},
				#{envGroupUrl},
				#{envGroupName}
			);
  	</update>

     	<!-- 카테고리 주문시 bss_order_product_publicip 입력 -->
    <update id="setOrderProductIp" parameterType="CustomReqOrderVO" >
		INSERT INTO bss_order_product_publicip
			(
				order_product_seq,
				on_demand_flag,
				apply_datetime,
				hourly_flag,
				project_id,
				vm_uuid,
				description,
				publicip_ea,
				publicip_catalog_seq,
				publicip_product_seq,
				publicip_id
			)
		VALUES
			(
				#{orderProductSeq},
				#{onDemandFlag},
				#{applyDatetime},
				#{hourlyFlag},
				#{projectId},
				#{vmUuid},
				#{description},
				1,
				#{catalogSeq},
				#{publicipProductSeq},
				#{publicipId}
			)
  	</update>

  	<!-- 카테고리 주문시 bss_order_product_nas 입력 -->
	    <update id="setOrderProductNas" parameterType="CustomReqOrderVO" >
		INSERT INTO bss_order_product_nas
			(
				order_product_seq
				, on_demand_flag
				, apply_datetime
				, hourly_flag
				, project_id
				, nas_name
				, nas_alias
				, nas_id
				, nas_file_system_path
				, nas_nfs_object_id

				, nas_gb
				, before_nas_gb
				, description
				, nas_catalog_seq
				, nas_product_seq
				, vm_name
				, work_user_id
				, default_network_id
				, default_network_name
				, default_network_alias
				, default_network_ip
				, az_name
			)VALUES(
				#{orderProductSeq}
				, #{onDemandFlag}
				, #{applyDatetime}
				, #{hourlyFlag}
				, #{projectId}
				, #{nasName}
				, #{nasAlias}
				, #{nasId}
				, #{nasFileSystemPath}
				, #{nasNfsObjectId}

				, #{nasGb}
				, #{beforeNasGb}
				, #{description}
				, #{nasCatalogSeq}
				, #{nasProductSeq}
				, #{vmName}
				, #{workUserId}
				, #{defaultNetworkId}
				, #{defaultNetworkName}
				, #{defaultNetworkAlias}
				, #{defaultNetworkIp}
				, #{azName}
			)
		</update>

	    <insert id="setOrderProductNasVm" parameterType="CustomReqOrderVO" >

				INSERT INTO bss_order_product_nas_vm (
					order_product_seq,
					vm_uuid,
					reg_datetime,
					reg_user_id
			    )
			    VALUES (
					#{orderProductSeq},
					#{vmUuid},
					#{regDatetime},
					#{regUserId}
				 )

	  	</insert>
  	<!-- 카테고리 주문시 bss_order_product_mca 입력 -->
  	<!--
    <update id="setOrderProductServiceMca" parameterType="CustomReqOrderVO" >
		INSERT INTO bss_order_product_mca
			(
				order_product_seq,
				on_demand_flag,
				apply_datetime,
				hourly_flag,
				project_id,
				description,
				mca_ea,
				mca_catalog_seq,
				mca_product_seq,
				mca_id
			)
		VALUES
			(
				#{orderProductSeq},
				#{onDemandFlag},
				#{applyDatetime},
				#{hourlyFlag},
				#{projectId},
				#{description},
				1,
				#{catalogSeq},
				#{productSeq},
				#{mcaId}
			)
  	</update>
	-->
  	<!-- 카테고리 주문시 bss_order_product_scm 입력 -->
  	<!--
    <update id="setOrderProductServiceScm" parameterType="CustomReqOrderVO" >
		INSERT INTO bss_order_product_scm
			(
				order_product_seq,
				on_demand_flag,
				apply_datetime,
				hourly_flag,
				project_id,
				description,
				scm_ea,
				scm_catalog_seq,
				scm_product_seq,
				scm_id
			)
		VALUES
			(
				#{orderProductSeq},
				#{onDemandFlag},
				#{applyDatetime},
				#{hourlyFlag},
				#{projectId},
				#{description},
				1,
				#{catalogSeq},
				#{productSeq},
				#{scmId}
			)
  	</update>
	-->

  	<!-- 카테고리 주문시 bss_order_product_backup 입력 -->
  	<!--
    <update id="setOrderProductServiceBak" parameterType="CustomReqOrderVO" >
		INSERT INTO bss_order_product_backup
			(
				order_product_seq,
				on_demand_flag,
				apply_datetime,
				hourly_flag,
				project_id,
				description,
				backup_gb,
				backup_catalog_seq,
				backup_product_seq	,
				backup_id
			)
		VALUES
			(
				#{orderProductSeq},
				#{onDemandFlag},
				#{applyDatetime},
				#{hourlyFlag},
				#{projectId},
				#{description},
				1,
				#{catalogSeq},
				#{productSeq},
				#{backupId}
			)
	</update>
	-->


		<!-- 카테고리 주문시 bss_order_product_service 입력 -->
    <update id="setOrderProductServiceService" parameterType="CustomReqOrderVO" >
		INSERT INTO bss_order_product_service
			(
				order_product_seq,
				on_demand_flag,
				apply_datetime,
				hourly_flag,
				project_id,
				description,
				service_ea,
				service_catalog_seq,
				service_product_seq	,
				service_id,
				service_type,
				service_name,
				vm_uuid,
				app_uuid,
				hpa_division,
				hpa_max,
				hpa_continue,
				hpa_min_pod,
				hpa_max_pod,
				hpa_incre_pod,
				env_type
			)
		VALUES
			(
				#{orderProductSeq},
				#{onDemandFlag},
				#{applyDatetime},
				#{hourlyFlag},
				#{projectId},
				#{description},
				1,
				#{catalogSeq},
				#{productSeq},
				#{serviceId},
				#{serviceType},
				#{productName},
				#{vmUuid},
				#{appUuid},
				#{hpaDivision},
				#{hpaMax},
				#{hpaContinue},
				#{hpaMinPod},
				#{hpaMaxPod},
				#{hpaIncrePod},
				#{envType}
			)
	</update>

  	<update id="setOrderProductVm" parameterType="CustomReqOrderVO" >
		INSERT INTO bss_order_product_vm
			(
				order_product_seq,
				on_demand_flag,
				apply_datetime,
				project_id,
				backup_network_flag,
				default_network_id,
				default_network_name,
				default_network_alias,
				req_message,
				description,
				hostname,
				hostname_alias,
				flavor_id,
				vcpus,
				mem_gb,
				volume_type,
				image_id,
				disk_gb,
				az_name,
				vm_catalog_seq,
				vm_product_seq,
				os_product_seq,
				os_product_name,
				hourly_flag,
				vm_uuid,
				before_flavor_id,
				before_vcpus,
				before_mem_gb,
				datastore_id,
				instance_type
			)
		VALUES
			(
				#{orderProductSeq},
				#{onDemandFlag},
				#{applyDatetime},
				#{projectId},
				#{backupNetworkFlag},
				#{defaultNetworkId},
				#{defaultNetworkName},
				#{defaultNetworkAlias},
				#{reqMessage},
				#{description},
				#{hostname},
				#{hostnameAlias},
				#{flavorId},
				#{vcpus},
				#{memGb},
				#{volumeType},
				#{imageId},
				#{diskGb},
				#{azName},
				#{catalogSeq},
				#{productSeq},
				#{osProductSeq},
				#{osProductName},
				#{hourlyFlag},
				#{vmUuid},
				#{beforeFlavorId},
				#{beforeVcpus},
				#{beforeMemGb},
				#{datastoreId},
				#{instanceType}
			)
  	</update>

  	<update id="setOrderDirectProductVm" parameterType="CustomReqOrderVO" >
		INSERT INTO bss_order_product_vm
			(
				order_product_seq,
				on_demand_flag,
				apply_datetime,
				project_id,
				backup_network_flag,
				default_network_id,
				default_network_name,
				default_network_alias,
				default_network_ip,
				backup_network_ip,
				req_message,
				description,
				hostname,
				hostname_alias,
				flavor_id,
				vcpus,
				mem_gb,
				volume_type,
				image_id,
				disk_gb,
				az_name,
				vm_catalog_seq,
				vm_product_seq,
				os_product_seq,
				hourly_flag,
				vm_uuid,
				before_flavor_id,
				before_vcpus,
				before_mem_gb,
				datastore_id
			)
		VALUES
			(
				#{orderProductSeq},
				#{onDemandFlag},
				#{applyDatetime},
				#{projectId},
				#{backupNetworkFlag},
				#{defaultNetworkId},
				#{defaultNetworkName},
				#{defaultNetworkAlias},
				#{defaultNetworkIp},
				#{backupNetworkIp},
				#{reqMessage},
				#{description},
				#{hostnameAlias},
				#{hostnameAlias},
				#{flavorId},
				#{vcpus},
				#{memGb},
				#{volumeType},
				#{imageId},
				#{diskGb},
				#{azName},
				#{catalogSeq},
				#{productSeq},
				#{osProductSeq},
				#{hourlyFlag},
				#{vmUuid},
				#{beforeFlavorId},
				#{beforeVcpus},
				#{beforeMemGb},
				#{datastoreId}
			)
  	</update>

	<!-- 카테고리 주문시 bss_order_product 입력 -->
    <update id="setOrderProduct" parameterType="CustomReqOrderVO" >
		INSERT INTO bss_order_product
			(
				order_product_seq,
				order_no,
				request_type,
				product_category,
				order_summary,
				hourly_flag,
				amount,
				cloud_id
			)
		VALUES
			(
				#{orderProductSeq},
				#{orderNo},
				#{requestType},
				#{productCategory},
				#{orderSummary},
				#{hourlyFlag},
				#{amount},
				#{cloudId}
			)
  	</update>

  	<!-- 카테고리 주문시 bss_order 입력 -->
    <update id="setOrder" parameterType="CustomReqOrderVO" >
		INSERT INTO bss_order
			(
				order_no,
				order_user_id,
				order_name,
				description,
				apprv_state,
				order_datetime
			)
		VALUES
			(
				#{orderNo},
				#{orderUserId},
				#{orderName},
				#{description},
				'APPRV_PROCESSING',
				NOW()
			)
  	</update>

  	<!-- 카테고리 주문시 bss_order 입력 -->
    <update id="setOrderDirect" parameterType="CustomReqOrderVO" >
		INSERT INTO bss_order
			(
				order_no,
				order_user_id,
				order_name,
				description,
				apprv_state,
				order_datetime
			)
		VALUES
			(
				#{orderNo},
				#{orderUserId},
				#{orderName},
				#{description},
				'APPRV_COMPLETED',
				NOW()
			)
  	</update>

  	<!-- 카테고리 주문시 bss_order_product_vm_network 입력 -->
    <update id="setOrderProductVmNetwork" parameterType="CustomReqOrderVO" >
		INSERT INTO bss_order_product_vm_network
			(
				order_product_seq,
				shared_network,
				shared_network_name,
				selected_flag
			)
		VALUES
			(
				#{orderProductSeq},
				#{sharedNetwork},
				#{sharedNetworkName},
				#{selectedFlag}
			)
  	</update>

   	<!-- 카테고리 주문시 bss_order_product_loadbalancer_vm 입력 -->
    <update id="setOrderProductLbVm" parameterType="CustomReqOrderVO" >
		INSERT INTO bss_order_product_loadbalancer_vm
			(
				order_product_seq,
				vm_uuid
			)
		VALUES
			(
				#{orderProductSeq},
				#{vmUuid}
			)
  	</update>

  	<!-- 승인모델 PM,회원사 단계  리스트 -->
    <select id="getApprovalModelSteplist" resultType="CustomReqCustomerVO">
		SELECT
			step_id,
			model_id,
			step_name,
			step_level,
			left_step_id,
			right_step_id
		FROM
			approval_model_step
		where
			model_id=(SELECT model_id FROM sr_approval_flow WHERE flow_id='AFW0030')
  	</select>

  	<!-- 승인모델 관리자 단계  리스트 -->
    <select id="getApprovalModelSteplist2" resultType="CustomReqCustomerVO">
		SELECT
			step_id,
			model_id,
			step_name,
			step_level,
			left_step_id,
			right_step_id
		FROM
			approval_model_step
		where
			model_id=(SELECT model_id FROM sr_approval_flow WHERE flow_id='AFW0040')
  	</select>

  	<!-- 승인모델 프로젝트 결재자 스탭 리스트 -->
    <select id="getApprovalModelSteplistProject" resultType="CustomReqCustomerVO">
		SELECT
			step_id,
			model_id,
			step_name,
			step_level,
			left_step_id,
			right_step_id
		FROM
			approval_model_step
		where
			model_id=(SELECT model_id FROM sr_approval_flow WHERE flow_id='AFW0040')
  	</select>


  	<!-- 3차 4차 5차 승인자 -->
    <select id="getApprovalUserList" resultType="CustomReqCustomerVO">
		SELECT MAX(user_id) AS user_id FROM approval_model_member WHERE step_id = 'WF1000C0'

		UNION ALL

		SELECT MAX(user_id) AS user_id FROM approval_model_member WHERE step_id = 'WF1000D0'

		UNION ALL

		SELECT MAX(user_id) AS user_id FROM approval_model_member WHERE step_id = 'WF1000E0'
  	</select>


  	  	<!-- 승인모델 단계 구성원 리스트 -->
    <select id="getApprovalModelMemberlist" resultType="CustomReqCustomerVO">
		SELECT
			a.step_id,
			a.user_id,
			a.apprv_auth_flag,
			a.mail_recv_flag,
			a.sms_recv_flag,
			a.push_recv_flag
		FROM
			approval_model_member 	a , approval_model_step b
		WHERE a.step_id=b.step_id
		AND b.model_id=(SELECT model_id FROM sr_approval_flow WHERE flow_id='AFW0030')
  	</select>

  	<!-- 승인모델 단계 관리자 구성원 리스트 -->
    <select id="getApprovalModelMemberlist2" resultType="CustomReqCustomerVO">
		SELECT
			a.step_id,
			a.user_id,
			a.apprv_auth_flag,
			a.mail_recv_flag,
			a.sms_recv_flag,
			a.push_recv_flag,
			b.step_level,
			c.user_name,
			c.user_mail
		FROM
			approval_model_member 	a , approval_model_step b, cmm_user c
		WHERE a.step_id=b.step_id
		AND c.user_id=a.user_id
		AND c.del_flag = 'N'
		AND b.model_id=(SELECT model_id FROM sr_approval_flow WHERE flow_id='AFW0040')
  	</select>

  	<!-- 승인모델 단계 프로젝트 결재자 리스트 -->
    <select id="getApprovalModelMemberlistProject" resultType="CustomReqCustomerVO">
		SELECT
			a.step_id,
			a.user_id,
			a.apprv_auth_flag,
			a.mail_recv_flag,
			a.sms_recv_flag,
			a.push_recv_flag,
			b.step_level,
			c.user_name,
			c.user_mail
		FROM
			approval_model_member 	a , approval_model_step b, cmm_user c
		WHERE a.step_id=b.step_id
			AND c.user_id=a.user_id
			-- AND a.step_id IN ('WF3000C0','WF3000D0','WF3000E0') /*상품승인과 프로젝트 결재라인이 다른게 아니다 */
			AND a.step_id IN ('WF1000C0','WF1000D0','WF1000E0')
			AND c.del_flag = 'N'
			-- AND b.model_id=(SELECT model_id FROM sr_approval_flow WHERE flow_id='AFW0050') /*상품승인과 프로젝트 결재라인이 다른게 아니다 */
			AND b.model_id=(SELECT model_id FROM sr_approval_flow WHERE flow_id='AFW0040')
  	</select>

  		<!--  프로젝트 결재자 리스트 -->
    <select id="getApproveModelMemberlistProject" resultType="CustomReqCustomerVO">
		SELECT
			a.step_id,
			a.user_id,
			a.apprv_auth_flag,
			a.mail_recv_flag,
			a.sms_recv_flag,
			a.push_recv_flag,
			b.step_level,
			c.user_name,
			c.user_mail
		FROM
			approval_model_member 	a , approval_model_step b, cmm_user c
		WHERE a.step_id=b.step_id
		AND c.user_id=a.user_id
		AND c.del_flag = 'N'
		AND b.model_id=(SELECT model_id FROM sr_approval_flow WHERE flow_id='AFW0050')
		AND 	a.user_id = #{userId}
  	</select>

  	<select id="getDataStoreList" resultType="CustomReqDataStoreVO">
		SELECT
			*
		FROM
			oss_datastore
		where
			cloud_id = #{cloudId}
  	</select>


  	<!-- vm주문후  sr_approval_step(서비스 요청 승인단계입력)-->
    <update id="setSrApprovalStepinsert" parameterType="CustomReqCustomerVO" >
		INSERT INTO sr_approval_step
				(
					step_id,
					request_seq,
					flow_id,
					step_name,
					step_level,
					left_step_id,
					right_step_id,
					apprv_state
				)
		VALUES
				(
					#{stepId},
					#{requestSeq},
					'AFW0030',   <!--고정(회원사 승인 신청)-->
					#{stepName},
					#{stepLevel},
					#{leftStepId},
					#{rightStepId},
					#{apprvState}  <!--고정(승인처리중)-->
				)
  	</update>

  	<!-- 사용자 승인 완료후  sr_approval_step(서비스 요청 승인단계입력)-->
    <update id="setSrApprovalStepinsert2" parameterType="CustomReqCustomerVO" >
		INSERT INTO sr_approval_step
				(
					step_id,
					request_seq,
					flow_id,
					step_name,
					step_level,
					left_step_id,
					right_step_id,
					apprv_state,
					<if test="apprvUserId != '' and apprvUserId != null">
					apprv_user_id,
					apprv_user_name,
					</if>
					apprv_schedule_user_id
				)
		VALUES
				(
					#{stepId},
					#{requestSeq},
					'AFW0040',   <!--고정(회원사 승인 신청)-->
					#{stepName},
					#{stepLevel},
					#{leftStepId},
					#{rightStepId},
					#{apprvState},  <!--고정(승인처리중)-->
					<if test="apprvUserId != '' and apprvUserId != null">
					#{apprvUserId},
					#{apprvUserName},
					</if>
					#{apprvScheduleUserId}  <!--고정(승인처리중)-->
				)
  	</update>

  	<delete id="deleteApprovalStep" parameterType="CustomReqProjectVO">
  		DELETE FROM
  			sr_approval_step
  		WHERE
  			request_seq = #{reqProjectSeq}

  	</delete>

  	<!-- 승인단계 결재라인 지정시 다음결재자 정보 업데이트 -->
    <update id="updateSrApprovalStepinsert" parameterType="CustomReqCustomerVO" >
		UPDATE sr_approval_step
		SET
			apprv_schedule_user_id = #{apprvScheduleUserId}
			<if test="apprvUserId != '' and apprvUserId != null">
			, apprv_user_id = #{apprvUserId}
			, apprv_user_name = #{apprvUserName}
			</if>
			, apprv_state = #{apprvState}
		WHERE
			request_seq = #{requestSeq}
			AND step_level = #{stepLevel}
  	</update>

  	<!-- 프로젝트 신청후  sr_approval_step(프로젝트 요청 승인단계입력)-->
    <update id="setSrApprovalStepinsertProject" parameterType="CustomReqCustomerVO" >
		INSERT INTO sr_approval_step
				(
					step_id,
					request_seq,
					flow_id,
					step_name,
					step_level,
					left_step_id,
					right_step_id,
					apprv_state
				)
		VALUES
				(
					#{stepId},
					#{requestSeq},
					'AFW0050',   <!--고정(회원사 승인 신청)-->
					#{stepName},
					#{stepLevel},
					#{leftStepId},
					#{rightStepId},
					#{apprvState}  <!--고정(승인처리중)-->
				)
  	</update>


  	<!-- 	프로젝트 1차 결재자 2차 결재자 선택되어진 사용자로 새팅 -->
    <update id="updateProjectApprovalMemberInsert" parameterType="CustomReqCustomerVO" >

		UPDATE sr_approval_step SET
         apprv_user_id = #{userId}
         WHERE step_id = #{stepId}
             AND request_seq =  #{requestSeq}
  	</update>



  	<!-- vm주문후    sr_approval_member(서비스 요청 승인 구성원 입력)-->
    <update id="setSrApprovalMemberinsert" parameterType="CustomReqCustomerVO" >
		INSERT INTO sr_approval_member
			(
				step_id,
				request_seq,
				flow_id,
				user_id,
				apprv_auth_flag,
				mail_recv_flag,
				sms_recv_flag,
				push_recv_flag
			)
		VALUES
			(
				#{stepId},
				#{requestSeq},
				'AFW0030',   <!--고정(회원사 승인 신청)-->
				#{userId},
				#{apprvAuthFlag},
				#{mailRecvFlag},
				#{smsRecvFlag},
				#{pushRecvFlag}
			)
  	</update>

  	 <select id="projectStepCheck" resultType="Int" parameterType="CustomReqCustomerVO">
    	SELECT
    		COUNT(*)
		FROM
			sr_approval_step
		WHERE request_seq = #{requestSeq}
		    AND step_id = #{stepId}
    </select>

  	 <select id="projectMemberCheck" resultType="Int" parameterType="CustomReqCustomerVO">
    	SELECT
    		COUNT(*)
		FROM
			sr_approval_member
		WHERE request_seq = #{requestSeq}
		    AND step_id = #{stepId}
   		    AND user_id = #{userId}
		    AND 	flow_id =	'AFW0040'   <!--고정(프로젝트 승인 신청)-->
    </select>


  	<!-- 사용자 승인 완료후   sr_approval_member(서비스 요청 승인 구성원 입력)-->
    <update id="setSrApprovalMemberinsert2" parameterType="CustomReqCustomerVO" >
		INSERT INTO sr_approval_member
			(
				step_id,
				request_seq,
				flow_id,
				user_id,
				apprv_auth_flag,
				mail_recv_flag,
				sms_recv_flag,
				push_recv_flag
			)
		VALUES
			(
				#{stepId},
				#{requestSeq},
				'AFW0040',   <!--고정(회원사 승인 신청)-->
				#{userId},
				#{apprvAuthFlag},
				#{mailRecvFlag},
				#{smsRecvFlag},
				#{pushRecvFlag}
			)
  	</update>

  	<!--프로젝트 회원사 아이디와 pm아이디-->
    <select id="getProjectId" resultType="CustomReqCatalogueVO">
		SELECT
			project_id,
			customer_id,
			project_manager_id

		FROM
			oss_project
		where
			delete_flag <![CDATA[<>]]> 'Y'
		AND
			project_id = #{projectId}
  	</select>

  	<!--카탈로그 vm 장바구니 bss_basket 입력-->
	<update id="setBasket" parameterType="CustomReqBasketVO" >
		INSERT INTO bss_basket
			(
				basket_seq,
				user_id,
				request_type,
				product_category,
				basket_summary,
				hourly_flag,
				amount,
				cloud_id
			)
		VALUES
			(
				#{basketSeq},
				#{userId},
				#{requestType},
				#{productCategory},
				#{basketSummary},
				#{hourlyFlag},
				#{amount},
				#{cloudId}
			)
  	</update>

  	<!--카탈로그 vm 장바구니 bss_basket_vm 입력-->
	<update id="setBasketVm" parameterType="CustomReqBasketVO" >
		INSERT INTO bss_basket_vm
			(
				basket_seq,
				on_demand_flag,
				apply_datetime,
				project_id,
				default_network_id,
				default_network_name,
				default_network_alias,
				backup_network_flag,
				description,
				hostname,
				hostname_alias,
				flavor_id,
				vcpus,
				mem_gb,
				disk_gb,
				volume_type,
				az_name,
				req_message,
				vm_catalog_seq,
				vm_product_seq,
				os_product_seq,
				hourly_flag,
				datastore_id,
				image_id,
				instance_type
			)
		VALUES
			(
				#{basketSeq},
				#{onDemandFlag},
				#{applyDatetime},
				#{projectId},
				#{defaultNetworkId},
				#{defaultNetworkName},
				#{defaultNetworkAlias},
				#{backupNetworkFlag},
				#{description},
				#{hostname},
				#{hostnameAlias},
				#{flavorId},
				#{vcpus},
				#{memGb},
				#{diskGb},
				#{volumeType},
				#{azName},
				#{reqMessage},
				#{catalogSeq},
				#{vmProductSeq},
				#{osProductSeq},
				#{hourlyFlag},
				#{datastoreId},
				#{imageId},
				#{instanceType}
			)
  	</update>

  	<!--카탈로그 블록 디스크 장바구니 bss_basket_disk 입력-->
	<update id="setBasketDisk" parameterType="CustomReqBasketVO" >
		INSERT INTO bss_basket_disk
			(
				basket_seq,
				on_demand_flag,
				apply_datetime,
				project_id,
				hourly_flag,
				vm_uuid,
				disk_name,
				disk_type,
				disk_gb,
				description,
				disk_catalog_seq,
				disk_product_seq,
				vmdk_file
			)
		VALUES
			(
				#{basketSeq},
				#{onDemandFlag},
				#{applyDatetime},
				#{projectId},
				#{hourlyFlag},
				#{vmUuid},
				#{diskName},
				#{diskType},
				#{diskGb},
				#{description},
				#{catalogSeq},
				#{diskProductSeq},
				#{vmdkFile}

			)
  	</update>

  	<!--카탈로그 블록 디스크 장바구니 bss_basket_nas 입력-->
	<update id="setBasketNas" parameterType="CustomReqBasketVO" >
		INSERT INTO bss_basket_nas
			(
				basket_seq,
				on_demand_flag,
				apply_datetime,
				hourly_flag,
				project_id,
				nas_name,
				nas_alias,
				nas_nfs_object_id,
				nas_file_system_path,
				nas_gb,
				description,
				nas_catalog_seq,
				nas_product_seq,
				nas_id,
				before_nas_gb,
				vm_name
			)
		VALUES
			(
				#{basketSeq},
				#{onDemandFlag},
				#{applyDatetime},
				#{hourlyFlag},
				#{projectId},
				#{nasName},
			 	#{nasAlias},
			 	#{nasNfsObjectId},
			 	#{nasFileSystemPath},
				#{nasGb},
				#{description},
				#{catalogSeq},
				#{nasProductSeq},
				#{nasId},
				#{beforeNasGb},
				#{vmName}
			)
  	</update>

     <update id="setBasketNasVm" parameterType="CustomReqBasketVO">
		INSERT INTO bss_basket_nas_vm
			(
				basket_seq,
				vm_uuid
			)
		VALUES
			(
				#{basketSeq},
				#{vmUuid}
			)
	</update>

  	<!--카탈로그 블록 디스크 장바구니 bss_basket_publicip 입력-->
	<update id="setBasketIp" parameterType="CustomReqBasketVO" >
		INSERT INTO bss_basket_publicip
			(
				basket_seq,
				on_demand_flag,
				apply_datetime,
				hourly_flag,
				description,
				vm_uuid,
				project_id,
				publicip_catalog_seq,
				publicip_product_seq,
				publicip_id
			)
		VALUES
			(
				#{basketSeq},
				#{onDemandFlag},
				#{applyDatetime},
				#{hourlyFlag},
				#{description},
				#{vmUuid},
				#{projectId},
				#{catalogSeq},
				#{publicipProductSeq},
				#{publicipId}
			)
  	</update>

  	<!--카탈로그 블록 디스크 장바구니 bss_basket_mca 입력-->
<!--
	<update id="setBasketMca" parameterType="CustomReqBasketVO" >
		INSERT INTO bss_basket_mca
			(
				basket_seq,
				on_demand_flag,
				apply_datetime,
				hourly_flag,
				description,
				project_id,
				mca_catalog_seq,
				mca_product_seq,
				mca_id
			)
		VALUES
			(
				#{basketSeq},
				#{onDemandFlag},
				#{applyDatetime},
				#{hourlyFlag},
				#{description},
				#{projectId},
				#{catalogSeq},
				#{productSeq},
				#{mcaId}
			)
  	</update>
-->
  	<!--카탈로그 블록 디스크 장바구니 bss_basket_backup 입력-->
<!--
	<update id="setBasketBak" parameterType="CustomReqBasketVO" >
		INSERT INTO bss_basket_backup
			(
				basket_seq,
				on_demand_flag,
				apply_datetime,
				hourly_flag,
				description,
				project_id,
				backup_catalog_seq,
				backup_product_seq,
				backup_id
			)
		VALUES
			(
				#{basketSeq},
				#{onDemandFlag},
				#{applyDatetime},
				#{hourlyFlag},
				#{description},
				#{projectId},
				#{catalogSeq},
				#{productSeq},
				#{backupId}
			)
  	</update>
-->
  	<!--카탈로그 서비스 장바구니 bss_basket_service 입력-->
	<update id="setBasketService" parameterType="CustomReqBasketVO" >
		INSERT INTO bss_basket_service
			(
				basket_seq,
				on_demand_flag,
				apply_datetime,
				hourly_flag,
				description,
				project_id,
				service_catalog_seq,
				service_product_seq,
				service_id,
				service_type,
				service_name,
				vm_uuid
			)
		VALUES
			(
				#{basketSeq},
				#{onDemandFlag},
				#{applyDatetime},
				#{hourlyFlag},
				#{description},
				#{projectId},
				#{catalogSeq},
				#{productSeq},
				#{backupId},
				#{serviceType},
				#{serviceName},
				#{vmUuid}
			)
  	</update>


  	<!--카탈로그 블록 디스크 장바구니 bss_basket_security 입력-->
  	<!--
	<update id="setBasketScr" parameterType="CustomReqBasketVO" >
		INSERT INTO bss_basket_security
			(
				basket_seq,
				on_demand_flag,
				apply_datetime,
				hourly_flag,
				description,
				project_id,
				security_catalog_seq,
				security_product_seq,
				security_id
			)
		VALUES
			(
				#{basketSeq},
				#{onDemandFlag},
				#{applyDatetime},
				#{hourlyFlag},
				#{description},
				#{projectId},
				#{catalogSeq},
				#{productSeq},
				#{securityId}
			)
  	</update>
	-->

  	<!--카탈로그 블록 디스크 장바구니 bss_basket_scm 입력-->
  	<!--
	<update id="setBasketScm" parameterType="CustomReqBasketVO" >
		INSERT INTO bss_basket_scm
			(
				basket_seq,
				on_demand_flag,
				apply_datetime,
				hourly_flag,
				description,
				project_id,
				scm_catalog_seq,
				scm_product_seq,
				scm_id
			)
		VALUES
			(
				#{basketSeq},
				#{onDemandFlag},
				#{applyDatetime},
				#{hourlyFlag},
				#{description},
				#{projectId},
				#{catalogSeq},
				#{productSeq},
				#{scmId}
			)
  	</update>
	-->
   	<!--카탈로그 로드 밸런서 장바구니 bss_basket_ 입력-->
	<update id="setBasketLoad" parameterType="CustomReqBasketVO" >
		INSERT INTO bss_basket_loadbalancer
			(
				basket_seq,
				on_demand_flag,
				apply_datetime,
				hourly_flag,
				description,
				project_id,
				loadbalancer_product_seq,
				default_network_id,
				loadbalancer_name,
				loadbalancer_ea,
				method,
				protocol,
				loadbalancer_catalog_seq,
				monitor_type,
				loadbalancer_id
			)
		VALUES
			(
				#{basketSeq},
				#{onDemandFlag},
				#{applyDatetime},
				#{hourlyFlag},
				#{description},
				#{projectId},
				#{loadbalancerProductSeq},
				#{defaultNetworkId},
				#{loadbalancerName},
				#{loadbalancerEa},
				#{method},
				#{protocol},
				#{catalogSeq},
				#{monitorType},
				#{loadbalancerId}
			)
  	</update>

  	<!--카탈로그 로드 밸런서 vm 장바구니 bss_basket_ 입력-->
	<update id="setBasketLoadVm" parameterType="CustomReqBasketVO" >
		INSERT INTO bss_basket_loadbalancer_vm
			(
				vm_uuid,
				basket_seq
			)
		VALUES
			(
				#{vmUuid},
				#{basketSeq}
			)
  	</update>

  	<!-- 장바구니 bss_basket_vm_network 입력 -->
    <update id="setBasketVmNetwork" parameterType="CustomReqOrderVO" >
		INSERT INTO bss_basket_vm_network
			(
				basket_seq,
				shared_network,
				shared_network_name,
				selected_flag
			)
		VALUES
			(
				#{basketSeq},
				#{sharedNetwork},
				#{sharedNetworkName},
				#{selectedFlag}
			)
  	</update>

  	<!--장바구니 서비스 밸런서 리스트
  	<select id="getBasketSvlistvo" resultType="CustomReqBasketVO">
    <![CDATA[
		SELECT
			BSK.basket_seq,			/* 장바구니 SEQ*/
			BSK.user_id,			/* 사용자 ID */
			BSK.request_type,		/* 요청 유형  코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			BSK.product_category,		/* 상품 카테고리 코드 */
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			BSK.basket_summary,		/* 주문요약*/
			BSK.hourly_flag,		/* 시간단위 과금여부*/
			BSK.amount,			/* 주문 금액*/
			BSKSVR.on_demand_flag,		/* 즉시희망 여부*/
			BSKSVR.apply_datetime,		/* 서비스 희망 일시 */
			BSKSVR.hourly_flag,		/* 시간단위 과금여부 */
			BSKSVR.project_id,		/* 프로젝트 ID */
			PJ.project_name,		/* 프로젝트 영어  */
			PJ.project_alias,		/* 프로젝트 한글   */
			BSKSVR.description,		/* 비고 */
			BSKSVR.service_ea,	/* 서비스 수량 */
			BSKSVR.service_product_seq,	/* 서비스 상품 SEQ */
			PRD.product_name AS service_product_name /* 서비스 상품 이름 */

		FROM bss_basket BSK

		LEFT OUTER JOIN bss_basket_service BSKSVR	/* 서비스 */
		ON BSK.basket_seq = BSKSVR.basket_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =BSKSVR.project_id

		LEFT OUTER JOIN bss_product PRD		/* 서비스   상품 */
		ON PRD.product_seq= BSKSVR.service_product_seq

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = BSK.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = BSK.product_category

		WHERE BSK.user_id = #{userId}
		AND BSK.product_category ='PRODCATE_SERVICE'

	]]>
  	</select>
-->
  	<!--장바구니 로드 밸런서 리스트-->
  	<select id="getBasketLblistvo" resultType="CustomReqBasketVO">
    <![CDATA[
		SELECT
			BSK.basket_seq,			/* 장바구니 SEQ*/
			BSK.user_id,			/* 사용자 ID */
			BSK.request_type,		/* 요청 유형  코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			BSK.product_category,		/* 상품 카테고리 코드 */
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			BSK.basket_summary,		/* 주문요약*/
			BSK.hourly_flag,		/* 시간단위 과금여부*/
			BSK.amount,			/* 주문 금액*/
			BSKLB.on_demand_flag,		/* 즉시희망 여부*/
			BSKLB.apply_datetime,		/* 서비스 희망 일시 */
			BSKLB.hourly_flag,		/* 시간단위 과금여부 */
			BSKLB.project_id,		/* 프로젝트 ID */
			PJ.project_name,		/* 프로젝트 영어  */
			PJ.project_alias,		/* 프로젝트 한글   */
			BSKLB.description,		/* 비고 */
			file_id AS image_name,		/* 이미지 이름 */
			BSKLB.loadbalancer_product_seq,	/* 로드밸런서  상품 SEQ */
			PRD.product_name AS loadbalancer_product_name,	 /* 로드밸런서  상품 이름 */
			BSKLB.loadbalancer_name ,	/* 로드밸런서 이름 */
			BSKLB.loadbalancer_ea, 		/* 로드밸런서 수량 */
			BSKLB.protocol,			/* PROTOCLO */
			PRO.code_name	AS protocol_name, /* PROTOCLO 이름*/
			BSKLB.method,			/* METHOD */
			MET.code_name 	AS method_name, /* METHOD 이름*/
			BSKLB.monitor_type,		/* MORITOR TYPE */
			MORTY.code_name AS 		monitor_type_name, /* MORITOR TYPE 이름*/
			NT.network_alias,
			(
				SELECT GROUP_CONCAT(LBVM.hostname SEPARATOR '<br>') FROM
				(
					SELECT BBLBVM.basket_seq, BBLBVM.vm_uuid, IFNULL(VM.hostname_alias, '-') AS hostname
					FROM bss_basket_loadbalancer_vm BBLBVM
					LEFT OUTER JOIN oss_vm VM
					ON BBLBVM.vm_uuid = VM.vm_uuid
				) LBVM
				WHERE LBVM.basket_seq = BSKLB.basket_seq GROUP BY LBVM.basket_seq

			) AS loadbalancer_vm /* 로드밸런서 선택한 VM */

		FROM bss_basket BSK

		LEFT OUTER JOIN bss_basket_loadbalancer BSKLB 	/* 로드밸런스 */
		ON BSK.basket_seq = BSKLB.basket_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =BSKLB.project_id

		LEFT OUTER JOIN bss_product PRD		/* 로드밸런서  상품 */
		ON PRD.product_seq= BSKLB.loadbalancer_product_seq

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = BSK.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = BSK.product_category

		LEFT OUTER JOIN cmm_code PRO		/* PROTOCLO */
		ON PRO.code_key_id ='PROTOCOL'
		AND PRO.code_id = BSKLB.protocol

		LEFT OUTER JOIN cmm_code MET		/* METHOD */
		ON MET.code_key_id ='METHOD'
		AND MET.code_id = BSKLB.method

		LEFT OUTER JOIN cmm_code MORTY		/* MORITOR TYPE */
		ON MORTY.code_key_id ='MONITOR_TYPE'
		AND MORTY.code_id = BSKLB.monitor_type

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = BSKLB.loadbalancer_catalog_seq
		AND CF.program_seq = BSKLB.loadbalancer_product_seq

		LEFT OUTER JOIN oss_network NT		/* 네트워크 */
		ON NT.network_id = BSKLB.default_network_id

		WHERE BSK.user_id = #{userId}
		AND BSK.product_category ='PRODCATE_LOADBALANCER'

	]]>
  	</select>

  	<!--장바구니 공인IP 리스트-->
  	<select id="getBasketIplistvo" resultType="CustomReqBasketVO">
    <![CDATA[
		SELECT
			BSK.basket_seq,			/* 장바구니 SEQ*/
			BSK.user_id,			/* 사용자 ID */
			BSK.request_type,		/* 요청 유형  코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			BSK.product_category,		/* 상품 카테고리 코드 */
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			BSK.basket_summary,		/* 주문요약*/
			BSK.hourly_flag,		/* 시간단위 과금여부*/
			BSK.amount,			/* 주문 금액*/
			BSKIP.on_demand_flag,		/* 즉시희망 여부*/
			BSKIP.apply_datetime,		/* 서비스 희망 일시 */
			BSKIP.hourly_flag,		/* 시간단위 과금여부 */
			BSKIP.project_id,		/* 프로젝트 ID */
			PJ.project_name,		/* 프로젝트 영어  */
			PJ.project_alias,		/* 프로젝트 한글   */
			BSKIP.vm_uuid,			/* 가상서버 UUID */
			file_id AS image_name,		/* 이미지 이름 */
			VM.hostname,			/* 가상서버 호스트명 */
			VM.hostname_alias,		/* 가상서버 한글 */
			BSKIP.description,		/* 비고 */
			BSKIP.publicip_ea, /* 공인IP 수량 */
			BSKIP.publicip_product_seq,	/* 공인IP 상품 SEQ */
			PRD.product_name AS publicip_product_name /* 공인IP 상품 이름 */

		FROM bss_basket BSK

		LEFT OUTER JOIN bss_basket_publicip BSKIP	/* 공인IP */
		ON BSK.basket_seq = BSKIP.basket_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =BSKIP.project_id

		LEFT OUTER JOIN oss_vm VM		/* 가상서버 */
		ON VM.vm_uuid = BSKIP.vm_uuid

		LEFT OUTER JOIN bss_product PRD		/* 공인IP   상품 */
		ON PRD.product_seq= BSKIP.publicip_product_seq

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = BSK.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = BSK.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = BSKIP.publicip_catalog_seq
		AND CF.program_seq = BSKIP.publicip_product_seq

		WHERE BSK.user_id = #{userId}
		AND BSK.product_category ='PRODCATE_PUBLICIP'

	]]>
  	</select>


  	<!--장바구니 NAS 리스트-->
  	<select id="getBasketNaslistvo" resultType="CustomReqBasketVO">
    <![CDATA[
		SELECT
			BSK.basket_seq,			/* 장바구니 SEQ*/
			BSK.user_id,			/* 사용자 ID */
			BSK.request_type,		/* 요청 유형  코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			BSK.product_category,		/* 상품 카테고리 코드 */
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			BSK.basket_summary,		/* 주문요약*/
			BSK.hourly_flag,		/* 시간단위 과금여부*/
			BSK.amount,			/* 주문 금액*/
			BSK.cloud_id, /* 주문 클라우드*/
			OC.cloud_name, /* 주문 클라우드*/
			BSKNAS.on_demand_flag,		/* 즉시희망 여부*/
			BSKNAS.apply_datetime,		/* 서비스 희망 일시 */
			BSKNAS.hourly_flag,		/* 시간단위 과금여부 */
			BSKNAS.project_id,		/* 프로젝트 ID */
			PJ.project_name,		/* 프로젝트 영어  */
			PJ.project_alias,		/* 프로젝트 한글   */
			file_id AS image_name,		/* 이미지 이름 */
			BSKNAS.description,		/* 비고 */
			BSKNAS.nas_name,	/* NAS이름 */
			BSKNAS.nas_alias,
			BSKNAS.nas_nfs_object_id,
			BSKNAS.nas_file_system_path,
			BSKNAS.nas_name,	/* NAS이름 */
			BSKNAS.vm_name,	/* 가상서버이름들 */
			CASE BSK.request_type
			WHEN 'REQTYPE_NEW' THEN CAST(BSKNAS.nas_gb AS VARCHAR)
			WHEN 'REQTYPE_CHANGE' THEN CONCAT(CONCAT(CAST(BSKNAS.before_nas_gb AS VARCHAR), CAST('->' AS VARCHAR)), CAST(BSKNAS.nas_gb AS VARCHAR))
			WHEN 'REQTYPE_EXPR' THEN CAST(BSKNAS.nas_gb AS VARCHAR)
			ELSE CAST(0 AS VARCHAR)
			END AS nas_gb, /* NAS용량 */
			BSKNAS.nas_product_seq,		/* NAS  상품 SEQ */
			PRD.product_name AS nas_product_name /* NAS 상품 이름 */

		FROM bss_basket BSK

		LEFT OUTER JOIN bss_basket_nas BSKNAS	/* NAS */
		ON BSK.basket_seq = BSKNAS.basket_seq

		LEFT OUTER JOIN bss_product PRD		/* NAS   상품 */
		ON PRD.product_seq= BSKNAS.nas_product_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =BSKNAS.project_id


		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = BSK.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = BSK.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = BSKNAS.nas_catalog_seq
		AND CF.program_seq = BSKNAS.nas_product_seq

		LEFT OUTER JOIN oss_cloud OC ON BSK.cloud_id = OC.cloud_id

		WHERE BSK.user_id = #{userId}
		AND BSK.product_category ='PRODCATE_NAS'


	]]>
  	</select>

  	<!--장바구니 블록디스크 리스트-->
  	<select id="getBasketDisklistvo" resultType="CustomReqBasketVO">
    <![CDATA[
		SELECT
			BSK.basket_seq,			/* 장바구니 SEQ*/
			BSK.user_id,			/* 사용자 ID */
			BSK.request_type,		/* 요청 유형  코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			BSK.product_category,		/* 상품 카테고리 코드 */
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			BSK.basket_summary,		/* 주문요약*/
			BSK.hourly_flag,		/* 시간단위 과금여부*/
			BSK.amount,			/* 주문 금액*/
			BSK.cloud_id,		/* 주문 클라우드*/
			OC.cloud_name,		/* 주문 클라우드*/
			BSKDISK.on_demand_flag,		/* 즉시희망 여부*/
			BSKDISK.apply_datetime,		/* 서비스 희망 일시 */
			BSKDISK.hourly_flag,		/* 시간단위 과금여부 */
			BSKDISK.project_id,		/* 프로젝트 ID */
			PJ.project_name,		/* 프로젝트 영어  */
			PJ.project_alias,		/* 프로젝트 한글   */
			BSKDISK.vm_uuid,			/* 가상서버 UUID */
			file_id AS image_name,		/* 이미지 이름 */
			VM.hostname,			/* 가상서버 호스트명 */
			VM.hostname_alias,		/* 가상서버 한글 */
			BSKDISK.description,		/* 비고 */
			BSKDISK.disk_name, 	/* 디스크 이름 */
			BSKDISK.before_disk_gb,
			BSKDISK.disk_gb as change_disk_gb,
			BSK.request_type,
			CASE BSK.request_type
			WHEN 'REQTYPE_NEW' THEN  CAST(BSKDISK.disk_gb AS VARCHAR)
			WHEN 'REQTYPE_CHANGE' THEN CONCAT(CONCAT(CAST(BSKDISK.before_disk_gb AS VARCHAR),  CAST('->' AS VARCHAR)), CAST(BSKDISK.disk_gb AS VARCHAR))
			WHEN 'REQTYPE_EXPR' THEN  CAST(BSKDISK.disk_gb AS VARCHAR)
			ELSE CAST(0 AS VARCHAR)
			END AS disk_gb, /* 디스크 용량*/
			BSKDISK.disk_product_seq,	/* 디스크 상품 SEQ */
			PRD.product_name AS disk_product_name	 /* 디스크 상품 이름 */

		FROM bss_basket BSK

		LEFT OUTER JOIN bss_basket_disk BSKDISK	/* 블록 디스크 */
		ON BSK.basket_seq = BSKDISK.basket_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =BSKDISK.project_id

		LEFT OUTER JOIN oss_vm VM		/* 가상서버 */
		ON VM.vm_uuid = BSKDISK.vm_uuid

		LEFT OUTER JOIN bss_product PRD		/* 블룩디스크  상품 */
		ON PRD.product_seq=BSKDISK.disk_product_seq

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = BSK.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = BSK.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = BSKDISK.disk_catalog_seq
		AND CF.program_seq = BSKDISK.disk_product_seq

		LEFT OUTER JOIN oss_cloud OC
		ON BSK.cloud_id = OC.cloud_id

		WHERE BSK.user_id = #{userId}
		AND BSK.product_category ='PRODCATE_DISK'

	]]>
  	</select>

  	<!--장바구니 서비스 보안관제  리스트-->
  	<!--
  	<select id="getBasketSerlistvo" resultType="CustomReqBasketVO">
    <![CDATA[
		SELECT
			BSK.basket_seq,			/* 장바구니 SEQ*/
			BSK.user_id,			/* 사용자 ID */
			BSK.request_type,		/* 요청 유형  코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			BSK.product_category,		/* 상품 카테고리 코드 */
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			BSK.basket_summary,		/* 주문요약*/
			BSK.hourly_flag,		/* 시간단위 과금여부*/
			BSK.amount,			/* 주문 금액*/
			BSKIP.on_demand_flag,		/* 즉시희망 여부*/
			BSKIP.apply_datetime,		/* 서비스 희망 일시 */
			BSKIP.hourly_flag,		/* 시간단위 과금여부 */
			file_id AS image_name,		/* 이미지 이름 */
			BSKIP.project_id,		/* 프로젝트 ID */
			PJ.project_name,		/* 프로젝트 영어  */
			PJ.project_alias,		/* 프로젝트 한글   */
			BSKIP.description,		/* 비고 */
			BSKIP.security_product_seq,	/* 대외계 상품 SEQ */
			PRD.product_name AS ser_product_name /* 대외계 상품 이름 */

		FROM bss_basket BSK

		LEFT OUTER JOIN bss_basket_security BSKIP	/* 대외계 */
		ON BSK.basket_seq = BSKIP.basket_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =BSKIP.project_id


		LEFT OUTER JOIN bss_product PRD		/* 서비스 대외계   상품 */
		ON PRD.product_seq= BSKIP.security_product_seq

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = BSK.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = BSK.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = BSKIP.security_catalog_seq
		AND CF.program_seq = BSKIP.security_product_seq

		WHERE BSK.user_id = #{userId}
		AND BSK.product_category ='PRODCATE_SECURITY'
	]]>
  	</select>
	-->

  	<!--장바구니 서비스 형상관리  리스트-->
  	<!--
  	<select id="getBasketScmlistvo" resultType="CustomReqBasketVO">
    <![CDATA[
		SELECT
			BSK.basket_seq,			/* 장바구니 SEQ*/
			BSK.user_id,			/* 사용자 ID */
			BSK.request_type,		/* 요청 유형  코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			BSK.product_category,		/* 상품 카테고리 코드 */
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			BSK.basket_summary,		/* 주문요약*/
			BSK.hourly_flag,		/* 시간단위 과금여부*/
			BSK.amount,			/* 주문 금액*/
			BSKIP.on_demand_flag,		/* 즉시희망 여부*/
			BSKIP.apply_datetime,		/* 서비스 희망 일시 */
			BSKIP.hourly_flag,		/* 시간단위 과금여부 */
			file_id AS image_name,		/* 이미지 이름 */
			BSKIP.project_id,		/* 프로젝트 ID */
			PJ.project_name,		/* 프로젝트 영어  */
			PJ.project_alias,		/* 프로젝트 한글   */
			BSKIP.description,		/* 비고 */
			BSKIP.scm_product_seq,	/* 대외계 상품 SEQ */
			PRD.product_name AS scm_product_name /* 대외계 상품 이름 */

		FROM bss_basket BSK

		LEFT OUTER JOIN bss_basket_scm BSKIP	/* 대외계 */
		ON BSK.basket_seq = BSKIP.basket_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =BSKIP.project_id


		LEFT OUTER JOIN bss_product PRD		/* 서비스 대외계   상품 */
		ON PRD.product_seq= BSKIP.scm_product_seq

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = BSK.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = BSK.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = BSKIP.scm_catalog_seq
		AND CF.program_seq = BSKIP.scm_product_seq

		WHERE BSK.user_id = #{userId}
		AND BSK.product_category ='PRODCATE_SCM'
	]]>
  	</select>
  	-->
  	<!--장바구니 서비스 대외계 리스트-->
  	<!--
  	<select id="getBasketMcalistvo" resultType="CustomReqBasketVO">
    <![CDATA[
		SELECT
			BSK.basket_seq,			/* 장바구니 SEQ*/
			BSK.user_id,			/* 사용자 ID */
			BSK.request_type,		/* 요청 유형  코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			BSK.product_category,		/* 상품 카테고리 코드 */
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			BSK.basket_summary,		/* 주문요약*/
			BSK.hourly_flag,		/* 시간단위 과금여부*/
			BSK.amount,			/* 주문 금액*/
			BSKIP.on_demand_flag,		/* 즉시희망 여부*/
			BSKIP.apply_datetime,		/* 서비스 희망 일시 */
			BSKIP.hourly_flag,		/* 시간단위 과금여부 */
			BSKIP.project_id,		/* 프로젝트 ID */
			file_id AS image_name,		/* 이미지 이름 */
			PJ.project_name,		/* 프로젝트 영어  */
			PJ.project_alias,		/* 프로젝트 한글   */
			BSKIP.description,		/* 비고 */
			BSKIP.mca_product_seq,	/* 대외계 상품 SEQ */
			PRD.product_name AS mca_product_name /* 대외계 상품 이름 */

		FROM bss_basket BSK

		LEFT OUTER JOIN bss_basket_mca BSKIP	/* 대외계 */
		ON BSK.basket_seq = BSKIP.basket_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =BSKIP.project_id


		LEFT OUTER JOIN bss_product PRD		/* 서비스 대외계   상품 */
		ON PRD.product_seq= BSKIP.mca_product_seq

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = BSK.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = BSK.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = BSKIP.mca_catalog_seq
		AND CF.program_seq = BSKIP.mca_product_seq

		WHERE BSK.user_id = #{userId}
		AND BSK.product_category ='PRODCATE_MCA'
	]]>
 	</select>
 	-->

  	<!--장바구니 서비스 리스트-->
  	<select id="getBasketServicelistvo" resultType="CustomReqBasketVO">
    <![CDATA[
		SELECT
			BSK.basket_seq,			/* 장바구니 SEQ*/
			BSKIP.service_type AS service_type,
			SERCM.code_name AS service_type_name,
			VM.hostname,
			VM.hostname_alias,
			BSKIP.service_name,
			BSK.user_id,			/* 사용자 ID */
			BSK.request_type,		/* 요청 유형  코드*/
			OC.cloud_id,		/* 주문 클라우드*/
			OC.cloud_name,		/* 주문 클라우드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			BSK.product_category,		/* 상품 카테고리 코드 */
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			BSK.basket_summary,		/* 주문요약*/
			BSK.hourly_flag,		/* 시간단위 과금여부*/
			BSK.amount,			/* 주문 금액*/
			BSKIP.on_demand_flag,		/* 즉시희망 여부*/
			BSKIP.apply_datetime,		/* 서비스 희망 일시 */
			BSKIP.hourly_flag,		/* 시간단위 과금여부 */
			BSKIP.project_id,		/* 프로젝트 ID */
			file_id AS image_name,		/* 이미지 이름 */
			PJ.project_name,		/* 프로젝트 영어  */
			PJ.project_alias,		/* 프로젝트 한글   */
			BSKIP.description,		/* 비고 */
			BSKIP.service_product_seq,	/* 대외계 상품 SEQ */
			PRD.product_name AS mca_product_name /* 대외계 상품 이름 */

		FROM bss_basket BSK

		LEFT OUTER JOIN bss_basket_service BSKIP	/* 대외계 */
		ON BSK.basket_seq = BSKIP.basket_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =BSKIP.project_id

		LEFT OUTER JOIN oss_vm VM		/* 가상서버 */
		ON VM.vm_uuid = BSKIP.vm_uuid

		LEFT OUTER JOIN bss_product PRD		/* 서비스 대외계   상품 */
		ON PRD.product_seq= BSKIP.service_product_seq

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = BSK.request_type

		LEFT OUTER JOIN cmm_code SERCM		/* 요청 유형 */
		ON SERCM.code_key_id ='SERVICE_TYPE'
		AND SERCM.code_id = BSKIP.service_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = BSK.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = BSKIP.service_catalog_seq
		AND CF.program_seq = BSKIP.service_product_seq

		LEFT OUTER JOIN oss_cloud OC
		ON PJ.cloud_id = OC.cloud_id
		WHERE BSK.user_id = #{userId}
		AND BSK.product_category ='PRODCATE_SERVICE'
	]]>
  	</select>




  	<!--장바구니 서비스 백업 리스트-->
  	<!--
  	<select id="getBasketBaklistvo" resultType="CustomReqBasketVO">
    <![CDATA[
		SELECT
			BSK.basket_seq,			/* 장바구니 SEQ*/
			BSK.user_id,			/* 사용자 ID */
			BSK.request_type,		/* 요청 유형  코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			BSK.product_category,		/* 상품 카테고리 코드 */
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			BSK.basket_summary,		/* 주문요약*/
			BSK.hourly_flag,		/* 시간단위 과금여부*/
			BSK.amount,			/* 주문 금액*/
			BSKIP.on_demand_flag,		/* 즉시희망 여부*/
			BSKIP.apply_datetime,		/* 서비스 희망 일시 */
			BSKIP.hourly_flag,		/* 시간단위 과금여부 */
			BSKIP.project_id,		/* 프로젝트 ID */
			PJ.project_name,		/* 프로젝트 영어  */
			PJ.project_alias,		/* 프로젝트 한글   */
			BSKIP.vm_uuid,			/* 가상서버 UUID */
			(
			 SELECT GROUP_CONCAT(LBVM.hostname SEPARATOR '<br>') FROM
				(
					SELECT BBLBVM.basket_seq, BBLBVM.vm_uuid, IFNULL(VM.hostname_alias, '-') AS hostname
					FROM bss_basket_backup_vm BBLBVM
					LEFT OUTER JOIN oss_vm VM
					ON BBLBVM.vm_uuid = VM.vm_uuid
				) LBVM
				WHERE LBVM.basket_seq = BSKIP.basket_seq GROUP BY LBVM.basket_seq
			) AS hostname_alias,
			file_id AS image_name,		/* 이미지 이름 */
			VM.hostname,			/* 가상서버 호스트명 */
			BSKIP.description,		/* 비고 */
			BSKIP.backup_product_seq,	/* 대외계 상품 SEQ */
			PRD.product_name AS bak_product_name /* 대외계 상품 이름 */

		FROM bss_basket BSK

		LEFT OUTER JOIN bss_basket_backup BSKIP	/* 대외계 */
		ON BSK.basket_seq = BSKIP.basket_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =BSKIP.project_id

		LEFT OUTER JOIN oss_vm VM		/* 가상서버 */
		ON VM.vm_uuid = BSKIP.vm_uuid

		LEFT OUTER JOIN bss_product PRD		/* 서비스 대외계   상품 */
		ON PRD.product_seq= BSKIP.backup_product_seq

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = BSK.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = BSK.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = BSKIP.backup_catalog_seq
		AND CF.program_seq = BSKIP.backup_product_seq

		WHERE BSK.user_id = #{userId}
		AND BSK.product_category ='PRODCATE_BACKUP'
	]]>
  	</select>
  	-->

  	<!--장바구니 vm 리스트-->
  	<select id="getBasketlist" resultType="CustomReqBasketVO">

		SELECT
			BSK.basket_seq,
			BSK.user_id,
			BSK.request_type,
			REQCD.code_name AS request_name,
			BSK.product_category,
			REQCAT.code_name AS product_category_name,
			BSK.basket_summary,
			BSK.hourly_flag,
			BSK.amount,
			OC.cloud_id,
			OC.cloud_name,
			BSKVM.on_demand_flag,
			BSKVM.apply_datetime,
			BSKVM.hourly_flag,
			BSKVM.project_id,
			PJ.project_name,
			PJ.project_alias,
			BSKVM.vm_uuid,
			BSKVM.instance_type,
			IFNULL(file_id,
			(SELECT file_id FROM cmm_file a
			LEFT JOIN(
				SELECT
					*
				FROM bss_product_catalog_item
				WHERE catalog_category = 'CATACATE_VM'
				AND display_order = '0'
				ORDER BY catalog_seq DESC

			)b ON b.catalog_seq = a.program_name
			AND b.product_seq = a.program_seq
			LIMIT 0, 1)
			) AS image_name,		/* 이미지 이름 */
    <![CDATA[
			CASE BSK.request_type
				WHEN 'REQTYPE_NEW' THEN BSKVM.hostname	ELSE VM.hostname
			END AS hostname,	/* 가상서버 호스트명 */
			CASE BSK.request_type
				WHEN 'REQTYPE_NEW' THEN BSKVM.hostname_alias ELSE VM.hostname_alias
			END AS hostname_alias,	/* 가상서버 호스트명 */
			BSKVM.default_network_id,	/* 네트워크 ID */
			NT.network_alias AS default_network_name,	/* 네트워크 이름 한글  */
			BSKVM.req_message AS description,		/* 요청내용 */
			BSKVM.before_vcpus AS before_vcpus,
			BSKVM.vcpus AS change_vcpus,

			CASE BSK.request_type
			WHEN 'REQTYPE_NEW' THEN CAST(BSKVM.vcpus AS VARCHAR)
			WHEN 'REQTYPE_CHANGE' THEN CONCAT(CONCAT(CAST(BSKVM.before_vcpus AS VARCHAR),  CAST('->' AS VARCHAR)), CAST(BSKVM.vcpus AS VARCHAR))
			WHEN 'REQTYPE_EXPR' THEN CAST(BSKVM.vcpus AS VARCHAR)
			ELSE CAST(0 AS VARCHAR)
			END AS vcpus, /* vcpu*/

			BSKVM.before_mem_gb AS before_mem_gb,
			BSKVM.mem_gb AS change_mem_gb,

			CASE BSK.request_type
			WHEN 'REQTYPE_NEW' THEN CAST(BSKVM.mem_gb AS VARCHAR)
			WHEN 'REQTYPE_CHANGE' THEN CONCAT(CONCAT(CAST(BSKVM.before_mem_gb AS VARCHAR),  CAST('->' AS VARCHAR)), CAST(BSKVM.mem_gb AS VARCHAR))
			WHEN 'REQTYPE_EXPR' THEN CAST(BSKVM.mem_gb AS VARCHAR)
			ELSE CAST(0 AS VARCHAR)
			END AS mem_gb, /* 메모리*/

			BSKVM.disk_gb AS vm_disk_gb, /* 디스크 용량 */
			BSKVM.volume_type AS volume_type, /* OS Volume Type */
			BSKVM.vm_product_seq,		/* 가상서버 상품 SEQ */
			PRDVM.product_name AS vm_product_name,	 /* 가상서서 상품 이름 */
			BSKVM.os_product_seq, 			/* OS 상품 SEQ */
			PROS.product_name AS os_product_name,	/* OS 상품 이름*/
			BSKVM.vcpus AS view_vcpus,
			BSKVM.mem_gb AS view_mem_gb

		FROM bss_basket BSK

		LEFT OUTER JOIN bss_basket_vm BSKVM	/* 장바구니 가상서버 */
		ON BSK.basket_seq = BSKVM.basket_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =BSKVM.project_id

		LEFT OUTER JOIN oss_vm VM		/* 가상서버 */
		ON VM.vm_uuid = BSKVM.vm_uuid

		LEFT OUTER JOIN oss_network NT		/* 네트워크 */
		ON NT.network_id = BSKVM.default_network_id

		LEFT OUTER JOIN bss_product PRDVM	/* 가상서버 상품 */
		ON PRDVM.product_seq=BSKVM.vm_product_seq

		LEFT OUTER JOIN bss_product PROS	/* OS 상품 */
		ON PROS.product_seq=BSKVM.os_product_seq

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = BSK.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = BSK.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = BSKVM.vm_catalog_seq
		AND CF.program_seq = BSKVM.vm_product_seq

		LEFT OUTER JOIN oss_cloud OC
		ON PJ.cloud_id = OC.cloud_id

		WHERE BSK.user_id = #{userId}
		AND BSK.product_category ='PRODCATE_VM'



	]]>
  	</select>

	<!--
    <select id="getBasketlistOld" resultType="CustomReqBasketVO">
		SELECT 	a.basket_seq,
			a.user_id,
			a.request_type,
			a.product_category,
			a.basket_summary,
			a.hourly_flag,
			FLOOR(a.amount) as amount,
			b.on_demand_flag,
			b.apply_datetime,
			b.project_id,
			b.default_network_id,
			b.default_network_name,
			b.default_network_alias,
			b.description,
			b.hostname,
			b.hostname_alias,
			b.vcpus,
			b.mem_gb,
			b.disk_gb,
			b.vm_product_seq,
			b.os_product_seq,
			( SELECT project_name FROM oss_project WHERE project_id=b.project_id) AS project_name
		FROM
			 bss_basket a, bss_basket_vm b
			WHERE a.user_id=#{userId} AND a.basket_seq=b.basket_seq
  	</select>
	-->

   	<!--장바구니 bss_basket_loadbalancer_vm  리스트-->
    <select id="getBasketLbNetList" resultType="CustomReqBasketVO">
		SELECT
			basket_seq,
			vm_uuid
		FROM
			 bss_basket_loadbalancer_vm
		WHERE basket_seq = #{basketSeq}
  	</select>

   	<!--장바구니 bss_basket_vm_network  리스트-->
    <select id="getBasketVmList" resultType="CustomReqBasketVO">
		SELECT
			shared_network ,
			shared_network_name,
			selected_flag
		FROM
			 bss_basket_vm_network
		WHERE basket_seq = #{basketSeq}
  	</select>

  	   	<!--장바구니 bss_basket_nas_vm 리스트-->
    <select id="getBasketNasVm" resultType="CustomReqBasketVO">
		SELECT
			hostname_alias
		FROM
			bss_basket_nas_vm BBNV
		LEFT JOIN oss_vm OV
			ON BBNV.vm_uuid = OV.vm_uuid
		LEFT JOIN bss_basket_nas BBN
			ON BBNV.basket_seq = BBN.basket_seq
		WHERE basket_seq = #{basketSeq}
  	</select>

  	<!--카탈로그  장바구니 bss_basket del-->
	<update id="setChkBasketDel" parameterType="java.util.Map">
		DELETE FROM
			bss_basket
		WHERE	basket_seq IN
		<foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		</foreach>
  	</update>


  	<!--카탈로그  장바구니 bss_basket del-->
	<update id="setBasketDel" parameterType="CustomReqBasketVO" >
		DELETE FROM
			bss_basket
		WHERE	basket_seq = #{basketSeq}
  	</update>

	<!--카탈로그  장바구니 bss_basket_nas del-->
	 <update id="setChkBasketNasDel" parameterType="java.util.Map">
		DELETE FROM
			bss_basket_nas
		WHERE	basket_seq IN
		<foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		</foreach>
  	</update>

  	<!--카탈로그  장바구니 bss_basket_nas del-->
	<update id="setBasketNasDel" parameterType="CustomReqBasketVO" >
		DELETE FROM
			bss_basket_nas
		WHERE	basket_seq = #{basketSeq}
  	</update>

  	<!--카탈로그  장바구니 bss_basket_loadbalancer_vm del-->
	<update id="setChkBasketLbNetDel" parameterType="java.util.Map">
		DELETE FROM
			bss_basket_loadbalancer_vm
		WHERE	basket_seq IN
		<foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		</foreach>
  	</update>

  	<!--카탈로그  장바구니 bss_basket_loadbalancer del-->
	<update id="setChkBasketLbDel" parameterType="java.util.Map">
		DELETE FROM
			bss_basket_loadbalancer
		WHERE	basket_seq IN
		<foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		</foreach>
  	</update>

  	<!--카탈로그  장바구니 bss_basket_loadbalancer del-->
	<update id="setBasketLbDel" parameterType="CustomReqBasketVO" >
		DELETE FROM
			bss_basket_loadbalancer
		WHERE	basket_seq = #{basketSeq}
  	</update>

	<!--카탈로그  장바구니 bss_basket_backup del-->
	<!--
	<update id="setChkBasketbakDel" parameterType="java.util.Map">
		DELETE FROM
			bss_basket_backup
		WHERE	basket_seq IN
		<foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		</foreach>
  	</update>
	-->
	<!--카탈로그  장바구니 bss_basket_service-->
	<update id="setChkBasketserviceDel" parameterType="java.util.Map">
		DELETE FROM
			bss_basket_service
		WHERE	basket_seq IN
		<foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		</foreach>
  	</update>

	<!--카탈로그  장바구니 bss_basket_backup del-->
	<!--
	<update id="setBasketbakDel" parameterType="CustomReqBasketVO" >
		DELETE FROM
			bss_basket_backup
		WHERE	basket_seq = #{basketSeq}
  	</update>
	-->
	<!--카탈로그  장바구니 bss_basket_service del
	<update id="setBasketServiceDel" parameterType="CustomReqBasketVO" >
		DELETE FROM
			bss_basket_service
		WHERE	basket_seq = #{basketSeq}
  	</update>
-->
	<!--카탈로그  장바구니 bss_basket_security del-->
	<!--
	<update id="setChkBasketSerDel" parameterType="java.util.Map">
		DELETE FROM
			bss_basket_security
		WHERE	basket_seq IN
		<foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		</foreach>
  	</update>
	-->
	<!--카탈로그  장바구니 bss_basket_security del-->
	<!--
	<update id="setBasketSerDel" parameterType="CustomReqBasketVO" >
		DELETE FROM
			bss_basket_security
		WHERE	basket_seq = #{basketSeq}
  	</update>
	-->

 	<!--카탈로그  장바구니 bss_basket_scm del-->
 	<!--
	<update id="setChkBasketScmDel" parameterType="java.util.Map">
		DELETE FROM
			bss_basket_scm
		WHERE	basket_seq IN
		<foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		</foreach>
  	</update>
  	-->

	<!--카탈로그  장바구니 bss_basket_scm del-->
	<!--
	<update id="setBasketScmDel" parameterType="CustomReqBasketVO" >
		DELETE FROM
			bss_basket_scm
		WHERE	basket_seq = #{basketSeq}
  	</update>
  	-->

 	<!--카탈로그  장바구니 bss_basket_mca del-->
 	<!--
	<update id="setChkBasketMcaDel" parameterType="java.util.Map">
		DELETE FROM
			bss_basket_mca
		WHERE	basket_seq IN
		<foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		</foreach>
  	</update>
  	-->

	<!--카탈로그  장바구니 bss_basket_mca del-->
	<!--
	<update id="setBasketMcaDel" parameterType="CustomReqBasketVO" >
		DELETE FROM
			bss_basket_mca
		WHERE	basket_seq = #{basketSeq}
  	</update>
	-->
   	<!--카탈로그  장바구니 bss_basket_publicip del-->
	<update id="setChkBasketIpDel" parameterType="java.util.Map">
		DELETE FROM
			bss_basket_publicip
		WHERE	basket_seq IN
		<foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		</foreach>
  	</update>

  	<!--카탈로그  장바구니 bss_basket_publicip del-->
	<update id="setBasketIpDel" parameterType="CustomReqBasketVO" >
		DELETE FROM
			bss_basket_publicip
		WHERE	basket_seq = #{basketSeq}
  	</update>

   	<!--카탈로그  장바구니 bss_basket_disk del-->
	<update id="setChkBasketDiskDel" parameterType="java.util.Map">
		DELETE FROM
			bss_basket_disk
		WHERE	basket_seq IN
		<foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		</foreach>
  	</update>

  	<!--카탈로그  장바구니 bss_basket_disk del-->
	<update id="setBasketDiskDel" parameterType="CustomReqBasketVO" >
		DELETE FROM
			bss_basket_disk
		WHERE	basket_seq = #{basketSeq}
  	</update>

   	<!--카탈로그  장바구니 bss_basket_vm del-->
	<update id="setChkBasketVmDel" parameterType="java.util.Map">
		DELETE FROM
			bss_basket_vm
		WHERE	basket_seq IN
		<foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		</foreach>
  	</update>

  	<!--카탈로그  장바구니 bss_basket_vm del-->
	<update id="setBasketVmDel" parameterType="CustomReqBasketVO" >
		DELETE FROM
			bss_basket_vm
		WHERE	basket_seq = #{basketSeq}
  	</update>

  	<!--카탈로그  장바구니 bss_basket_vm_network del-->
	<update id="setChkBasketVmNetworkDel" parameterType="java.util.Map">
		DELETE FROM
			bss_basket_vm_network
		WHERE	basket_seq IN
		<foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		</foreach>
  	</update>

  	<!--카탈로그  장바구니 bss_basket_vm_network del-->
	<update id="setBasketVmNetworkDel" parameterType="CustomReqBasketVO" >
		DELETE FROM
			bss_basket_vm_network
		WHERE	basket_seq = #{basketSeq}
  	</update>

  	<!--카탈로그  장바구니 bss_basket_loadbalancer_vm del-->
	<update id="setBasketLbVmDel" parameterType="CustomReqBasketVO" >
		DELETE FROM
			bss_basket_loadbalancer_vm
		WHERE	basket_seq = #{basketSeq}
  	</update>

  	<!--장바구니 vm 주문 리스트-->
    <select id="getBasketOrderList" resultType="CustomReqBasketVO" parameterType="java.util.Map">
		SELECT
			BSK.basket_seq,
			BSK.user_id,
			BSK.request_type,
			REQCD.code_name AS request_name,
			BSK.product_category,
			REQCAT.code_name AS product_category_name,
			BSK.basket_summary,
			BSK.hourly_flag,
			BSK.amount,
			BSKVM.on_demand_flag,
			BSKVM.apply_datetime,
			BSKVM.hourly_flag,
			BSKVM.project_id,
			PJ.project_name,
			PJ.project_alias,
			BSKVM.vm_uuid,
			file_id AS image_name,
			CASE BSK.request_type
				WHEN 'REQTYPE_NEW' THEN BSKVM.hostname	ELSE VM.hostname
				END AS hostname,
			CASE BSK.request_type
				WHEN 'REQTYPE_NEW' THEN BSKVM.hostname_alias ELSE VM.hostname_alias
				END AS hostname_alias,
			BSKVM.default_network_id,
			NT.network_alias AS default_network_name,
			BSKVM.backup_network_flag,
			BSKVM.az_name,
			BSKVM.req_message,
			BSKVM.description,
			BSKVM.flavor_id,
			BSKVM.vcpus,
			BSKVM.mem_gb,
			BSKVM.disk_gb AS vm_disk_gb,
			BSKVM.image_id,
			BSKVM.volume_type AS volume_type,
			BSKVM.before_flavor_id AS before_flavor_ids,
			BSKVM.before_vcpus AS before_vcpus,
			BSKVM.before_mem_gb AS before_mem_gb,
			BSKVM.vm_catalog_seq AS catalog_seq,
			BSKVM.vm_product_seq,
			PRDVM.product_name AS vm_product_name,
			BSKVM.os_product_seq,
			BSKVM.datastore_id,
			BSKVM.instance_type,
			PROS.product_name AS os_product_name,
			PJ.cloud_id
		FROM bss_basket BSK

		LEFT OUTER JOIN bss_basket_vm BSKVM
		ON BSK.basket_seq = BSKVM.basket_seq

		LEFT OUTER JOIN oss_project PJ
		ON PJ.project_id =BSKVM.project_id

		LEFT OUTER JOIN oss_vm VM
		ON VM.vm_uuid = BSKVM.vm_uuid

		LEFT OUTER JOIN oss_network NT
		ON NT.network_id = BSKVM.default_network_id

		LEFT OUTER JOIN bss_product PRDVM
		ON PRDVM.product_seq=BSKVM.vm_product_seq

		LEFT OUTER JOIN bss_product PROS
		ON PROS.product_seq=BSKVM.os_product_seq

		LEFT OUTER JOIN cmm_code REQCD
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = BSK.request_type

		LEFT OUTER JOIN cmm_code REQCAT
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = BSK.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = BSKVM.vm_catalog_seq
		AND CF.program_seq = BSKVM.vm_product_seq

		WHERE BSK.product_category ='PRODCATE_VM' AND BSK.basket_seq IN
		  <foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		  </foreach>
		GROUP BY BSK.basket_seq
  	</select>

	<!--
  	<select id="getBasketOrderListOld" resultType="CustomReqBasketVO" parameterType="java.util.Map">
		SELECT 	a.basket_seq,
			a.user_id,
			a.request_type,
			a.product_category,
			a.basket_summary,
			a.hourly_flag,
			FLOOR(a.amount) as amount,
			b.on_demand_flag,
			b.apply_datetime,
			b.project_id,
			b.default_network_id,
			b.default_network_name,
			b.default_network_alias,
			b.description,
			b.hostname,
			b.hostname_alias,
			b.req_message,
			b.az_name,
			b.flavor_id,
			b.vcpus,
			b.mem_gb,
			b.disk_gb,
			b.volume_type,
			b.vm_product_seq,
			b.os_product_seq,
			( SELECT project_name FROM oss_project WHERE project_id=b.project_id) AS project_name
		FROM
			 bss_basket a, bss_basket_vm b
		WHERE a.basket_seq=b.basket_seq AND a.basket_seq IN
		  <foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		  </foreach>
		GROUP BY a.basket_seq
  	</select>
	-->

    <!--장바구니 로드 밸런서 주문 리스트-->
    <select id="getBasketLbOrderList" resultType="CustomReqBasketVO" parameterType="java.util.Map">
    <![CDATA[
		SELECT
			BSK.basket_seq,			/* 장바구니 SEQ*/
			BSK.user_id,			/* 사용자 ID */
			BSK.request_type,		/* 요청 유형  코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			BSK.product_category,		/* 상품 카테고리 코드 */
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			BSK.basket_summary,		/* 주문요약*/
			BSK.hourly_flag,		/* 시간단위 과금여부*/
			BSK.amount,			/* 주문 금액*/
			BSKLB.on_demand_flag,		/* 즉시희망 여부*/
			BSKLB.apply_datetime,		/* 서비스 희망 일시 */
			BSKLB.hourly_flag,		/* 시간단위 과금여부 */
			file_id AS image_name,		/* 이미지 이름 */
			BSKLB.project_id,		/* 프로젝트 ID */
			BSKLB.default_network_id,		/* 네트워크 ID */
			PJ.project_name,		/* 프로젝트 영어  */
			PJ.project_alias,		/* 프로젝트 한글   */
			BSKLB.description,		/* 비고 */
			BSKLB.loadbalancer_id,
			BSKLB.loadbalancer_catalog_seq AS catalog_seq,	/* 로드밸런서 카탈로그 SEQ */
			BSKLB.loadbalancer_product_seq,	/* 로드밸런서  상품 SEQ */
			PRD.product_name AS loadbalancer_product_name,	 /* 로드밸런서  상품 이름 */
			BSKLB.loadbalancer_name ,	/* 로드밸런서 이름 */
			BSKLB.loadbalancer_ea, 		/* 로드밸런서 수량 */
			BSKLB.protocol,			/* PROTOCLO */
			PRO.code_name	AS protocol_name, /* PROTOCLO 이름*/
			BSKLB.method,			/* METHOD */
			MET.code_name 	AS method_name, /* METHOD 이름*/
			BSKLB.monitor_type,		/* MORITOR TYPE */
			MORTY.code_name AS 		monitor_type_name, /* MORITOR TYPE 이름*/
			NT.network_alias,
			(
				SELECT GROUP_CONCAT(LBVM.hostname SEPARATOR '<br>') FROM
				(
					SELECT BBLBVM.basket_seq, BBLBVM.vm_uuid, IFNULL(VM.hostname_alias, '-') AS hostname
					FROM bss_basket_loadbalancer_vm BBLBVM
					LEFT OUTER JOIN oss_vm VM
					ON BBLBVM.vm_uuid = VM.vm_uuid
				) LBVM
				WHERE LBVM.basket_seq = BSKLB.basket_seq GROUP BY LBVM.basket_seq

			) AS loadbalancer_vm /* 로드밸런서 선택한 VM */

		FROM bss_basket BSK

		LEFT OUTER JOIN bss_basket_loadbalancer BSKLB 	/* 로드밸런스 */
		ON BSK.basket_seq = BSKLB.basket_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =BSKLB.project_id

		LEFT OUTER JOIN bss_product PRD		/* 로드밸런서  상품 */
		ON PRD.product_seq= BSKLB.loadbalancer_product_seq

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = BSK.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = BSK.product_category

		LEFT OUTER JOIN cmm_code PRO		/* PROTOCLO */
		ON PRO.code_key_id ='PROTOCOL'
		AND PRO.code_id = BSKLB.protocol

		LEFT OUTER JOIN cmm_code MET		/* METHOD */
		ON MET.code_key_id ='METHOD'
		AND MET.code_id = BSKLB.method

		LEFT OUTER JOIN cmm_code MORTY		/* MORITOR TYPE */
		ON MORTY.code_key_id ='MONITOR_TYPE'
		AND MORTY.code_id = BSKLB.monitor_type

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = BSKLB.loadbalancer_catalog_seq
		AND CF.program_seq = BSKLB.loadbalancer_product_seq

		LEFT OUTER JOIN oss_network NT		/* 네트워크 */
		ON NT.network_id = BSKLB.default_network_id
		]]>
		WHERE BSK.product_category ='PRODCATE_LOADBALANCER' AND BSK.basket_seq IN
		  <foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		  </foreach>
		GROUP BY BSK.basket_seq

  	</select>

   	<!--장바구니 서비스 보안관제 주문 리스트-->
   	<!--
    <select id="getBasketScrOrderList" resultType="CustomReqBasketVO" parameterType="java.util.Map">
		SELECT
			BSK.basket_seq,			/* 장바구니 SEQ*/
			BSK.user_id,			/* 사용자 ID */
			BSK.request_type,		/* 요청 유형  코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			BSK.product_category,		/* 상품 카테고리 코드 */
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			BSK.basket_summary,		/* 주문요약*/
			BSK.hourly_flag,		/* 시간단위 과금여부*/
			BSK.amount,			/* 주문 금액*/
			BSKIP.on_demand_flag,		/* 즉시희망 여부*/
			BSKIP.apply_datetime,		/* 서비스 희망 일시 */
			BSKIP.hourly_flag,		/* 시간단위 과금여부 */
			file_id AS image_name,		/* 이미지 이름 */
			BSKIP.project_id,		/* 프로젝트 ID */
			PJ.project_name,		/* 프로젝트 영어  */
			PJ.project_alias,		/* 프로젝트 한글   */
			BSKIP.description,		/* 비고 */
			BSKIP.security_id,
			BSKIP.security_catalog_seq AS catalog_seq,	/* 보안관제 카탈로그 SEQ */
			BSKIP.security_product_seq,	/* 대외계 상품 SEQ */
			PRD.product_name AS ser_product_name /* 대외계 상품 이름 */

		FROM bss_basket BSK

		LEFT OUTER JOIN bss_basket_security BSKIP	/* 대외계 */
		ON BSK.basket_seq = BSKIP.basket_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =BSKIP.project_id


		LEFT OUTER JOIN bss_product PRD		/* 서비스 대외계   상품 */
		ON PRD.product_seq= BSKIP.security_product_seq

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = BSK.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = BSK.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = BSKIP.security_catalog_seq
		AND CF.program_seq = BSKIP.security_product_seq

		WHERE BSK.product_category ='PRODCATE_SECURITY' AND BSK.basket_seq IN
		  <foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		  </foreach>
		GROUP BY BSK.basket_seq
  	</select>
  	-->
	<!--
  	<select id="getBasketScrOrderListOld" resultType="CustomReqBasketVO" parameterType="java.util.Map">
		SELECT 	a.basket_seq,
			a.user_id,
			a.request_type,
			a.product_category,
			a.basket_summary,
			a.hourly_flag,
			FLOOR(a.amount) AS amount,
			b.on_demand_flag,
			b.apply_datetime,
			b.hourly_flag,
			b.description,
			b.project_id,
			( SELECT project_name FROM oss_project WHERE project_id=b.project_id) AS project_name,
			b.security_product_seq
		FROM
			 bss_basket a, bss_basket_security b
		WHERE a.basket_seq=b.basket_seq AND a.basket_seq IN
		  <foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		  </foreach>
		GROUP BY a.basket_seq
  	</select>
	-->
  	<!--장바구니 서비스 형상관리 주문 리스트-->
  	<!--
    <select id="getBasketScmOrderList" resultType="CustomReqBasketVO" parameterType="java.util.Map">
		SELECT
			BSK.basket_seq,			/* 장바구니 SEQ*/
			BSK.user_id,			/* 사용자 ID */
			BSK.request_type,		/* 요청 유형  코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			BSK.product_category,		/* 상품 카테고리 코드 */
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			BSK.basket_summary,		/* 주문요약*/
			BSK.hourly_flag,		/* 시간단위 과금여부*/
			BSK.amount,			/* 주문 금액*/
			BSKIP.on_demand_flag,		/* 즉시희망 여부*/
			BSKIP.apply_datetime,		/* 서비스 희망 일시 */
			BSKIP.hourly_flag,		/* 시간단위 과금여부 */
			file_id AS image_name,		/* 이미지 이름 */
			BSKIP.project_id,		/* 프로젝트 ID */
			PJ.project_name,		/* 프로젝트 영어  */
			PJ.project_alias,		/* 프로젝트 한글   */
			BSKIP.description,		/* 비고 */
			BSKIP.scm_id,
			BSKIP.scm_catalog_seq AS catalog_seq,	/* 형상관리 카탈로그 SEQ */
			BSKIP.scm_product_seq,	/* 대외계 상품 SEQ */
			PRD.product_name AS scm_product_name /* 대외계 상품 이름 */

		FROM bss_basket BSK

		LEFT OUTER JOIN bss_basket_scm BSKIP	/* 대외계 */
		ON BSK.basket_seq = BSKIP.basket_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =BSKIP.project_id


		LEFT OUTER JOIN bss_product PRD		/* 서비스 대외계   상품 */
		ON PRD.product_seq= BSKIP.scm_product_seq

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = BSK.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = BSK.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = BSKIP.scm_catalog_seq
		AND CF.program_seq = BSKIP.scm_product_seq

		WHERE BSK.product_category ='PRODCATE_SCM' AND BSK.basket_seq IN
		  <foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		  </foreach>
		GROUP BY BSK.basket_seq
  	</select>
	-->
	<!--
  	<select id="getBasketScmOrderListOld" resultType="CustomReqBasketVO" parameterType="java.util.Map">
		SELECT 	a.basket_seq,
			a.user_id,
			a.request_type,
			a.product_category,
			a.basket_summary,
			a.hourly_flag,
			FLOOR(a.amount) AS amount,
			b.on_demand_flag,
			b.apply_datetime,
			b.hourly_flag,
			b.description,
			b.project_id,
			( SELECT project_name FROM oss_project WHERE project_id=b.project_id) AS project_name,
			b.scm_product_seq
		FROM
			 bss_basket a, bss_basket_scm b
		WHERE a.basket_seq=b.basket_seq AND a.basket_seq IN
		  <foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		  </foreach>
		GROUP BY a.basket_seq
  	</select>
	-->
   	<!--장바구니 서비스 대외계 주문 리스트-->
<!--
    <select id="getBasketMcaOrderList" resultType="CustomReqBasketVO" parameterType="java.util.Map">
		SELECT
			BSK.basket_seq,			/* 장바구니 SEQ*/
			BSK.user_id,			/* 사용자 ID */
			BSK.request_type,		/* 요청 유형  코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			BSK.product_category,		/* 상품 카테고리 코드 */
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			BSK.basket_summary,		/* 주문요약*/
			BSK.hourly_flag,		/* 시간단위 과금여부*/
			BSK.amount,			/* 주문 금액*/
			BSKIP.on_demand_flag,		/* 즉시희망 여부*/
			BSKIP.apply_datetime,		/* 서비스 희망 일시 */
			BSKIP.hourly_flag,		/* 시간단위 과금여부 */
			file_id AS image_name,		/* 이미지 이름 */
			BSKIP.project_id,		/* 프로젝트 ID */
			PJ.project_name,		/* 프로젝트 영어  */
			PJ.project_alias,		/* 프로젝트 한글   */
			BSKIP.description,		/* 비고 */
			BSKIP.mca_id,
			BSKIP.mca_catalog_seq AS catalog_seq,	/* 대외계 카탈로그 상품 SEQ */
			BSKIP.mca_product_seq,	/* 대외계 상품 SEQ */
			PRD.product_name AS mca_product_name /* 대외계 상품 이름 */

		FROM bss_basket BSK

		LEFT OUTER JOIN bss_basket_mca BSKIP	/* 대외계 */
		ON BSK.basket_seq = BSKIP.basket_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =BSKIP.project_id


		LEFT OUTER JOIN bss_product PRD		/* 서비스 대외계   상품 */
		ON PRD.product_seq= BSKIP.mca_product_seq

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = BSK.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = BSK.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = BSKIP.mca_catalog_seq
		AND CF.program_seq = BSKIP.mca_product_seq

		WHERE BSK.product_category ='PRODCATE_MCA' AND BSK.basket_seq IN
		  <foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		  </foreach>
		GROUP BY BSK.basket_seq
  	</select>
-->
<!--
    <select id="getBasketMcaOrderListOld" resultType="CustomReqBasketVO" parameterType="java.util.Map">
		SELECT 	a.basket_seq,
			a.user_id,
			a.request_type,
			a.product_category,
			a.basket_summary,
			a.hourly_flag,
			FLOOR(a.amount) AS amount,
			b.on_demand_flag,
			b.apply_datetime,
			b.hourly_flag,
			b.description,
			b.project_id,
			( SELECT project_name FROM oss_project WHERE project_id=b.project_id) AS project_name,
			b.mca_product_seq
		FROM
			 bss_basket a, bss_basket_mca b
		WHERE a.basket_seq=b.basket_seq AND a.basket_seq IN
		  <foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		  </foreach>
		GROUP BY a.basket_seq
  	</select>
-->
   	<!--장바구니 서비스 백업 주문 리스트-->
<!--
    <select id="getBasketBakOrderList" resultType="CustomReqBasketVO" parameterType="java.util.Map">
	<![CDATA[
		SELECT
			BSK.basket_seq,			/* 장바구니 SEQ*/
			BSK.user_id,			/* 사용자 ID */
			BSK.request_type,		/* 요청 유형  코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			BSK.product_category,		/* 상품 카테고리 코드 */
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			BSK.basket_summary,		/* 주문요약*/
			BSK.hourly_flag,		/* 시간단위 과금여부*/
			BSK.amount,			/* 주문 금액*/
			BSKIP.on_demand_flag,		/* 즉시희망 여부*/
			BSKIP.apply_datetime,		/* 서비스 희망 일시 */
			BSKIP.hourly_flag,		/* 시간단위 과금여부 */
			BSKIP.project_id,		/* 프로젝트 ID */
			PJ.project_name,		/* 프로젝트 영어  */
			PJ.project_alias,		/* 프로젝트 한글   */
			file_id AS image_name,		/* 이미지 이름 */
			BSKIP.vm_uuid,			/* 가상서버 UUID */
			VM.hostname,			/* 가상서버 호스트명 */
			(
			 SELECT GROUP_CONCAT(LBVM.hostname SEPARATOR '<br>') FROM
				(
					SELECT BBLBVM.basket_seq, BBLBVM.vm_uuid, IFNULL(VM.hostname_alias, '-') AS hostname
					FROM bss_basket_backup_vm BBLBVM
					LEFT OUTER JOIN oss_vm VM
					ON BBLBVM.vm_uuid = VM.vm_uuid
				) LBVM
				WHERE LBVM.basket_seq = BSKIP.basket_seq GROUP BY LBVM.basket_seq
			) AS hostname_alias,
			BSKIP.description,		/* 비고 */
			BSKIP.backup_id,
			BSKIP.backup_catalog_seq AS catalog_seq,	/* 백업 카탈로그 SEQ */
			BSKIP.backup_product_seq,	/* 대외계 상품 SEQ */
			PRD.product_name AS bak_product_name /* 대외계 상품 이름 */

		FROM bss_basket BSK

		LEFT OUTER JOIN bss_basket_backup BSKIP	/* 대외계 */
		ON BSK.basket_seq = BSKIP.basket_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =BSKIP.project_id

		LEFT OUTER JOIN oss_vm VM		/* 가상서버 */
		ON VM.vm_uuid = BSKIP.vm_uuid

		LEFT OUTER JOIN bss_product PRD		/* 서비스 대외계   상품 */
		ON PRD.product_seq= BSKIP.backup_product_seq

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = BSK.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = BSK.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = BSKIP.backup_catalog_seq
		AND CF.program_seq = BSKIP.backup_product_seq
		 	]]>
		WHERE BSK.product_category ='PRODCATE_BACKUP' AND BSK.basket_seq IN
		  <foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		  </foreach>
		GROUP BY BSK.basket_seq
  	</select>
-->



   	<!--장바구니 서비스 백업 주문 리스트-->
    <select id="getBasketServiceOrderList" resultType="CustomReqBasketVO" parameterType="java.util.Map">
	<![CDATA[
		SELECT
			BSK.basket_seq,			/* 장바구니 SEQ*/
			BSK.user_id,			/* 사용자 ID */
			BSK.request_type,		/* 요청 유형  코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			BSK.product_category,		/* 상품 카테고리 코드 */
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			BSK.basket_summary,		/* 주문요약*/
			BSK.hourly_flag,		/* 시간단위 과금여부*/
			BSK.amount,			/* 주문 금액*/
			BSK.cloud_id,
			BSKIP.on_demand_flag,		/* 즉시희망 여부*/
			BSKIP.apply_datetime,		/* 서비스 희망 일시 */
			BSKIP.hourly_flag,		/* 시간단위 과금여부 */
			BSKIP.project_id,		/* 프로젝트 ID */
			BSKIP.service_type,  /* 서비스TYPE */
			PJ.project_name,		/* 프로젝트 영어  */
			PJ.project_alias,		/* 프로젝트 한글   */
			file_id AS image_name,		/* 이미지 이름 */
			BSKIP.vm_uuid,			/* 가상서버 UUID */
			VM.hostname,			/* 가상서버 호스트명 */
		    VM.hostname_alias,
		    BSKIP.service_name,
		    BSKIP.description,		/* 비고 */
			BSKIP.service_id,
			BSKIP.service_catalog_seq AS catalog_seq,
			BSKIP.service_product_seq AS product_seq,
			PRD.product_name AS service_product_name, /* 대외계 상품 이름 */
			OA.app_name

		FROM bss_basket BSK

		LEFT OUTER JOIN bss_basket_service BSKIP	/* 대외계 */
		ON BSK.basket_seq = BSKIP.basket_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =BSKIP.project_id

		LEFT OUTER JOIN oss_vm VM		/* 가상서버 */
		ON VM.vm_uuid = BSKIP.vm_uuid

		LEFT OUTER JOIN bss_product PRD		/* 서비스 대외계   상품 */
		ON PRD.product_seq= BSKIP.service_product_seq

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = BSK.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = BSK.product_category


	    LEFT OUTER JOIN oss_app OA
		ON BSKIP.app_uuid = OA.app_uid

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = BSKIP.service_catalog_seq
		AND CF.program_seq = BSKIP.service_product_seq




		 	]]>
		WHERE BSK.product_category ='PRODCATE_SERVICE' AND BSK.basket_seq IN
		  <foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		  </foreach>
		GROUP BY BSK.basket_seq
  	</select>

<!--
  	<select id="getBasketBakOrderListOld" resultType="CustomReqBasketVO" parameterType="java.util.Map">
		SELECT 	a.basket_seq,
			a.user_id,
			a.request_type,
			a.product_category,
			a.basket_summary,
			a.hourly_flag,
			FLOOR(a.amount) AS amount,
			b.on_demand_flag,
			b.apply_datetime,
			b.hourly_flag,
			b.vm_uuid,
			b.description,
			b.project_id,
			( SELECT hostname_alias FROM oss_vm WHERE vm_uuid=b.vm_uuid) AS hostname_alias,
			( SELECT project_name FROM oss_project WHERE project_id=b.project_id) AS project_name,
			b.backup_product_seq
		FROM
			 bss_basket a, bss_basket_backup b
		WHERE a.basket_seq=b.basket_seq AND a.basket_seq IN
		  <foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		  </foreach>
		GROUP BY a.basket_seq
  	</select>
-->
   	<!--장바구니 Ip 주문 리스트-->
    <select id="getBasketIpOrderList" resultType="CustomReqBasketVO" parameterType="java.util.Map">
		SELECT
			BSK.basket_seq,			/* 장바구니 SEQ*/
			BSK.user_id,			/* 사용자 ID */
			BSK.request_type,		/* 요청 유형  코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			BSK.product_category,		/* 상품 카테고리 코드 */
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			BSK.basket_summary,		/* 주문요약*/
			BSK.hourly_flag,		/* 시간단위 과금여부*/
			BSK.amount,			/* 주문 금액*/
			BSKIP.on_demand_flag,		/* 즉시희망 여부*/
			BSKIP.apply_datetime,		/* 서비스 희망 일시 */
			BSKIP.hourly_flag,		/* 시간단위 과금여부 */
			BSKIP.project_id,		/* 프로젝트 ID */
			PJ.project_name,		/* 프로젝트 영어  */
			PJ.project_alias,		/* 프로젝트 한글   */
			BSKIP.vm_uuid,			/* 가상서버 UUID */
			file_id AS image_name,		/* 이미지 이름 */
			VM.hostname,			/* 가상서버 호스트명 */
			VM.hostname_alias,		/* 가상서버 한글 */
			BSKIP.description,		/* 비고 */
			BSKIP.publicip_id,
			BSKIP.publicip_ea, /* 공인IP 수량 */
			BSKIP.publicip_catalog_seq AS catalog_seq,	/* 공인IP 카탈로그 SEQ */
			BSKIP.publicip_product_seq,	/* 공인IP 상품 SEQ */
			PRD.product_name AS publicip_product_name /* 공인IP 상품 이름 */

		FROM bss_basket BSK

		LEFT OUTER JOIN bss_basket_publicip BSKIP	/* 공인IP */
		ON BSK.basket_seq = BSKIP.basket_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =BSKIP.project_id

		LEFT OUTER JOIN oss_vm VM		/* 가상서버 */
		ON VM.vm_uuid = BSKIP.vm_uuid

		LEFT OUTER JOIN bss_product PRD		/* 공인IP   상품 */
		ON PRD.product_seq= BSKIP.publicip_product_seq

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = BSK.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = BSK.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = BSKIP.publicip_catalog_seq
		AND CF.program_seq = BSKIP.publicip_product_seq

		WHERE BSK.product_category ='PRODCATE_PUBLICIP' AND BSK.basket_seq IN
		  <foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		  </foreach>
		GROUP BY BSK.basket_seq
  	</select>

<!--
    <select id="getBasketIpOrderListOld" resultType="CustomReqBasketVO" parameterType="java.util.Map">
		SELECT 	a.basket_seq,
			a.user_id,
			a.request_type,
			a.product_category,
			a.basket_summary,
			a.hourly_flag,
			FLOOR(a.amount) AS amount,
			b.on_demand_flag,
			b.apply_datetime,
			b.publicip_ea,
			b.hourly_flag,
			b.vm_uuid,
			b.description,
			b.project_id,
			( SELECT hostname_alias FROM oss_vm WHERE vm_uuid=b.vm_uuid) AS hostname_alias,
			( SELECT project_name FROM oss_project WHERE project_id=b.project_id) AS project_name,
			b.publicip_product_seq
		FROM
			 bss_basket a, bss_basket_publicip b
		WHERE a.basket_seq=b.basket_seq AND a.basket_seq IN
		  <foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		  </foreach>
		GROUP BY a.basket_seq
  	</select>
-->
   	<!--장바구니 Nas 주문 리스트-->
    <select id="getBasketNasOrderList" resultType="CustomReqBasketVO" parameterType="java.util.Map">
		SELECT
			BSK.basket_seq,			/* 장바구니 SEQ*/
			BSK.user_id,			/* 사용자 ID */
			BSK.request_type,		/* 요청 유형  코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			BSK.product_category,		/* 상품 카테고리 코드 */
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			BSK.basket_summary,		/* 주문요약*/
			BSK.hourly_flag,		/* 시간단위 과금여부*/
			BSK.amount,			/* 주문 금액*/
			BSK.cloud_id, /* 주문 클라우드*/
			OC.cloud_name, /* 주문 클라우드*/
			BSKNAS.on_demand_flag,		/* 즉시희망 여부*/
			BSKNAS.apply_datetime,		/* 서비스 희망 일시 */
			BSKNAS.hourly_flag,		/* 시간단위 과금여부 */
			BSKNAS.project_id,		/* 프로젝트 ID */
			PJ.project_name,		/* 프로젝트 영어  */
			PJ.project_alias,		/* 프로젝트 한글   */
			file_id AS image_name,		/* 이미지 이름 */
			BSKNAS.description,		/* 비고 */
			BSKNAS.nas_id,
			BSKNAS.nas_name,	/* NAS이름 */
			BSKNAS.nas_alias,
			BSKNAS.nas_nfs_object_id,
			BSKNAS.nas_file_system_path,
			BSKNAS.before_nas_gb,
			BSKNAS.nas_gb,		/* NAS용량 */
			BSKNAS.vm_name,	/* 가상서버이름들 */
			BSKNAS.nas_catalog_seq AS catalog_seq,		/* NAS 카탈로그 상품 SEQ */
			BSKNAS.nas_product_seq,		/* NAS  상품 SEQ */
			PRD.product_name AS nas_product_name /* NAS 상품 이름 */

		FROM bss_basket BSK

		LEFT OUTER JOIN bss_basket_nas BSKNAS	/* NAS */
		ON BSK.basket_seq = BSKNAS.basket_seq

		LEFT OUTER JOIN bss_product PRD		/* NAS   상품 */
		ON PRD.product_seq= BSKNAS.nas_product_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =BSKNAS.project_id


		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = BSK.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = BSK.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = BSKNAS.nas_catalog_seq
		AND CF.program_seq = BSKNAS.nas_product_seq

		LEFT OUTER JOIN oss_cloud OC ON BSK.cloud_id = OC.cloud_id

		WHERE BSK.product_category ='PRODCATE_NAS' AND BSK.basket_seq IN
		  <foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		  </foreach>
		GROUP BY BSK.basket_seq
  	</select>
<!--
    <select id="getBasketNasOrderListOld" resultType="CustomReqBasketVO" parameterType="java.util.Map">
		SELECT 	a.basket_seq,
			a.user_id,
			a.request_type,
			a.product_category,
			a.basket_summary,
			a.hourly_flag,
			FLOOR(a.amount) AS amount,
			b.on_demand_flag,
			b.apply_datetime,
			b.project_id,
			b.hourly_flag,
			b.vm_uuid,
			b.nas_name,
			b.nas_gb,
			b.description,
			( SELECT hostname_alias FROM oss_vm WHERE vm_uuid=b.vm_uuid) AS hostname_alias,
			( SELECT project_name FROM oss_project WHERE project_id=b.project_id) AS project_name,
			b.nas_product_seq
		FROM
			 bss_basket a, bss_basket_nas b
		WHERE a.basket_seq=b.basket_seq AND a.basket_seq IN
		  <foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		  </foreach>
		GROUP BY a.basket_seq
  	</select>
-->
  	<!--장바구니 디스크 주문 리스트-->
    <select id="getBasketDiskOrderList" resultType="CustomReqBasketVO" parameterType="java.util.Map">
		SELECT
			BSK.basket_seq,			/* 장바구니 SEQ*/
			BSK.user_id,			/* 사용자 ID */
			BSK.request_type,		/* 요청 유형  코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			BSK.product_category,		/* 상품 카테고리 코드 */
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			BSK.basket_summary,		/* 주문요약*/
			BSK.hourly_flag,		/* 시간단위 과금여부*/
			BSK.amount,			/* 주문 금액*/
			BSK.cloud_id,		/* 주문 클라우드*/
			BSKDISK.on_demand_flag,		/* 즉시희망 여부*/
			BSKDISK.apply_datetime,		/* 서비스 희망 일시 */
			BSKDISK.hourly_flag,		/* 시간단위 과금여부 */
			BSKDISK.project_id,		/* 프로젝트 ID */
			PJ.project_name,		/* 프로젝트 영어  */
			PJ.project_alias,		/* 프로젝트 한글   */
			BSKDISK.vm_uuid,			/* 가상서버 UUID */
			file_id AS image_name,		/* 이미지 이름 */
			VM.hostname,			/* 가상서버 호스트명 */
			VM.hostname_alias,		/* 가상서버 한글 */
			BSKDISK.description,		/* 비고 */
			BSKDISK.disk_name, 	/* 디스크 이름 */
			BSKDISK.disk_gb, 	/* 디스크 용량 */
			BSKDISK.disk_catalog_seq AS catalog_seq,	/* 블록 디스크 카탈로그 SEQ */
			BSKDISK.disk_product_seq,	/* 디스크 상품 SEQ */
			BSKDISK.before_disk_gb,
			BSKDISK.disk_catalog_seq,
			BSKDISK.disk_id,
			BSKDISK.disk_type,
			BSKDISK.vmdk_file,
			PRD.product_name AS disk_product_name	 /* 디스크 상품 이름 */

		FROM bss_basket BSK

		LEFT OUTER JOIN bss_basket_disk BSKDISK	/* 블록 디스크 */
		ON BSK.basket_seq = BSKDISK.basket_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =BSKDISK.project_id

		LEFT OUTER JOIN oss_vm VM		/* 가상서버 */
		ON VM.vm_uuid = BSKDISK.vm_uuid

		LEFT OUTER JOIN bss_product PRD		/* 블룩디스크  상품 */
		ON PRD.product_seq=BSKDISK.disk_product_seq

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = BSK.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = BSK.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = BSKDISK.disk_catalog_seq
		AND CF.program_seq = BSKDISK.disk_product_seq

		WHERE BSK.product_category ='PRODCATE_DISK' AND BSK.basket_seq IN
		  <foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		  </foreach>
		GROUP BY BSK.basket_seq
  	</select>
<!--
  	<select id="getBasketDiskOrderListOld" resultType="CustomReqBasketVO" parameterType="java.util.Map">
		SELECT 	a.basket_seq,
			a.user_id,
			a.request_type,
			a.product_category,
			a.basket_summary,
			a.hourly_flag,
			FLOOR(a.amount) AS amount,
			b.on_demand_flag,
			b.apply_datetime,
			b.project_id,
			b.hourly_flag,
			b.vm_uuid,
			b.disk_name,
			b.description,
			b.disk_gb,
			b.disk_product_seq,
			( SELECT hostname_alias FROM oss_vm WHERE vm_uuid=b.vm_uuid) AS hostname_alias,
			( SELECT project_name FROM oss_project WHERE project_id=b.project_id) AS project_name
		FROM
			 bss_basket a, bss_basket_disk b
		WHERE a.basket_seq=b.basket_seq AND a.basket_seq IN
		  <foreach collection="basketSeqList" item="item" index="index" separator="," open="(" close=")">
		  #{item}
		  </foreach>
		GROUP BY a.basket_seq
  	</select>
-->

  	<select id="getPmOrderList" resultType="CustomReqOrderVO">
  		SELECT
			*,
			(SELECT CUS.customer_name FROM cmm_customer CUS WHERE CUS.customer_id=A.customer_id) AS customer_name,
			(SELECT dept_name FROM cmm_department WHERE dept_code = A.dept_code) AS order_user_dept_name
  		FROM
  		(
			SELECT
				BOR.order_no,
				BOR.order_user_id,
				CU.user_name AS order_user_name,
				CU.customer_id,
				CU.dept_code,
				BOR.step_name,
				BOR.step_level,
				BOR.apprv_state,
				PRO.amount,
				PRO.order_count,
				PRO.new_cnt,
				PRO.change_cnt,
				PRO.expr_cnt,
				IFNULL(PRO.project_name,'') AS project_name,
				CC.code_name AS apprv_state_name,
				DATE_FORMAT(BOR.order_datetime, '%Y-%m-%d %H:%i') AS order_datetime
			FROM (
				SELECT
					BO.order_no
					, BO.order_user_id
					, BO.order_datetime
					, IFNULL(SAS.step_name, '인프라운영승인') AS step_name
					, IFNULL(SAS.step_level, '5') AS step_level
					, IF(BO.apprv_state ='APPRV_COMPLETED', BO.apprv_state, IFNULL(SAS.apprv_state, 'APPRV_COMPLETED')) AS apprv_state
				FROM (
						SELECT
							*
						FROM bss_order
						WHERE order_user_id = #{userId}
						AND (  (apprv_state  IN ('APPRV_PROCESSING','APPRV_WAITING'))
							OR (DATE_FORMAT(order_datetime,'%Y') =  DATE_FORMAT(NOW(), '%Y')))
				) BO
				LEFT JOIN(
					SELECT
						*
					FROM sr_approval_step
					WHERE apprv_state<![CDATA[<>]]>'APPRV_COMPLETED'
					GROUP BY request_seq
					ORDER BY request_seq DESC, step_level ASC
				)SAS
				ON SAS.request_seq = BO.order_no
			)BOR
			LEFT JOIN (
				SELECT
					*
				FROM cmm_code
				WHERE code_key_id = 'APPRV_STATE'
			)CC
			ON CC.code_id = BOR.apprv_state

			LEFT JOIN cmm_user CU
			ON CU.user_id = BOR.order_user_id

			LEFT JOIN (
				SELECT
					Z.order_no
					, Z.order_product_seq
					, FORMAT(FLOOR(SUM(amount)),0) AS amount
					, IFNULL(COUNT(order_no),0) AS order_count
					, SUM(Z.newCnt) AS new_cnt
					, SUM(Z.changeCnt) AS change_cnt
					, SUM(Z.exprCnt) AS expr_cnt
					/*, REPLACE(GROUP_CONCAT(DISTINCT OP.project_name),',','<![CDATA[<br>]]>	' ) AS 'project_name'*/
					, IF((COUNT(DISTINCT Z.projectId) > 1), CONCAT(OP.project_name, '<![CDATA[<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]]>(외 ', (COUNT(DISTINCT Z.projectId)-1),'건)'), OP.project_name) AS project_name
				FROM(
					SELECT
						BOP.order_no
						, BOP.order_product_seq
						, IF(request_type='REQTYPE_NEW', 1, 0) AS newCnt
						, IF(request_type='REQTYPE_CHANGE', 1, 0) AS changeCnt
						, IF(request_type='REQTYPE_EXPR', 1, 0) AS exprCnt
						, IFNULL(amount, 0) AS amount
						, CONCAT(
							  IFNULL(SERB.project_id,'')
							, IFNULL(BOPD.project_id,'')
							, IFNULL(BOPL.project_id,'')
							, IFNULL(BOPS.project_id,'')
							, IFNULL(BOPV.project_id,'')
							, IFNULL(BOPA.project_id,'')
							, IFNULL(OPJ.project_id, '')
							, IFNULL(BOPN.project_id, '')

						) AS projectId
					FROM bss_order_product BOP

					LEFT JOIN bss_order_product_service SERB
					ON BOP.order_product_seq = SERB.order_product_seq

					LEFT JOIN bss_order_product_disk BOPD
					ON BOP.order_product_seq = BOPD.order_product_seq

					LEFT JOIN bss_order_product_loadbalancer BOPL
					ON BOP.order_product_seq = BOPL.order_product_seq

					LEFT JOIN bss_order_product_snapshot BOPS
					ON BOP.order_product_seq = BOPS.order_product_seq

					LEFT JOIN bss_order_product_vm BOPV
					ON BOP.order_product_seq = BOPV.order_product_seq

					LEFT JOIN bss_order_product_app BOPA
					ON BOP.order_product_seq = BOPA.order_product_seq

					LEFT JOIN (SELECT a.*,b.project_id FROM bss_order_product_env a LEFT JOIN oss_project b ON a.project_box_id = b.project_box_id WHERE b.env_type = 'DEV') OPJ <!-- 개발환경 -->
					ON BOP.order_product_seq = OPJ.order_product_seq

					LEFT JOIN bss_order_product_nas BOPN
					ON BOP.order_product_seq = BOPN.order_product_seq

					GROUP BY BOP.order_product_seq

				)Z
				LEFT JOIN (SELECT project_id, IF(project_alias='', project_name, project_alias) AS project_name FROM oss_project) OP
				ON Z.projectId = OP.project_id

				GROUP BY Z.order_no
			)PRO
			ON PRO.order_no = BOR.order_no
			WHERE 1=1
			<if test="searchKind == 'orderName' and keyword != ''">
			AND
				CU.user_name like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchKind == 'orderNo' and keyword != ''">
			AND
				BOR.order_no like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchKind == 'projectName' and keyword != ''">
			AND
				PRO.project_name like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchKind == 'projectAlias' and keyword != ''">
			AND
				PRO.project_name like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchKind == 'projectAlias' and keyword != ''">
			AND
				PRO.project_name like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchKind == 'searchAll' and keyword != ''">
			AND
				(
				BOR.order_no like CONCAT('%',#{keyword},'%')
				OR
				PRO.project_name like CONCAT('%',#{keyword},'%')
				)

			</if>
			<if test="startDt != '' and startDt != null">
			AND
				BOR.order_datetime <![CDATA[>=]]> #{startDt}
			</if>
			<if test="endDt != '' and endDt != null">
			AND
				BOR.order_datetime <![CDATA[<=]]> #{endDt}
			</if>


			<if test="productAt == 'APPRV_WAITING'">
			AND	BOR.apprv_state = 'APPRV_WAITING'
			</if>
			<if test="productAt == 'APPRV_REJECTED'">
			AND	BOR.apprv_state = 'APPRV_REJECTED'
			</if>
			<if test="productAt == 'APPRV_COMPLETED'">
			AND	BOR.apprv_state = 'APPRV_COMPLETED'
			</if>

  		)A
		ORDER BY A.order_datetime DESC
		<if test="!length.equals(0)">
			LIMIT #{start}, #{length}
		</if>

  	</select>

  	<select id="getPmOrderStatusCnt" resultType="CustomReqOrderVO">
  		SELECT
  			IFNULL(SUM(A.change_cnt), 0) AS change_cnt,
			IFNULL(SUM(A.new_cnt), 0) AS new_cnt,
			IFNULL(SUM(A.expr_cnt), 0) AS expr_cnt
  		FROM(

			SELECT
				BOR.order_no,
				BOR.order_user_id,
				CU.user_name AS order_user_name,
				BOR.step_level,
				BOR.apprv_state,
				PRO.amount,
				PRO.order_count,
				PRO.new_cnt,
				PRO.change_cnt,
				PRO.expr_cnt,
				PRO.project_name,
				CC.code_name AS apprv_state_name,
				DATE_FORMAT(BOR.order_datetime, '%Y-%m-%d %H:%i') AS order_datetime
			FROM (
				SELECT
					BO.order_no
					, BO.order_user_id
					, BO.order_datetime
					, IFNULL(SAS.step_level, '3') AS step_level
					, IF(BO.apprv_state ='APPRV_COMPLETED', BO.apprv_state, IFNULL(SAS.apprv_state, 'APPRV_COMPLETED')) AS apprv_state
				FROM (
						SELECT
							*
						FROM bss_order
						WHERE order_user_id = #{userId}
				) BO
				LEFT JOIN(
					SELECT
						*
					FROM sr_approval_step
					WHERE apprv_state<![CDATA[<>]]>'APPRV_COMPLETED'
					GROUP BY request_seq
					ORDER BY request_seq DESC, step_level ASC
				)SAS
				ON SAS.request_seq = BO.order_no
			)BOR
			LEFT JOIN (
				SELECT
					*
				FROM cmm_code
				WHERE code_key_id = 'APPRV_STATE'
			)CC
			ON CC.code_id = BOR.apprv_state

			LEFT JOIN cmm_user CU
			ON CU.user_id = BOR.order_user_id

			LEFT JOIN (
				SELECT
					Z.order_no
					, Z.order_product_seq
					, FORMAT(FLOOR(SUM(amount)),0) AS amount
					, IFNULL(COUNT(order_no),0) AS order_count
					, SUM(Z.newCnt) AS new_cnt
					, SUM(Z.changeCnt) AS change_cnt
					, SUM(Z.exprCnt) AS expr_cnt
					/*, REPLACE(GROUP_CONCAT(DISTINCT OP.project_name),',','<![CDATA[<br>]]>	' ) AS 'project_name'*/
					, IF((COUNT(DISTINCT Z.projectId) > 1), CONCAT(OP.project_name, '<![CDATA[<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]]>(외 ', (COUNT(DISTINCT Z.projectId)-1),'건)'), OP.project_name) AS project_name
				FROM(
					SELECT
						BOP.order_no
						, BOP.order_product_seq
						, IF(request_type='REQTYPE_NEW', 1, 0) AS newCnt
						, IF(request_type='REQTYPE_CHANGE', 1, 0) AS changeCnt
						, IF(request_type='REQTYPE_EXPR', 1, 0) AS exprCnt
						, IFNULL(amount, 0) AS amount
						, CONCAT(
<!-- 							IFNULL(BOPB.project_id, '') -->
							IFNULL(BOPD.project_id,'')
							, IFNULL(BOPL.project_id,'')
<!-- 							, IFNULL(BOPM.project_id,'') -->
							, IFNULL(BOPN.project_id,'')
							, IFNULL(BOPP.project_id,'')
<!-- 							, IFNULL(BOPS.project_id,'') -->
<!-- 							, IFNULL(BOPSE.project_id,'') -->
							, IFNULL(BOPV.project_id,'')
							, IFNULL(SERB.project_id,'')
						) AS projectId
					FROM bss_order_product BOP

					LEFT JOIN bss_order_product_service SERB
					ON BOP.order_product_seq = SERB.order_product_seq

<!-- 					LEFT JOIN bss_order_product_backup BOPB -->
<!-- 					ON BOP.order_product_seq = BOPB.order_product_seq -->

					LEFT JOIN bss_order_product_disk BOPD
					ON BOP.order_product_seq = BOPD.order_product_seq

					LEFT JOIN bss_order_product_loadbalancer BOPL
					ON BOP.order_product_seq = BOPL.order_product_seq

<!-- 					LEFT JOIN bss_order_product_mca BOPM -->
<!-- 					ON BOP.order_product_seq = BOPM.order_product_seq -->

					LEFT JOIN bss_order_product_nas BOPN
					ON BOP.order_product_seq = BOPN.order_product_seq

					LEFT JOIN bss_order_product_publicip BOPP
					ON BOP.order_product_seq = BOPP.order_product_seq

<!-- 					LEFT JOIN bss_order_product_scm BOPS -->
<!-- 					ON BOP.order_product_seq = BOPS.order_product_seq -->

<!-- 					LEFT JOIN bss_order_product_security BOPSE -->
<!-- 					ON BOP.order_product_seq = BOPSE.order_product_seq -->

					LEFT JOIN bss_order_product_vm BOPV
					ON BOP.order_product_seq = BOPV.order_product_seq

					GROUP BY BOP.order_product_seq

				)Z
				LEFT JOIN (SELECT project_id, IF(project_alias='', project_name, project_alias) AS project_name FROM oss_project) OP
				ON Z.projectId = OP.project_id

				GROUP BY Z.order_no
			)PRO
			ON PRO.order_no = BOR.order_no
			WHERE 1=1
			<if test="searchKind == 'orderName' and keyword != ''">
			AND
				CU.user_name like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchKind == 'orderNo' and keyword != ''">
			AND
				BOR.order_no like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchKind == 'projectName' and keyword != ''">
			AND
				PRO.project_name like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchKind == 'searchAll' and keyword != ''">
			AND
				(
				BOR.order_no like CONCAT('%',#{keyword},'%')
				OR
				PRO.project_name like CONCAT('%',#{keyword},'%')
				)

			</if>
			<if test="startDt != '' and startDt != null">
			AND
				BOR.order_datetime <![CDATA[>=]]> #{startDt}
			</if>
			<if test="endDt != '' and endDt != null">
			AND
				BOR.order_datetime <![CDATA[<=]]> #{endDt}
			</if>


			<if test="productAt == 'APPRV_WAITING'">
			AND	BOR.apprv_state = 'APPRV_WAITING'
			</if>
			<if test="productAt == 'APPRV_REJECTED'">
			AND	BOR.apprv_state = 'APPRV_REJECTED'
			</if>
			<if test="productAt == 'APPRV_COMPLETED'">
			AND	BOR.apprv_state = 'APPRV_COMPLETED'
			</if>



  		)A
		ORDER BY A.order_datetime DESC


  	</select>

  	<!-- 상품구매 요청 승인 2019.11.14 추가(기존 현황에서 분리추가) -->
  	<select id="getOrderApproveList" resultType="CustomReqOrderVO">
  		SELECT
			*,
			(SELECT CUS.customer_name FROM cmm_customer CUS WHERE CUS.customer_id=A.customer_id) AS customer_name,
			(SELECT dept_name FROM cmm_department WHERE dept_code = A.dept_code) AS order_user_dept_name,
			a.projectid AS project_id
  		FROM
  		(
			SELECT
				BOR.order_no,
				BOR.order_user_id,
				BOR.apprv_schedule_user_id,
				CU.user_name AS order_user_name,
				CU.customer_id,
				CU.dept_code,
				BOR.step_name,
				BOR.step_level,
				BOR.apprv_state,
				PRO.amount,
				PRO.order_count,
				PRO.new_cnt,
				PRO.change_cnt,
				PRO.expr_cnt,
				PRO.projectid,
				IFNULL(PRO.project_name,'') AS project_name,
				CC.code_name AS apprv_state_name,
				DATE_FORMAT(BOR.order_datetime, '%Y-%m-%d %H:%i') AS order_datetime
			FROM
			(
				SELECT
				      SAS.apprv_schedule_user_id
					, BO.order_no
					, BO.order_user_id
					, BO.order_datetime
					, IFNULL(SAS.step_name, '인프라운영승인') AS step_name
					, IFNULL(SAS.step_level, '8') AS step_level
					, IF(BO.apprv_state ='APPRV_COMPLETED', BO.apprv_state, IFNULL(SAS.apprv_state, 'APPRV_COMPLETED')) AS apprv_state
				FROM
				BSS_ORDER AS BO
				INNER JOIN
				(

                    SELECT 	*
					FROM	sr_approval_step
					WHERE	apprv_state = 'APPRV_PROCESSING'
					AND step_level  <![CDATA[<=]]>  4
					<if test="userId != 'admin'">
					AND apprv_schedule_user_id =  #{userId}
					</if>
					GROUP BY
						request_seq
					ORDER BY
						request_seq DESC, step_level ASC

				)SAS
				ON SAS.request_seq = BO.order_no
			)BOR
			LEFT JOIN
				(SELECT * FROM cmm_code WHERE code_key_id = 'APPRV_STATE') CC
			ON CC.code_id = BOR.apprv_state

			LEFT JOIN
				cmm_user CU
			ON CU.user_id = BOR.order_user_id
			LEFT JOIN
			(
				SELECT
					Z.order_no
					, Z.projectid
					, Z.order_product_seq
					, FORMAT(FLOOR(SUM(amount)),0) AS amount
					, IFNULL(COUNT(order_no),0) AS order_count
					, SUM(Z.newCnt) AS new_cnt
					, SUM(Z.changeCnt) AS change_cnt
					, SUM(Z.exprCnt) AS expr_cnt
					/*, REPLACE(GROUP_CONCAT(DISTINCT OP.project_name),',','<![CDATA[<br>]]>	' ) AS 'project_name'*/
					, IF((COUNT(DISTINCT Z.projectId) > 1), CONCAT(OP.project_name, '<![CDATA[<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]]>(외 ', (COUNT(DISTINCT Z.projectId)-1),'건)'), OP.project_name) AS project_name
				FROM(
					SELECT
						BOP.order_no
						, BOP.order_product_seq
						, IF(request_type='REQTYPE_NEW', 1, 0) AS newCnt
						, IF(request_type='REQTYPE_CHANGE', 1, 0) AS changeCnt
						, IF(request_type='REQTYPE_EXPR', 1, 0) AS exprCnt
						, IFNULL(amount, 0) AS amount
						, CONCAT(
<!-- 							IFNULL(BOPB.project_id, '') -->
							IFNULL(BOPD.project_id,'')
							, IFNULL((SELECT project_id from oss_project where project_box_id = BOPL.project_id limit 1),'')
							, IFNULL((SELECT project_id from oss_project where project_box_id = BOPS.project_id limit 1),'')
<!-- 							, IFNULL(BOPM.project_id,'') -->
							, IFNULL(BOPN.project_id,'')
							, IFNULL(BOAP.project_id,'')
							, IFNULL(OPJ.project_id, '')
							, IFNULL(BOPP.project_id,'')
<!-- 							, IFNULL(BOPS.project_id,'') -->
<!-- 							, IFNULL(BOPSE.project_id,'') -->
							, IFNULL(BOPV.project_id,'')
							, IFNULL(SERB.project_id,'')
							, IFNULL(BOPRD.project_id, '')
						) AS projectId
					FROM bss_order_product BOP
<!-- 					LEFT JOIN bss_order_product_backup BOPB -->
<!-- 					ON BOP.order_product_seq = BOPB.order_product_seq -->

					LEFT JOIN bss_order_product_service SERB
					ON BOP.order_product_seq = SERB.order_product_seq

					LEFT JOIN bss_order_product_disk BOPD
					ON BOP.order_product_seq = BOPD.order_product_seq

					LEFT JOIN bss_order_product_loadbalancer BOPL
					ON BOP.order_product_seq = BOPL.order_product_seq

					LEFT JOIN bss_order_product_snapshot BOPS
					ON BOP.order_product_Seq = BOPS.order_product_seq

<!-- 					LEFT JOIN bss_order_product_mca BOPM -->
<!-- 					ON BOP.order_product_seq = BOPM.order_product_seq -->

					LEFT JOIN bss_order_product_nas BOPN
					ON BOP.order_product_seq = BOPN.order_product_seq

					LEFT JOIN bss_order_product_publicip BOPP
					ON BOP.order_product_seq = BOPP.order_product_seq

<!-- 					LEFT JOIN bss_order_product_scm BOPS -->
<!-- 					ON BOP.order_product_seq = BOPS.order_product_seq -->

<!-- 					LEFT JOIN bss_order_product_security BOPSE -->
<!-- 					ON BOP.order_product_seq = BOPSE.order_product_seq -->

					LEFT JOIN bss_order_product_vm BOPV
					ON BOP.order_product_seq = BOPV.order_product_seq

					LEFT JOIN bss_order_product_app BOAP
					ON BOP.order_product_seq = BOAP.order_product_seq

					LEFT JOIN (SELECT a.*,b.project_id FROM bss_order_product_env a LEFT JOIN oss_project b ON a.project_box_id = b.project_box_id WHERE b.env_type = 'DEV') OPJ <!-- 개발환경 -->
					ON BOP.order_product_seq = OPJ.order_product_seq

					LEFT JOIN bss_order_product_deploys BOPRD
					ON BOP.order_product_seq = BOPRD.order_product_seq

					GROUP BY BOP.order_product_seq

				)Z
				LEFT JOIN (SELECT project_id, IF(project_alias='', project_name, project_alias) AS project_name FROM oss_project) OP
				ON Z.projectId = OP.project_id

				GROUP BY Z.order_no
			)PRO
			ON PRO.order_no = BOR.order_no
			WHERE 1=1
			<if test="searchKind == 'orderName' and keyword != ''">
			AND
				CU.user_name like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchKind == 'orderNo' and keyword != ''">
			AND
				BOR.order_no like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchKind == 'projectName' and keyword != ''">
			AND
				PRO.project_name like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchKind == 'projectAlias' and keyword != ''">
			AND
				PRO.project_name like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchKind == 'projectAlias' and keyword != ''">
			AND
				PRO.project_name like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchKind == 'searchAll' and keyword != ''">
			AND
				(
				BOR.order_no like CONCAT('%',#{keyword},'%')
				OR
				PRO.project_name like CONCAT('%',#{keyword},'%')
				)

			</if>
			<if test="startDt != '' and startDt != null">
			AND
				BOR.order_datetime <![CDATA[>=]]> #{startDt}
			</if>
			<if test="endDt != '' and endDt != null">
			AND
				BOR.order_datetime <![CDATA[<=]]> #{endDt}
			</if>

  		)A
  			<if test="userId != 'admin'">
  		  	WHERE a.apprv_schedule_user_id = #{userId}
  			</if>

		ORDER BY A.order_datetime DESC
		<if test="!length.equals(0)">
			LIMIT #{start}, #{length}
		</if>

  	</select>

  	<select id="getOrderApproveStatusCnt" resultType="CustomReqOrderVO">
  		SELECT
  			IFNULL(SUM(A.change_cnt), 0) AS change_cnt,
			IFNULL(SUM(A.new_cnt), 0) AS new_cnt,
			IFNULL(SUM(A.expr_cnt), 0) AS expr_cnt
  		FROM(

			SELECT
				BOR.order_no,
				BOR.order_user_id,
				CU.user_name AS order_user_name,
				BOR.step_level,
				BOR.apprv_state,
				PRO.amount,
				PRO.order_count,
				PRO.new_cnt,
				PRO.change_cnt,
				PRO.expr_cnt,
				PRO.project_name,
				CC.code_name AS apprv_state_name,
				DATE_FORMAT(BOR.order_datetime, '%Y-%m-%d %H:%i') AS order_datetime
			FROM
			(
				SELECT
					BO.order_no
					, BO.order_user_id
					, BO.order_datetime
					, IFNULL(SAS.step_level, '5') AS step_level
					, IF(BO.apprv_state ='APPRV_COMPLETED', BO.apprv_state, IFNULL(SAS.apprv_state, 'APPRV_COMPLETED')) AS apprv_state
				FROM
				(
					SELECT * FROM sr_approval_step
					WHERE
						apprv_state<![CDATA[<>]]>'APPRV_COMPLETED'
						AND apprv_schedule_user_id = #{userId}
					GROUP BY
						request_seq
					ORDER BY
						request_seq DESC, step_level ASC
				)SAS
				LEFT JOIN
					bss_order AS BO
				ON SAS.request_seq = BO.order_no
			)BOR
			LEFT JOIN (
				SELECT
					*
				FROM cmm_code
				WHERE code_key_id = 'APPRV_STATE'
			)CC
			ON CC.code_id = BOR.apprv_state

			LEFT JOIN cmm_user CU
			ON CU.user_id = BOR.order_user_id

			LEFT JOIN (
				SELECT
					Z.order_no
					, Z.order_product_seq
					, FORMAT(FLOOR(SUM(amount)),0) AS amount
					, IFNULL(COUNT(order_no),0) AS order_count
					, SUM(Z.newCnt) AS new_cnt
					, SUM(Z.changeCnt) AS change_cnt
					, SUM(Z.exprCnt) AS expr_cnt
					/*, REPLACE(GROUP_CONCAT(DISTINCT OP.project_name),',','<![CDATA[<br>]]>	' ) AS 'project_name'*/
					, IF((COUNT(DISTINCT Z.projectId) > 1), CONCAT(OP.project_name, '<![CDATA[<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]]>(외 ', (COUNT(DISTINCT Z.projectId)-1),'건)'), OP.project_name) AS project_name
				FROM(
					SELECT
						BOP.order_no
						, BOP.order_product_seq
						, IF(request_type='REQTYPE_NEW', 1, 0) AS newCnt
						, IF(request_type='REQTYPE_CHANGE', 1, 0) AS changeCnt
						, IF(request_type='REQTYPE_EXPR', 1, 0) AS exprCnt
						, IFNULL(amount, 0) AS amount
						, CONCAT(
							IFNULL(SERB.project_id,'')
<!-- 							, IFNULL(BOPB.project_id, '') -->
							, IFNULL(BOPD.project_id,'')
							, IFNULL(BOPL.project_id,'')
<!-- 							, IFNULL(BOPM.project_id,'') -->
							, IFNULL(BOPN.project_id,'')
							, IFNULL(BOPP.project_id,'')
<!-- 							, IFNULL(BOPS.project_id,'') -->
<!-- 							, IFNULL(BOPSE.project_id,'') -->
							, IFNULL(BOPV.project_id,'')
						) AS projectId
					FROM bss_order_product BOP

					LEFT JOIN bss_order_product_service SERB
					ON BOP.order_product_seq = SERB.order_product_seq

<!-- 					LEFT JOIN bss_order_product_backup BOPB -->
<!-- 					ON BOP.order_product_seq = BOPB.order_product_seq -->

					LEFT JOIN bss_order_product_disk BOPD
					ON BOP.order_product_seq = BOPD.order_product_seq

					LEFT JOIN bss_order_product_loadbalancer BOPL
					ON BOP.order_product_seq = BOPL.order_product_seq

<!-- 					LEFT JOIN bss_order_product_mca BOPM -->
<!-- 					ON BOP.order_product_seq = BOPM.order_product_seq -->

					LEFT JOIN bss_order_product_nas BOPN
					ON BOP.order_product_seq = BOPN.order_product_seq

					LEFT JOIN bss_order_product_publicip BOPP
					ON BOP.order_product_seq = BOPP.order_product_seq

<!-- 					LEFT JOIN bss_order_product_scm BOPS -->
<!-- 					ON BOP.order_product_seq = BOPS.order_product_seq -->

<!-- 					LEFT JOIN bss_order_product_security BOPSE -->
<!-- 					ON BOP.order_product_seq = BOPSE.order_product_seq -->

					LEFT JOIN bss_order_product_vm BOPV
					ON BOP.order_product_seq = BOPV.order_product_seq

					GROUP BY BOP.order_product_seq

				)Z
				LEFT JOIN (SELECT project_id, IF(project_alias='', project_name, project_alias) AS project_name FROM oss_project) OP
				ON Z.projectId = OP.project_id

				GROUP BY Z.order_no
			)PRO
			ON PRO.order_no = BOR.order_no
			WHERE 1=1
			<if test="searchKind == 'orderName' and keyword != ''">
			AND
				CU.user_name like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchKind == 'orderNo' and keyword != ''">
			AND
				BOR.order_no like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchKind == 'projectName' and keyword != ''">
			AND
				PRO.project_name like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchKind == 'searchAll' and keyword != ''">
			AND
				(
				BOR.order_no like CONCAT('%',#{keyword},'%')
				OR
				PRO.project_name like CONCAT('%',#{keyword},'%')
				)

			</if>
			<if test="startDt != '' and startDt != null">
			AND
				BOR.order_datetime <![CDATA[>=]]> #{startDt}
			</if>
			<if test="endDt != '' and endDt != null">
			AND
				BOR.order_datetime <![CDATA[<=]]> #{endDt}
			</if>

  		)A
		ORDER BY A.order_datetime DESC


  	</select>

    <!-- <select id="getPmOrderListOld" resultType="CustomReqOrderVO">
		SELECT
			a.order_no,
			a.order_name,
			a.description,
			a.apprv_state,
			a.order_datetime,
			e.order_product_seq,
			e.on_demand_flag,
			e.apply_datetime,
			e.project_id,
			e.default_network_id,
			e.hostname,
			e.hostname_alias,
			e.vcpus,
			e.mem_gb,
			e.disk_gb,
			e.vm_product_seq,
			e.os_product_seq,
			b.project_name,
			b.project_alias
		FROM
			bss_order a ,oss_project b,
			(
			SELECT
				c.order_product_seq,
				c.order_no,
				c.request_type,
				c.product_category,
				c.order_summary,
				c.hourly_flag,
				c.amount,
				d.on_demand_flag,
				d.apply_datetime,
				d.project_id,
				d.default_network_id,
				d.hostname,
				d.hostname_alias,
				d.vcpus,
				d.mem_gb,
				d.disk_gb,
				d.vm_product_seq,
				d.os_product_seq
				FROM
				bss_order_product c, bss_order_product_vm d
				WHERE c.order_product_seq = d.order_product_seq
				GROUP BY c.order_no
			) e
		WHERE
			e.project_id = b.project_id
		AND ( b.project_manager_id = #{userId} or a.order_user_id = #{userId} )
		AND a.order_no=e.order_no
		<if test="searchKind == 'orderName' and keyword != ''">
		AND
			a.order_name like CONCAT('%',#{keyword},'%')
		</if>
		<if test="searchKind == 'prjtName' and keyword != ''">
		AND
			b.project_alias like CONCAT('%',#{keyword},'%')
		</if>
		<if test="searchKind == 'searchAll' and keyword != ''">
		AND
			(
			a.order_name like CONCAT('%',#{keyword},'%')
			OR
			b.project_alias like CONCAT('%',#{keyword},'%')
			)

		</if>
		ORDER BY a.order_datetime DESC
		<if test="!length.equals(0)">
					LIMIT #{start}, #{length}
				</if>
  	</select> -->

    <select id="pmlistTot" resultType="Int" parameterType="CustomReqProjectVO">
    	SELECT
			COUNT(*)
		FROM
			bss_order a
		WHERE
			 a.order_user_id = #{userId}
		<if test="searchKind == 'orderName' and keyword != ''">
		AND
			a.order_name like CONCAT('%',#{keyword},'%')
		</if>
		<if test="startDt != ''">
		AND
			a.order_datetime <![CDATA[>=]]> #{startDt}
		</if>
		<if test="endDt != ''">
		AND
			a.order_datetime <![CDATA[<=]]> #{endDt}
		</if>
    </select>

  	<!-- <select id="pmlistTotOld" resultType="Int" parameterType="CustomReqProjectVO">
    	SELECT
			COUNT(*)
		FROM
			bss_order a ,oss_project b,
			(
			SELECT
				c.order_product_seq,
				c.order_no,
				c.request_type,
				c.product_category,
				c.order_summary,
				c.hourly_flag,
				c.amount,
				d.on_demand_flag,
				d.apply_datetime,
				d.project_id,
				d.default_network_id,
				d.hostname,
				d.hostname_alias,
				d.vcpus,
				d.mem_gb,
				d.disk_gb,
				d.vm_product_seq,
				d.os_product_seq
				FROM
				bss_order_product c, bss_order_product_vm d
				WHERE c.order_product_seq = d.order_product_seq
				GROUP BY c.order_no
			) e
		WHERE
			e.project_id = b.project_id
		AND ( b.project_manager_id = #{userId} or a.order_user_id = #{userId} )
		AND a.order_no=e.order_no
		<if test="searchKind == 'orderName' and keyword != ''">
		AND
			a.order_name like CONCAT('%',#{keyword},'%')
		</if>
		<if test="searchKind == 'prjtName' and keyword != ''">
		AND
			b.project_alias like CONCAT('%',#{keyword},'%')
		</if>
		<if test="searchKind == 'searchAll' and keyword != ''">
		AND
			(
			a.order_name like CONCAT('%',#{keyword},'%')
			OR
			b.project_alias like CONCAT('%',#{keyword},'%')
			)

		</if>
		ORDER BY a.order_datetime DESC
    </select> -->

  	<!--회원사 상품 신청 현황-->
    <select id="getCustomerOrderList" resultType="CustomReqOrderVO">
		SELECT
			a.order_no,
			a.order_name,
			a.description,
			a.apprv_state,
			a.order_datetime,
			e.order_product_seq,
			e.on_demand_flag,
			e.apply_datetime,
			e.project_id,
			e.default_network_id,
			e.hostname,
			e.hostname_alias,
			e.vcpus,
			e.mem_gb,
			e.disk_gb,
			e.vm_product_seq,
			e.os_product_seq,
			b.project_name,
			b.project_alias
		FROM
			bss_order a ,oss_project b,
			(
			SELECT
				c.order_product_seq,
				c.order_no,
				c.request_type,
				c.product_category,
				c.order_summary,
				c.hourly_flag,
				c.amount,
				d.on_demand_flag,
				d.apply_datetime,
				d.project_id,
				d.default_network_id,
				d.hostname,
				d.hostname_alias,
				d.vcpus,
				d.mem_gb,
				d.disk_gb,
				d.vm_product_seq,
				d.os_product_seq
				FROM
				bss_order_product c, bss_order_product_vm d
				WHERE c.order_product_seq = d.order_product_seq
				GROUP BY c.order_no
			) e
		WHERE
			e.project_id = b.project_id
		AND b.customer_id = #{userId}
		AND a.order_no=e.order_no
		<if test="searchKind == 'orderName' and keyword != ''">
		AND
			a.order_name like CONCAT('%',#{keyword},'%')
		</if>
		<if test="searchKind == 'prjtName' and keyword != ''">
		AND
			b.project_alias like CONCAT('%',#{keyword},'%')
		</if>
		<if test="searchKind == 'searchAll' and keyword != ''">
		AND
			(
			a.order_name like CONCAT('%',#{keyword},'%')
			OR
			b.project_alias like CONCAT('%',#{keyword},'%')
			)

		</if>
		ORDER BY a.order_datetime DESC
		<if test="!length.equals(0)">
					LIMIT #{start}, #{length}
				</if>
  	</select>

  	<select id="cumlistTot" resultType="Int" parameterType="CustomReqProjectVO">
    	SELECT
			COUNT(*)
		FROM
			bss_order a ,oss_project b,
			(
			SELECT
				c.order_product_seq,
				c.order_no,
				c.request_type,
				c.product_category,
				c.order_summary,
				c.hourly_flag,
				c.amount,
				d.on_demand_flag,
				d.apply_datetime,
				d.project_id,
				d.default_network_id,
				d.hostname,
				d.hostname_alias,
				d.vcpus,
				d.mem_gb,
				d.disk_gb,
				d.vm_product_seq,
				d.os_product_seq
				FROM
				bss_order_product c, bss_order_product_vm d
				WHERE c.order_product_seq = d.order_product_seq
				GROUP BY c.order_no
			) e
		WHERE
			e.project_id = b.project_id
		AND b.customer_id = #{userId}
		AND a.order_no=e.order_no
		<if test="searchKind == 'orderName' and keyword != ''">
		AND
			a.order_name like CONCAT('%',#{keyword},'%')
		</if>
		<if test="searchKind == 'prjtName' and keyword != ''">
		AND
			b.project_alias like CONCAT('%',#{keyword},'%')
		</if>
		<if test="searchKind == 'searchAll' and keyword != ''">
		AND
			(
			a.order_name like CONCAT('%',#{keyword},'%')
			OR
			b.project_alias like CONCAT('%',#{keyword},'%')
			)

		</if>
		ORDER BY a.order_datetime DESC
    </select>

	<!-- 상품구매 요청 승인 상세 승인리스트-->
    <select id="approvalList" resultType="CustomReqCustomerVO" parameterType="CustomReqCatalogueVO">
		select
			a.request_seq,
			a.step_name,
			a.step_level,
			a.apprv_state,
			a.step_id,
			a.right_step_id,
			a.apprv_description,
			DATE_FORMAT(a.apprv_datetime, '%Y-%m-%d %H:%i') AS apprv_datetime
		from
				sr_approval_step a
	 		where
				a.request_seq = #{requestSeq} and flow_id = #{flowId}
	</select>

	<!--  	프로젝트 신청현황 상세 리스트 승인멤버 유저 아이디 조회-->
    <select id="approvalUserId" resultType="CustomReqCustomerVO" parameterType="CustomReqCatalogueVO">
			select
				user_id
				,step_id
			from
				sr_approval_member
	 		where
				request_seq = #{requestSeq} and flow_id = #{flowId}
			GROUP BY step_id
	</select>

	<!-- 주문서 상세 리스트 조회-->
    <select id="orderview" resultType="CustomReqOrderVO">
			SELECT
				order_no,
				order_user_id,
				order_name,
				description,
				apprv_state,
				DATE_FORMAT(order_datetime, '%Y-%m-%d %H:%i') AS order_datetime
			FROM
				bss_order
			where order_no = #{orderNo}
	</select>

   	<!--서비스 대외계  주문 리스트-->
   	<!--
    <select id="getReqMcaOrderList" resultType="CustomReqOrderVO" >
		SELECT
			BSSORD.order_user_id,	/* 신청자 ID*/
			BSSORD.order_name,	/* 주문서 명*/
			PRD.order_product_seq, 	/* 주문서 상품 고유 순번*/
			PRD.order_no,		/* 주문서 번호*/
			PRD.request_type,	/* 요청 유형 코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			PRD.product_category,	/* 상품 카테고리 코드*/
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			PRD.order_summary,	/* 주문 요약*/
			PRD.hourly_flag,	/* 시간 단위 과금 여부*/
			PRD.amount,		/* 주문 금액*/

			ORDMCA.on_demand_flag,	/* 즉시희망 여부*/
			ORDMCA.apply_datetime,	/* 서비스 희망 일시 */
			ORDMCA.hourly_flag,	/* 시간단위 과금여부 */
			ORDMCA.project_id  AS project_id,	/* 프로젝트 ID */

			PJ.project_name,		/* 프로젝트 이름  */
			PJ.project_alias,		/* 프로젝트 알리아스  */

			ORDMCA.description  	AS description,	/* 비고 */
			ORDMCA.mca_catalog_seq,	/* 로드밸런서  카탈로그 SEQ */
			ORDMCA.mca_product_seq,	/* 로드밸런서  상품 SEQ */

			CF.file_id AS image_name,	/* 가상서버 이미지 경로 */

			ORDMCA.mca_ea 		/* 로드밸런서 수량 */

		FROM bss_order_product PRD	/* 주문서 */

		LEFT OUTER JOIN  bss_order BSSORD	/* 주문서 상품 */
		ON PRD.order_no = BSSORD.order_no

		LEFT OUTER JOIN bss_order_product_mca ORDMCA /* 로드밸런서 */
		ON PRD.order_product_seq = ORDMCA.order_product_seq

		LEFT OUTER JOIN bss_product PRDLB		/* 로드밸런서  상품 */
		ON PRDLB.product_seq= ORDMCA.mca_product_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =ORDMCA.project_id


		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = PRD.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = PRD.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = ORDMCA.mca_catalog_seq
		AND CF.program_seq = ORDMCA.mca_product_seq

		WHERE PRD.order_no =#{orderNo}
		AND PRD.product_category ='PRODCATE_MCA'
  	</select>
-->
   	<!--서비스 형상관리 주문 리스트-->
   	<!--
    <select id="getReqScmOrderList" resultType="CustomReqOrderVO" >
		SELECT
			BSSORD.order_user_id,	/* 신청자 ID*/
			BSSORD.order_name,	/* 주문서 명*/
			PRD.order_product_seq, 	/* 주문서 상품 고유 순번*/
			PRD.order_no,		/* 주문서 번호*/
			PRD.request_type,	/* 요청 유형 코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			PRD.product_category,	/* 상품 카테고리 코드*/
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			PRD.order_summary,	/* 주문 요약*/
			PRD.hourly_flag,	/* 시간 단위 과금 여부*/
			PRD.amount,		/* 주문 금액*/
			ORDSCM.on_demand_flag,	/* 즉시희망 여부*/
			ORDSCM.apply_datetime,	/* 서비스 희망 일시 */
			ORDSCM.hourly_flag,	/* 시간단위 과금여부 */
			ORDSCM.project_id  AS project_id,	/* 프로젝트 ID */
			PJ.project_name,		/* 프로젝트 이름  */
			PJ.project_alias,		/* 프로젝트 알리아스  */

			ORDSCM.description  	AS description,	/* 비고 */
			ORDSCM.scm_catalog_seq,	/* 형상관리  카탈로그 SEQ */
			ORDSCM.scm_product_seq,	/* 형상관리  상품 SEQ */

			CF.file_id AS image_name,	/* 가상서버 이미지 경로 */

			ORDSCM.scm_ea 		/* 로드밸런서 수량 */

		FROM bss_order_product PRD	/* 주문서 */

		LEFT OUTER JOIN  bss_order BSSORD	/* 주문서 상품 */
		ON PRD.order_no = BSSORD.order_no

		LEFT OUTER JOIN bss_order_product_scm ORDSCM /* 형상관리 */
		ON PRD.order_product_seq = ORDSCM.order_product_seq

		LEFT OUTER JOIN bss_product PRDLB		/* 로드밸런서  상품 */
		ON PRDLB.product_seq= ORDSCM.scm_product_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =ORDSCM.project_id


		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = PRD.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = PRD.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = ORDSCM.scm_catalog_seq
		AND CF.program_seq = ORDSCM.scm_product_seq

		WHERE PRD.order_no =#{orderNo}
		AND PRD.product_category ='PRODCATE_SCM'
  	</select>
-->
   	<!-- 서비스 보안관제 주문 리스트-->
   	<!--
    <select id="getReqSerOrderList" resultType="CustomReqOrderVO">
		SELECT
			BSSORD.order_user_id,	/* 신청자 ID*/
			BSSORD.order_name,	/* 주문서 명*/
			PRD.order_product_seq, 	/* 주문서 상품 고유 순번*/
			PRD.order_no,		/* 주문서 번호*/
			PRD.request_type,	/* 요청 유형 코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			PRD.product_category,	/* 상품 카테고리 코드*/
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			PRD.order_summary,	/* 주문 요약*/
			PRD.hourly_flag,	/* 시간 단위 과금 여부*/
			PRD.amount,		/* 주문 금액*/

			ORDSE.on_demand_flag,	/* 즉시희망 여부*/
			ORDSE.apply_datetime,	/* 서비스 희망 일시 */
			ORDSE.hourly_flag,	/* 시간단위 과금여부 */
			ORDSE.project_id  AS project_id,	/* 프로젝트 ID */

			PJ.project_name,		/* 프로젝트 이름  */
			PJ.project_alias,		/* 프로젝트 알리아스  */

			ORDSE.description  	AS description,	/* 비고 */
			ORDSE.security_catalog_seq,	/* 로드밸런서  카탈로그 SEQ */
			ORDSE.security_product_seq,	/* 로드밸런서  상품 SEQ */

			CF.file_id AS image_name,	/* 가상서버 이미지 경로 */

			ORDSE.security_ea 		/* 로드밸런서 수량 */

		FROM bss_order_product PRD	/* 주문서 */

		LEFT OUTER JOIN  bss_order BSSORD	/* 주문서 상품 */
		ON PRD.order_no = BSSORD.order_no

		LEFT OUTER JOIN bss_order_product_security ORDSE /* 보안관제 */
		ON PRD.order_product_seq = ORDSE.order_product_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =ORDSE.project_id


		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = PRD.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = PRD.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = ORDSE.security_catalog_seq
		AND CF.program_seq = ORDSE.security_product_seq

		WHERE PRD.order_no =#{orderNo}
		AND PRD.product_category ='PRODCATE_SECURITY'
  	</select>
-->
	<!-- 주문서 서비스 backup 상세  리스트 조회-->
	<!--
    <select id="orderBakviewList" resultType="CustomReqOrderVO">
 <![CDATA[
		SELECT
			BSSORD.order_user_id,	/* 신청자 ID*/
			BSSORD.order_name,	/* 주문서 명*/
			PRD.order_product_seq, 	/* 주문서 상품 고유 순번*/
			PRD.order_no,		/* 주문서 번호*/
			PRD.request_type,	/* 요청 유형 코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			PRD.product_category,	/* 상품 카테고리 코드*/
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			PRD.order_summary,	/* 주문 요약*/
			PRD.hourly_flag,	/* 시간 단위 과금 여부*/
			PRD.amount,		/* 주문 금액*/
			CF.file_id AS image_name,
			ORDSVR.on_demand_flag,	/* 즉시희망 여부*/
			ORDSVR.apply_datetime,	/* 서비스 희망 일시 */
			ORDSVR.hourly_flag,	/* 시간단위 과금여부 */
			ORDSVR.project_id  AS project_id,	/* 프로젝트 ID */
			PJ.project_name,		/* 프로젝트 이름  */
			PJ.project_alias,		/* 프로젝트 알리아스  */
			(
			 SELECT GROUP_CONCAT(LBVM.hostname SEPARATOR '<br>') FROM
				(
					SELECT BBLBVM.order_product_seq, BBLBVM.vm_uuid, IFNULL(VM.hostname, '-') AS hostname
					FROM bss_order_product_backup_vm BBLBVM
					LEFT OUTER JOIN oss_vm VM
					ON BBLBVM.vm_uuid = VM.vm_uuid
				) LBVM
				WHERE LBVM.order_product_seq = ORDSVR.order_product_seq GROUP BY LBVM.order_product_seq
			) AS hostname,		/* 가상서버 호스트명 */
			(
			 SELECT GROUP_CONCAT(LBVM.hostname SEPARATOR '<br>') FROM
				(
					SELECT BBLBVM.order_product_seq, BBLBVM.vm_uuid, IFNULL(VM.hostname_alias, '-') AS hostname
					FROM bss_order_product_backup_vm BBLBVM
					LEFT OUTER JOIN oss_vm VM
					ON BBLBVM.vm_uuid = VM.vm_uuid
				) LBVM
				WHERE LBVM.order_product_seq = ORDSVR.order_product_seq GROUP BY LBVM.order_product_seq
			) AS hostname_alias,		/* 가상서버 한글 */
			ORDSVR.description  	AS description,	/* 비고 */
			ORDSVR.backup_product_seq,	/* 서비스 상품 SEQ */
			PRDSVR.product_name AS service_product_name, /* 서비스 상품 이름 */
			ORDSVR.backup_gb	/* 서비스 수량 */

		FROM bss_order_product PRD

		LEFT OUTER JOIN  bss_order BSSORD
		ON PRD.order_no = BSSORD.order_no

		LEFT OUTER JOIN bss_order_product_backup ORDSVR
		ON PRD.order_product_seq = ORDSVR.order_product_seq

		LEFT OUTER JOIN oss_vm VM		/* 가상서버 */
		ON VM.vm_uuid = ORDSVR.vm_uuid

		LEFT OUTER JOIN bss_product PRDSVR		/*  공인IP  상품 */
		ON PRDSVR.product_seq= ORDSVR.backup_product_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =ORDSVR.project_id

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = PRD.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = PRD.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = ORDSVR.backup_catalog_seq
		AND CF.program_seq = ORDSVR.backup_product_seq

		WHERE PRD.order_no =#{orderNo}
		AND PRD.product_category ='PRODCATE_BACKUP'
			]]>
	</select>
-->
	<!-- 주문서 서비스 상세  리스트 조회-->
    <select id="orderServiceviewList" resultType="CustomReqOrderVO">
 <![CDATA[
		SELECT
			BSSORD.order_user_id,	/* 신청자 ID*/
			BSSORD.order_name,	/* 주문서 명*/
			PRD.order_product_seq, 	/* 주문서 상품 고유 순번*/
			PRD.order_no,		/* 주문서 번호*/
			PRD.request_type,	/* 요청 유형 코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			PRD.product_category,	/* 상품 카테고리 코드*/
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			PRD.order_summary,	/* 주문 요약*/
			PRD.hourly_flag,	/* 시간 단위 과금 여부*/
			PRD.amount,		/* 주문 금액*/
			CF.file_id AS image_name,
			ORDSVR.on_demand_flag,	/* 즉시희망 여부*/
			ORDSVR.apply_datetime,	/* 서비스 희망 일시 */
			ORDSVR.hourly_flag,	/* 시간단위 과금여부 */
			ORDSVR.project_id  AS project_id,	/* 프로젝트 ID */
			PJ.project_name,		/* 프로젝트 이름  */
			PJ.project_alias,		/* 프로젝트 알리아스  */
			ORDSVR.description  	AS description,	/* 비고 */
			ORDSVR.service_product_seq,	/* 서비스 상품 SEQ */
			PRDSVR.product_name AS service_product_name, /* 서비스 상품 이름 */
			ORDSVR.service_ea,	/* 서비스 수량 */
			ORDSVR.service_type,
			ORDSVR.service_name,
			SERCD.code_name AS service_type_name,
			VM.hostname,
			VM.hostname_alias,
			OC.cloud_name,
			OA.app_name
		FROM bss_order_product PRD

		LEFT OUTER JOIN oss_cloud OC
		ON PRD.cloud_id = OC.cloud_id

		LEFT OUTER JOIN  bss_order BSSORD
		ON PRD.order_no = BSSORD.order_no

		LEFT OUTER JOIN bss_order_product_service ORDSVR
		ON PRD.order_product_seq = ORDSVR.order_product_seq

		LEFT OUTER JOIN oss_vm VM		/* 가상서버 */
		ON VM.vm_uuid = ORDSVR.vm_uuid

		LEFT OUTER JOIN bss_product PRDSVR		/*  공인IP  상품 */
		ON PRDSVR.product_seq= ORDSVR.service_product_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =ORDSVR.project_id

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = PRD.request_type

		LEFT OUTER JOIN cmm_code SERCD
		ON SERCD.code_key_id ='SERVICE_TYPE'
		AND SERCD.code_id = ORDSVR.service_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = PRD.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = ORDSVR.service_catalog_seq
		AND CF.program_seq = ORDSVR.service_product_seq

	    LEFT OUTER JOIN oss_app OA
		ON ORDSVR.app_uuid = OA.app_uid

		WHERE PRD.order_no =#{orderNo}
		AND PRD.product_category ='PRODCATE_SERVICE'
			]]>
	</select>

	<!-- 주문서 Ip 상세  리스트 조회-->
    <select id="orderIpviewList" resultType="CustomReqOrderVO">
		SELECT
			BSSORD.order_user_id,	/* 신청자 ID*/
			BSSORD.order_name,	/* 주문서 명*/
			PRD.order_product_seq, 	/* 주문서 상품 고유 순번*/
			PRD.order_no,		/* 주문서 번호*/
			PRD.request_type,	/* 요청 유형 코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			PRD.product_category,	/* 상품 카테고리 코드*/
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			PRD.order_summary,	/* 주문 요약*/
			PRD.hourly_flag,	/* 시간 단위 과금 여부*/
			CF.file_id AS image_name,
			PRD.amount,		/* 주문 금액*/
			ORDIP.vm_uuid,
			ORDIP.on_demand_flag,	/* 즉시희망 여부*/
			ORDIP.apply_datetime,	/* 서비스 희망 일시 */
			ORDIP.hourly_flag,	/* 시간단위 과금여부 */
			ORDIP.project_id  AS project_id,	/* 프로젝트 ID */
			PJ.project_name,		/* 프로젝트 이름  */
			PJ.project_alias,		/* 프로젝트 알리아스  */
			ORDIP.description  	AS description,	/* 비고 */
			ORDIP.publicip_product_seq,	/* 공인IP 상품 SEQ */
			PRDIP.product_name AS loadbalancer_product_name,	 /* 공인IP 상품 이름 */
			ORDIP.publicip_ea /* 공인IP 수량 */

		FROM bss_order_product PRD

		LEFT OUTER JOIN  bss_order BSSORD
		ON PRD.order_no = BSSORD.order_no

		LEFT OUTER JOIN bss_order_product_publicip ORDIP
		ON PRD.order_product_seq = ORDIP.order_product_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =ORDIP.project_id

		LEFT OUTER JOIN bss_product PRDIP		/*  공인IP  상품 */
		ON PRDIP.product_seq= ORDIP.publicip_product_seq

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = PRD.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = PRD.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = ORDIP.publicip_catalog_seq
		AND CF.program_seq = ORDIP.publicip_product_seq

		WHERE PRD.order_no =#{orderNo}
		AND PRD.product_category ='PRODCATE_PUBLICIP'
	</select>

	<!-- 주문서 Lb 상세  리스트 조회-->
    <select id="orderLbviewList" resultType="CustomReqOrderVO">
    <![CDATA[
		SELECT
			BSSORD.order_user_id,	/* 신청자 ID*/
			BSSORD.order_name,	/* 주문서 명*/
			PRD.order_product_seq, 	/* 주문서 상품 고유 순번*/
			PRD.order_no,		/* 주문서 번호*/
			PRD.request_type,	/* 요청 유형 코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			PRD.product_category,	/* 상품 카테고리 코드*/
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			PRD.order_summary,	/* 주문 요약*/
			PRD.hourly_flag,	/* 시간 단위 과금 여부*/
			PRD.amount,		/* 주문 금액*/
			ORDLB.on_demand_flag,	/* 즉시희망 여부*/
			ORDLB.apply_datetime,	/* 서비스 희망 일시 */
			ORDLB.hourly_flag,	/* 시간단위 과금여부 */
			(SELECT project_id FROM oss_project WHERE project_box_id = ORDLB.project_id LIMIT 1)  AS project_id,	/* 프로젝트 ID */
			PJ.project_name,		/* 프로젝트 이름  */
			PJ.project_alias,		/* 프로젝트 알리아스  */
			ORDLB.description  	AS description,	/* 비고 */
			ORDLB.loadbalancer_catalog_seq,	/* 로드밸런서  카탈로그 SEQ */
			ORDLB.loadbalancer_product_seq,	/* 로드밸런서  상품 SEQ */
			PRDLB.product_name AS loadbalancer_product_name,	 /* 로드밸런서  상품 이름 */
			CF.file_id AS image_name,	/* 가상서버 이미지 경로 */
			ORDLB.loadbalancer_name ,	/* 로드밸런서 이름 */
			ORDLB.loadbalancer_ea, 		/* 로드밸런서 수량 */
			ORDLB.protocol,		/* PROTOCLO */
			ORDLB.ip,
			ORDLB.port,
			PRO.code_name	AS protocol_name, /* PROTOCLO 이름*/
			ORDLB.method,		/* METHOD */
			MET.code_name 	AS method_name, /* METHOD 이름*/
			ORDLB.monitor_type,		/* MORITOR TYPE */
			MORTY.code_name AS 		monitor_type_name, /* MORITOR TYPE 이름*/
			NT.network_alias,
			(
				SELECT GROUP_CONCAT(LBVM.hostname SEPARATOR '<br>') FROM
				(
					SELECT OPLBVM.order_product_seq, OPLBVM.vm_uuid, IFNULL(VM.hostname_alias, '-') AS hostname
					FROM bss_order_product_loadbalancer_vm OPLBVM
					LEFT OUTER JOIN oss_vm VM
					ON OPLBVM.vm_uuid = VM.vm_uuid
				) LBVM
				WHERE LBVM.order_product_seq = ORDLB.order_product_seq GROUP BY LBVM.order_product_seq
			) AS loadbalancer_vm /* 로드밸런서 선택한 VM */

		FROM bss_order_product PRD	/* 주문서 */

		LEFT OUTER JOIN  bss_order BSSORD	/* 주문서 상품 */
		ON PRD.order_no = BSSORD.order_no

		LEFT OUTER JOIN bss_order_product_loadbalancer ORDLB /* 로드밸런서 */
		ON PRD.order_product_seq = ORDLB.order_product_seq

		LEFT OUTER JOIN bss_product PRDLB		/* 로드밸런서  상품 */
		ON PRDLB.product_seq= ORDLB.loadbalancer_product_seq

		LEFT OUTER JOIN oss_project_box PJ		/* 프로젝트  */
		ON PJ.project_box_id =ORDLB.project_id


		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = PRD.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = PRD.product_category


		LEFT OUTER JOIN cmm_code PRO		/* PROTOCLO */
		ON PRO.code_key_id ='PROTOCOL'
		AND PRO.code_id = ORDLB.protocol

		LEFT OUTER JOIN cmm_code MET		/* METHOD */
		ON MET.code_key_id ='METHOD'
		AND MET.code_id = ORDLB.method

		LEFT OUTER JOIN cmm_code MORTY		/* MORITOR TYPE */
		ON MORTY.code_key_id ='MONITOR_TYPE'
		AND MORTY.code_id = ORDLB.monitor_type

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = ORDLB.loadbalancer_catalog_seq
		AND CF.program_seq = ORDLB.loadbalancer_product_seq

		LEFT OUTER JOIN oss_network NT		/* 네트워크 */
		ON NT.network_id = ORDLB.default_network_id

		WHERE PRD.order_no =#{orderNo}
		AND PRD.product_category ='ITEMCATE_LOADBALANCER'
	]]>
	</select>

	<!-- 주문서 SN 상세  리스트 조회-->
    <select id="orderSnviewList" resultType="CustomReqOrderVO">
    <![CDATA[
		SELECT
			BSSORD.order_user_id,	/* 신청자 ID*/
			BSSORD.order_name,	/* 주문서 명*/
			PRD.order_product_seq, 	/* 주문서 상품 고유 순번*/
			PRD.order_no,		/* 주문서 번호*/
			PRD.request_type,	/* 요청 유형 코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			PRD.product_category,	/* 상품 카테고리 코드*/
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			PRD.order_summary,	/* 주문 요약*/
			PRD.hourly_flag,	/* 시간 단위 과금 여부*/
			PRD.amount,		/* 주문 금액*/
			ORDSN.on_demand_flag,	/* 즉시희망 여부*/
			ORDSN.apply_datetime,	/* 서비스 희망 일시 */
			ORDSN.hourly_flag,	/* 시간단위 과금여부 */
			(SELECT project_id FROM oss_project WHERE project_box_id = ORDSN.project_id LIMIT 1)  AS project_id,	/* 프로젝트 ID */
			PJ.project_name,		/* 프로젝트 이름  */
			PJ.project_alias,		/* 프로젝트 알리아스  */
			ORDSN.description  	AS description,	/* 비고 */
			ORDSN.snapshot_catalog_seq,	/* 로드밸런서  카탈로그 SEQ */
			ORDSN.snapshot_product_seq,	/* 로드밸런서  상품 SEQ */
			PRDLB.product_name AS loadbalancer_product_name,	 /* 로드밸런서  상품 이름 */
			CF.file_id AS image_name,	/* 가상서버 이미지 경로 */
			ORDSN.snapshot_name,
			OD.disk_alias,
			OV.hostname

		FROM bss_order_product PRD	/* 주문서 */

		LEFT OUTER JOIN  bss_order BSSORD	/* 주문서 상품 */
		ON PRD.order_no = BSSORD.order_no

		LEFT OUTER JOIN bss_order_product_snapshot ORDSN /* 로드밸런서 */
		ON PRD.order_product_seq = ORDSN.order_product_seq

		LEFT OUTER JOIN bss_product PRDLB		/* 로드밸런서  상품 */
		ON PRDLB.product_seq= ORDSN.snapshot_product_seq

		LEFT OUTER JOIN oss_project_box PJ		/* 프로젝트  */
		ON PJ.project_box_id =ORDSN.project_id

		LEFT JOIN oss_disk OD
		ON ORDSN.disk_id = OD.disk_id

		LEFT JOIN oss_vm OV
		ON OV.vm_uuid = OD.vm_uuid

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = PRD.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = PRD.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = ORDSN.snapshot_catalog_seq
		AND CF.program_seq = ORDSN.snapshot_product_seq
		WHERE PRD.order_no =#{orderNo}
		AND PRD.product_category ='ITEMCATE_SNAPSHOT'
	]]>
	</select>

	<!-- 주문서 SN 상세  리스트 조회-->
    <select id="orderAppviewList_sub" resultType="CustomReqOrderVO">
    <![CDATA[
		SELECT
			BSSORD.order_user_id					/* 신청자 ID*/
			,BSSORD.order_name						/* 주문서 명*/
			,PRD.order_product_seq 					/* 주문서 상품 고유 순번*/
			,PRD.order_no							/* 주문서 번호*/
			,PRD.request_type						/* 요청 유형 코드*/
			,REQCD.code_name AS request_name 		/* 요청 유형 이름*/
			,PRD.product_category					/* 상품 카테고리 코드*/
			,REQCAT.code_name AS product_category_name /* 상품 카테고리 이름*/
			,PRD.order_summary						/* 주문 요약*/
			,PRD.hourly_flag						/* 시간 단위 과금 여부*/
			,PRD.amount								/* 주문 금액*/
			,ORDAPP.description  	AS description	/* 비고 */
			,ORDAPP.template_catalog_seq AS template_catalog_seq	/* 로드밸런서  카탈로그 SEQ */
			,ORDAPP.template_product_seq AS template_product_seq	/* 로드밸런서  상품 SEQ */
			,PRDLB.product_name 	AS product_name					/* APP 이미지 이름 */
			,CF.file_id 			AS image_name					/* 가상서버 이미지 경로 */
			,ORDAPP.app_name 		AS app_name
			,ORDAPP.app_alias 		AS app_alias
			,ORDAPP.on_demand_flag 	AS on_demand_flag				/* 즉시희망 여부 */
			,ORDAPP.domain_url 		AS domain_url
			,OC.cloud_name 			AS cloud_name
			,ORDAPP.pod_cnt 		AS pod_cnt
			,ORDAPP.cpu_limit 		AS cpu_limit
			,ORDAPP.mem_limit 		AS mem_limit
			,OPS.project_id 		AS project_id
			,OPS.project_box_id 	AS project_box_id
			,(
				SELECT project_name
				FROM oss_project_box
				WHERE project_box_id = ops.project_box_id
			) 						AS project_name
			,(
				SELECT project_alias
				FROM oss_project_box
				WHERE project_box_id = ops.project_box_id
			) 						AS project_alias
			,OPS.cloud_id 			AS cloud_id
			,ORDAPP.git_repository 	AS git_repository
			,ORDAPP.git_reference 	AS git_reference
			,ORDAPP.params 			AS params
			,ORDAPP.env_type 		AS env_type
			,ORDAPP.app_version		AS app_version
			,ORDAPP.deploys_directory		AS deploys_directory
			,PRDOS.vm_image_id 		AS template_name
			,PRDOS.vm_image_name 	AS template_name_space
			,PQ.provisioning_status AS provisioning_status
			,PQ.provisioning_status_message AS provisioning_status_message
			,CP.cpu_limit AS before_cpu_limit
			,CP.mem_limit AS before_mem_limit
			,CP.pod_cnt AS before_pod_cnt
		FROM bss_order_product PRD					/* 주문서 */
		LEFT OUTER JOIN  bss_order BSSORD			/* 주문서 상품 */
			ON PRD.order_no = BSSORD.order_no
		INNER JOIN bss_order_product_app ORDAPP
			ON PRD.order_product_seq = ORDAPP.order_product_seq
		LEFT OUTER JOIN oss_app OA
			ON ORDAPP.app_uid = OA.app_uid
		LEFT OUTER JOIN oss_project AS OPS
			ON OPS.project_id = ORDAPP.project_id
	    LEFT OUTER JOIN oss_cloud OC
        	ON OPS.cloud_id = OC.cloud_id
		LEFT OUTER JOIN cmm_code REQCD				/* 요청 유형 */
			ON REQCD.code_key_id ='REQUEST_TYPE'
			AND REQCD.code_id = PRD.request_type
		LEFT OUTER JOIN cmm_code REQCAT				/* 상품 카테고리 */
			ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
			AND REQCAT.code_id = PRD.product_category
		LEFT OUTER JOIN cmm_file CF
			ON CF.program_name = ORDAPP.template_catalog_seq
			AND CF.program_seq = ORDAPP.template_product_seq
		LEFT OUTER JOIN bss_product_os PRDOS
			ON PRDOS.product_seq = ORDAPP.os_product_seq
			AND PRDOS.cloud_id = OPS.cloud_id
		LEFT OUTER JOIN bss_product PRDLB
			ON PRDLB.product_seq= PRDOS.product_seq
		LEFT OUTER JOIN provisioning_queue PQ
			ON PRD.order_product_seq = PQ.order_product_seq
		LEFT JOIN (SELECT a.order_product_seq , a."ref" , a.sync_app_status , b.cpu_limit , b.mem_limit , b.pod_cnt FROM cicd_pipeline a INNER JOIN bss_order_product_app b ON a.order_product_seq = b.order_product_seq WHERE a."ref" LIKE '%prod%' AND a.sync_app_status = 'SYNC_APP_SUCCESS') CP
			ON ORDAPP.before_order_product_seq = CP.order_product_seq
		WHERE 1=1
		  AND PRD.order_no =#{orderNo}
		  AND PRD.product_category ='PRODCATE_APP'
	]]>
	</select>

	<!-- 개발환경 신청 승인현황 조회 쿼리 -->
	<select id="orderEnvviewList_sub" resultType="CustomReqOrderVO">
		<![CDATA[
			SELECT
				BSSORD.order_user_id
				,BSSORD.order_name
				,PRD.order_product_seq
				,PRD.order_no
				,PRD.request_type						/* 요청 유형 코드*/
				,REQCD.code_name AS request_name 		/* 요청 유형 이름*/
				,PRD.product_category					/* 상품 카테고리 코드*/
				,REQCAT.code_name AS product_category_name /* 상품 카테고리 이름*/
				,PRD.order_summary						/* 주문 요약*/
				,PRD.hourly_flag						/* 시간 단위 과금 여부*/
				,PRD.amount								/* 주문 금액*/
				,OC.cloud_name 			AS cloud_name
				,OPS.project_id 		AS project_id
				,OPS.project_box_id 	AS project_box_id
				,(
					SELECT project_name
					FROM oss_project_box
					WHERE project_box_id = ops.project_box_id
				) 						AS project_name
				,(
					SELECT project_alias
					FROM oss_project_box
					WHERE project_box_id = ops.project_box_id
				) 						AS project_alias
				,OPS.cloud_id 			AS cloud_id
				,PQ.provisioning_status AS provisioning_status
				,PQ.provisioning_status_message AS provisioning_status_message
				,ORDENV.env_name
				,ORDENV.env_alias
				,ORDENV.env_group_url
				,ORDENV.env_group_name
				,ORDENV.description

			FROM bss_order_product PRD					/* 주문서 */
			LEFT OUTER JOIN  bss_order BSSORD			/* 주문서 상품 */
				ON PRD.order_no = BSSORD.order_no

			INNER JOIN bss_order_product_env ORDENV
			ON PRD.order_product_seq = ORDENV.order_product_seq

			LEFT OUTER JOIN oss_project AS OPS
				ON OPS.project_box_id = ORDENV.project_box_id

		    LEFT OUTER JOIN oss_cloud OC
	        	ON OPS.cloud_id = OC.cloud_id

			LEFT OUTER JOIN cmm_code REQCD
				ON REQCD.code_key_id ='REQUEST_TYPE'
				AND REQCD.code_id = PRD.request_type

			LEFT OUTER JOIN cmm_code REQCAT				/* 상품 카테고리 */
				ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
				AND REQCAT.code_id = PRD.product_category

			LEFT OUTER JOIN provisioning_queue PQ
				ON PRD.order_product_seq = PQ.order_product_seq

			WHERE 1=1
			  AND PRD.order_no = #{orderNo}
			  AND PRD.product_category ='PRODCATE_ENV'
			  AND OPS.env_type ='DEV'
		]]>
	</select>


	<!-- 주문서 SN 상세  리스트 조회-->
    <select id="orderAppviewList" resultType="CustomReqOrderVO">
    <![CDATA[
		SELECT
			BSSORD.order_user_id,	/* 신청자 ID*/
			BSSORD.order_name,	/* 주문서 명*/
			PRD.order_product_seq, 	/* 주문서 상품 고유 순번*/
			PRD.order_no,		/* 주문서 번호*/
			PRD.request_type,	/* 요청 유형 코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			PRD.product_category,	/* 상품 카테고리 코드*/
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			PRD.order_summary,	/* 주문 요약*/
			PRD.hourly_flag,	/* 시간 단위 과금 여부*/
			PRD.amount,		/* 주문 금액*/
			(SELECT project_id FROM oss_project WHERE project_box_id = ORDAPP.project_id LIMIT 1)  AS project_id,	/* 프로젝트 ID */
			PJ.project_name,		/* 프로젝트 이름  */
			PJ.project_alias,		/* 프로젝트 알리아스  */
			ORDAPP.description  	AS description,	/* 비고 */
			ORDAPP.template_catalog_seq,	/* 로드밸런서  카탈로그 SEQ */
			ORDAPP.template_product_seq,	/* 로드밸런서  상품 SEQ */
			PRDLB.product_name AS loadbalancer_product_name,	 /* 로드밸런서  상품 이름 */
			CF.file_id AS image_name,	/* 가상서버 이미지 경로 */
			ORDAPP.app_name

		FROM bss_order_product PRD	/* 주문서 */

		LEFT OUTER JOIN  bss_order BSSORD	/* 주문서 상품 */
		ON PRD.order_no = BSSORD.order_no

		INNER OUTER JOIN bss_order_product_app ORDAPP
		ON PRD.order_product_seq = ORDAPP.order_product_seq

		LEFT OUTER JOIN bss_product PRDLB
		ON PRDLB.product_seq= ORDAPP.template_product_seq

		LEFT OUTER JOIN oss_project_box PJ		/* 프로젝트  */
		ON PJ.project_box_id =ORDAPP.project_id

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = PRD.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = PRD.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = ORDAPP.template_catalog_seq
		AND CF.program_seq = ORDAPP.template_product_seq
		WHERE PRD.order_no =#{orderNo}
		AND PRD.product_category ='PRODCATE_APP'
	]]>
	</select>

	<!-- 주문서 nas 상세  리스트 조회-->
   <select id="orderNasviewList" resultType="CustomReqOrderVO">
		SELECT
			BSSORD.order_user_id,		/* 신청자 ID*/
			BSSORD.order_name,		/* 주문서 명*/
			PRD.order_product_seq, 		/* 주문서 상품 고유 순번*/
			PRD.order_no,			/* 주문서 번호*/
			PRD.request_type,		/* 요청 유형 코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			PRD.product_category,		/* 상품 카테고리 코드*/
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			PRD.order_summary,		/* 주문 요약*/
			PRD.hourly_flag,		/* 시간 단위 과금 여부*/
			PRD.amount,			/* 주문 금액*/
			ORDNAS.on_demand_flag,		/* 즉시희망 여부*/
			ORDNAS.apply_datetime,		/* 서비스 희망 일시 */
			ORDNAS.hourly_flag,		/* 시간단위 과금여부 */
			PJ.project_name,		/* 프로젝트 이름  */
			PJ.project_alias,		/* 프로젝트 알리아스  */
			ORDNAS.nas_catalog_seq,		/* NAS  카탈로그  SEQ */
			ORDNAS.nas_product_seq,		/* NAS  상품 SEQ */
			PRDNAS.product_name,		/* NAS 상품 이름 */
			CF.file_id AS image_name,	/* NAS 이미지 경로 */
			ORDNAS.description,
			ORDNAS.nas_name,		/* NAS이름 */
			ORDNAS.nas_alias,
			ORDNAS.nas_gb AS change_nas_gb,
			ORDNAS.project_id,
			ORDNAS.nas_option,
			ORDNAS.nas_file_system_path,
			NASVM.nas_vm_list,
			NASVM.hostname_alias,
			(SELECT COUNT(*) FROM bss_order_product_nas_vm WHERE order_product_seq = PRD.order_product_seq) -1 AS nas_vm_count,
			CASE PRD.request_type
			WHEN 'REQTYPE_NEW' THEN CAST(ORDNAS.nas_gb AS VARCHAR)
			WHEN 'REQTYPE_CHANGE' THEN CONCAT(CONCAT(CAST(ORDNAS.before_nas_gb AS VARCHAR), CAST('->' AS VARCHAR)), CAST(ORDNAS.nas_gb AS VARCHAR))
			WHEN 'REQTYPE_EXPR' THEN CAST(ORDNAS.nas_gb AS VARCHAR)
			ELSE CAST(0 AS VARCHAR)
			END AS nas_gb, /* NAS용량 */
			OC.cloud_type,
			OC.cloud_name

		FROM bss_order_product PRD	/* 주문서 */

		LEFT OUTER JOIN  bss_order BSSORD	/* 주문서 상품 */
		ON PRD.order_no = BSSORD.order_no

		LEFT OUTER JOIN bss_order_product_nas ORDNAS	/* NAS */
		ON PRD.order_product_seq = ORDNAS.order_product_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =ORDNAS.project_id

		INNER JOIN oss_cloud OC
		ON PJ.cloud_id = OC.cloud_id

		LEFT OUTER JOIN bss_product PRDNAS	/* 블록 디스크 상품 */
		ON PRDNAS.product_seq=ORDNAS.nas_product_seq

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = PRD.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = PRD.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = ORDNAS.nas_catalog_seq
		AND CF.program_seq = ORDNAS.nas_product_seq
		LEFT OUTER JOIN	(
			select		GROUP_CONCAT(OVLIST.hostname_alias SEPARATOR ', ') as nas_vm_list
					,   ORDNASVMSUB.order_product_seq
					, 	OVLIST.hostname_alias
			from		bss_order_product_nas_vm ORDNASVMSUB
			LEFT JOIN oss_vm OVLIST
				ON		ORDNASVMSUB.vm_uuid = OVLIST.vm_uuid
			LEFT JOIN bss_order_product PRD
				ON		ORDNASVMSUB.order_product_seq = PRD.order_product_seq
			WHERE		PRD.order_no = #{orderNo}
			GROUP BY		ORDNASVMSUB.order_product_seq ) NASVM
			ON NASVM.order_product_seq = PRD.order_product_seq
		WHERE PRD.order_no = #{orderNo}
<!-- 		and oc.cloud_id != 'eac2cb70-2293-48be-b131-8c5a3035e610' -->
		AND PRD.product_category ='PRODCATE_NAS'
	</select>

	<!-- 주문서 disk 상세  리스트 조회-->
    <select id="orderDiskviewList" resultType="CustomReqOrderVO">
		SELECT
			BSSORD.order_user_id,	/* 신청자 ID*/
			BSSORD.order_name,	/* 주문서 명*/
			PRD.order_product_seq, 	/* 주문서 상품 고유 순번*/
			PRD.order_no,		/* 주문서 번호*/
			PRD.request_type,	/* 요청 유형 코드*/
			REQCD.code_name AS request_name, /* 요청 유형 이름*/
			PRD.product_category,	/* 상품 카테고리 코드*/
			REQCAT.code_name AS product_category_name, /* 상품 카테고리 이름*/
			PRD.order_summary,	/* 주문 요약*/
			PRD.hourly_flag,	/* 시간 단위 과금 여부*/
			PRD.amount,		/* 주문 금액*/
			ORDDISK.on_demand_flag,	/* 즉시희망 여부*/
			ORDDISK.apply_datetime,	/* 서비스 희망 일시 */
			ORDDISK.hourly_flag,	/* 시간단위 과금여부 */
			PJ.project_id,			/* 프로젝트 ID  */
			PJ.project_name,		/* 프로젝트 이름  */
			PJ.project_alias,		/* 프로젝트 알리아스  */
			ORDDISK.vm_uuid,		/* 가상서버 UUID */
			VM.hostname,			/* 가상서버 호스트명 */
			VM.hostname_alias,		/* 가상서버 한글 */
			ORDDISK.disk_name, 		/* 디스크 이름 */
			ORDDISK.before_disk_gb as before_disk_gb,
			ORDDISK.disk_gb as change_disk_gb,
			ORDDISK.disk_type as disk_type,
			PRD.request_type as request_type,
			CASE PRD.request_type
			WHEN 'REQTYPE_NEW' THEN CAST(ORDDISK.disk_gb AS VARCHAR)
			WHEN 'REQTYPE_CHANGE' THEN CONCAT(CONCAT(CAST(ORDDISK.before_disk_gb AS VARCHAR),  CAST('->' AS VARCHAR)), CAST(ORDDISK.disk_gb AS VARCHAR))
			WHEN 'REQTYPE_EXPR' THEN CAST(ORDDISK.disk_gb AS VARCHAR)
			ELSE CAST(0 AS VARCHAR)
			END AS disk_gb, /* 디스크 용량*/
			ORDDISK.disk_catalog_seq,	/* 디스크 카탈로그 SEQ */
			ORDDISK.disk_product_seq,	/* 디스크 상품 SEQ */
			PRDDISK.product_name,		/* 디스크 상품 이름 */
			ORDDISK.description,
			CF.file_id AS image_name,
			OC.cloud_name
		FROM bss_order_product PRD	/* 주문서 */

		LEFT OUTER JOIN oss_cloud OC
		ON PRD.cloud_id = OC.cloud_id

		LEFT OUTER JOIN  bss_order BSSORD	/* 주문서 상품 */
		ON PRD.order_no = BSSORD.order_no

		LEFT OUTER JOIN bss_order_product_disk ORDDISK	/* 블록 디스크 */
		ON PRD.order_product_seq = ORDDISK.order_product_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =ORDDISK.project_id

		LEFT OUTER JOIN oss_vm VM		/* 가상서버 */
		ON VM.vm_uuid = ORDDISK.vm_uuid

		LEFT OUTER JOIN bss_product PRDDISK	/* 블록 디스크 상품 */
		ON PRDDISK.product_seq=ORDDISK.disk_product_seq

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = PRD.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = PRD.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = ORDDISK.disk_catalog_seq
		AND CF.program_seq = ORDDISK.disk_product_seq

		WHERE PRD.order_no =#{orderNo}
		AND PRD.product_category ='PRODCATE_DISK'
	</select>

	<!-- 주문서 vm 상세  리스트 조회-->
    <select id="orderviewList" resultType="CustomReqOrderVO">
		SELECT
			BSSORD.order_user_id,
			BSSORD.order_name,
			PRD.order_product_seq,
			PRD.order_no,
			PRD.request_type,
			REQCD.code_name AS request_name,
			PRD.product_category,
			REQCAT.code_name AS product_category_name,
			PRD.order_summary,
			PRD.hourly_flag,
			PRD.amount,
			ORDVM.on_demand_flag,
			ORDVM.apply_datetime,
			ORDVM.hourly_flag,
			ORDVM.project_id  AS project_id,
			PJ.project_name,
			PJ.project_alias,
			ORDVM.vm_uuid,
		    IFNULL(ORDVM.hostname, ORDVM.default_network_name)   AS hostname,
			ORDVM.hostname_alias AS hostname_alias,
			ORDVM.az_name,
			ORDVM.default_network_id,
			NT.network_alias AS default_network_name,
			ORDVM.backup_network_flag,
			ORDVM.req_message  	AS description,
			ORDVM.before_vcpus AS before_vcpus,
			ORDVM.vcpus AS change_vcpus,
			CASE PRD.request_type
			WHEN 'REQTYPE_NEW' THEN CAST(ORDVM.vcpus AS VARCHAR)
			WHEN 'REQTYPE_CHANGE' THEN CONCAT(CONCAT(CAST(ORDVM.before_vcpus AS VARCHAR),  CAST('->' AS VARCHAR)), CAST(ORDVM.vcpus AS VARCHAR))
			WHEN 'REQTYPE_EXPR' THEN CAST(ORDVM.vcpus AS VARCHAR)
			ELSE CAST(0 AS VARCHAR)
			END AS vcpus, /* vcpu*/
			ORDVM.before_mem_gb AS before_mem_gb,
			ORDVM.mem_gb AS change_mem_gb,
			CASE PRD.request_type
			WHEN 'REQTYPE_NEW' THEN CAST(ORDVM.mem_gb AS VARCHAR)
			WHEN 'REQTYPE_CHANGE' THEN CONCAT(CONCAT(CAST(ORDVM.before_mem_gb AS VARCHAR),  CAST('->' AS VARCHAR)), CAST(ORDVM.mem_gb AS VARCHAR))
			WHEN 'REQTYPE_EXPR' THEN CAST(ORDVM.mem_gb AS VARCHAR)
			ELSE CAST(0 AS VARCHAR)
			END AS mem_gb,
			ORDVM.disk_gb AS vm_disk_gb,
			ORDVM.vm_catalog_seq,
			ORDVM.vm_product_seq,
			PRDVM.product_name AS vm_product_name,
			CF.file_id AS image_name,
			ORDVM.os_product_seq,
			PROS.product_name AS os_product_name,
			BPO.vm_image_name,
			BN.bakup_fixed_ips,
			BN2.fixed_ips,
			OC.cloud_name,
			ORDVM.instance_type
		FROM bss_order_product PRD	/* 주문서 */

		LEFT OUTER JOIN oss_cloud OC /* 클라우드 */
		ON PRD.cloud_id = OC.cloud_id

		LEFT OUTER JOIN  bss_order BSSORD	/* 주문서 상품 */
		ON PRD.order_no = BSSORD.order_no

		LEFT OUTER JOIN bss_order_product_vm ORDVM	/* 가상서버 */
		ON PRD.order_product_seq = ORDVM.order_product_seq

		LEFT OUTER JOIN bss_product_os BPO
		ON ORDVM.os_product_seq = BPO.product_seq

		LEFT OUTER JOIN oss_project PJ		/* 프로젝트  */
		ON PJ.project_id =ORDVM.project_id

		LEFT OUTER JOIN oss_vm VM		/* 가상서버 */
		ON VM.vm_uuid = ORDVM.vm_uuid

		LEFT OUTER JOIN
	    	(
				SELECT
                	op.fixed_ips AS bakup_fixed_ips,
					op.device_id,
					op.project_id AS oss_port_project_id
				FROM oss_port op
				LEFT OUTER JOIN oss_network ot
				ON op.network_id = ot.network_id
				WHERE network_name = 'backup-net'
			) BN
		ON VM.vm_uuid = BN.device_id

		LEFT OUTER JOIN
			(
   				SELECT
	            	op.fixed_ips AS fixed_ips,
					op.device_id,
					op.project_id AS oss_port_project_id
				FROM oss_port op
				LEFT OUTER JOIN oss_network ot
				ON op.network_id = ot.network_id
				WHERE network_name != 'backup-net'
			) BN2
		ON VM.vm_uuid = BN2.device_id


		LEFT OUTER JOIN oss_network NT		/* 네트워크 */
		ON NT.network_id = ORDVM.default_network_id

		LEFT OUTER JOIN bss_product PRDVM	/* 가상서버 상품 */
		ON PRDVM.product_seq=ORDVM.vm_product_seq

		LEFT OUTER JOIN bss_product PROS	/* OS 상품 */
		ON PROS.product_seq=ORDVM.os_product_seq

		LEFT OUTER JOIN cmm_code REQCD		/* 요청 유형 */
		ON REQCD.code_key_id ='REQUEST_TYPE'
		AND REQCD.code_id = PRD.request_type

		LEFT OUTER JOIN cmm_code REQCAT		/* 상품 카테고리 */
		ON REQCAT.code_key_id ='PRODUCT_CATEGPRY'
		AND REQCAT.code_id = PRD.product_category

		LEFT OUTER JOIN cmm_file CF
		ON CF.program_name = ORDVM.vm_catalog_seq
		AND CF.program_seq = ORDVM.vm_product_seq

		WHERE PRD.order_no =#{orderNo}
		<if test="orderProductSeq != '' and orderProductSeq != null">
		AND
			PRD.order_product_seq = #{orderProductSeq}
		</if>

		AND PRD.product_category ='PRODCATE_VM'
	</select>

<!--
	<select id="orderviewListOld" resultType="CustomReqOrderVO">
			SELECT
				a.order_product_seq,
				a.order_no,
				a.request_type,
				a.product_category,
				a.order_summary,
				a.hourly_flag,
				FLOOR(a.amount) amount,
				b.on_demand_flag,
				b.apply_datetime,
				b.project_id,
				b.default_network_id,
				b.default_network_name,
				b.default_network_alias,
				b.description,
				b.hostname,
				b.hostname_alias,
				b.vcpus,
				b.mem_gb,
				b.disk_gb,
				b.vm_product_seq,
				b.os_product_seq,
				c.project_name,
				c.project_alias
			FROM
				bss_order_product a,bss_order_product_vm b, oss_project c
			WHERE
				a.order_no = #{orderNo}
			AND a.order_product_seq = b.order_product_seq
			AND b.project_id = c.project_id
	</select>
-->
	<select id="userIdchk" resultType="Int" parameterType="CustomReqOrderVO">
    	SELECT
    		COUNT(project_manager_id)
		FROM
			oss_project
		WHERE project_manager_id = #{userId}
    </select>

    <!-- HOST_NAME (영문명) 중복체크 -->
    <select id="hostnameChk" resultType="Int" parameterType="CustomReqOrderVO">
		SELECT
			COUNT(*)
		FROM (
			SELECT a.hostname FROM oss_vm a WHERE a.hostname = #{hostname}
			UNION
			SELECT
				A.hostname
			FROM sr_approval_step ST,
			(
				SELECT
					OP.order_no,
					VM.order_product_seq,
					VM.hostname
				FROM bss_order_product_vm VM
				LEFT OUTER JOIN bss_order_product OP
				ON OP.order_product_seq = VM.order_product_seq
				WHERE VM.hostname = #{hostname}
			) A
			WHERE ST.apprv_state IN('APPRV_PROCESSING', 'APPRV_WAITING')
			AND A.order_no = ST.request_seq
			GROUP BY ST.request_seq
		)c
	</select>

    <!-- 일반 사용자 상품 신청 현황-->
    <select id="getMemberOrderList" resultType="CustomReqOrderVO">
		SELECT
			a.order_no,
			a.order_name,
			a.description,
			a.apprv_state,
			a.order_datetime,
			e.order_product_seq,
			e.on_demand_flag,
			e.apply_datetime,
			e.project_id,
			e.default_network_id,
			e.hostname,
			e.hostname_alias,
			e.vcpus,
			e.mem_gb,
			e.disk_gb,
			e.vm_product_seq,
			e.os_product_seq,
			b.project_name,
			b.project_alias
		FROM
			bss_order a, oss_project b,
			(
				SELECT
					c.order_product_seq,
					c.order_no,
					c.request_type,
					c.product_category,
					c.order_summary,
					c.hourly_flag,
					c.amount,
					d.on_demand_flag,
					d.apply_datetime,
					d.project_id,
					d.default_network_id,
					d.hostname,
					d.hostname_alias,
					d.vcpus,
					d.mem_gb,
					d.disk_gb,
					d.vm_product_seq,
					d.os_product_seq
				FROM
					bss_order_product c, bss_order_product_vm d
				WHERE
					c.order_product_seq = d.order_product_seq
				GROUP BY
					c.order_no
			) e
		WHERE
			e.project_id = b.project_id
			AND a.order_user_id = #{userId}
			AND a.order_no=e.order_no
			<if test="searchKind == 'orderName' and keyword != ''">
			AND
				a.order_name like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchKind == 'prjtName' and keyword != ''">
			AND
				b.project_alias like CONCAT('%',#{keyword},'%')
			</if>
			<if test="searchKind == 'searchAll' and keyword != ''">
			AND
				(
				a.order_name like CONCAT('%',#{keyword},'%')
				OR
				b.project_alias like CONCAT('%',#{keyword},'%')
				)

			</if>
		ORDER BY
			a.order_datetime DESC
		<if test="!length.equals(0)">
			LIMIT #{start}, #{length}
		</if>
  	</select>

    <!-- 일반 사용자 상품신청현황  리스트 카운터-->
    <select id="memberlistTot" resultType="Int" parameterType="CustomReqProjectVO">
    	SELECT
			COUNT(*)
		FROM
			bss_order a ,oss_project b,
			(
			SELECT
				c.order_product_seq,
				c.order_no,
				c.request_type,
				c.product_category,
				c.order_summary,
				c.hourly_flag,
				c.amount,
				d.on_demand_flag,
				d.apply_datetime,
				d.project_id,
				d.default_network_id,
				d.hostname,
				d.hostname_alias,
				d.vcpus,
				d.mem_gb,
				d.disk_gb,
				d.vm_product_seq,
				d.os_product_seq
				FROM
				bss_order_product c, bss_order_product_vm d
				WHERE c.order_product_seq = d.order_product_seq
				GROUP BY c.order_no
			) e
		WHERE
			e.project_id = b.project_id
		AND a.order_user_id = #{userId}
		AND a.order_no=e.order_no
		<if test="searchKind == 'orderName' and keyword != ''">
		AND
			a.order_name like CONCAT('%',#{keyword},'%')
		</if>
		<if test="searchKind == 'prjtName' and keyword != ''">
		AND
			b.project_alias like CONCAT('%',#{keyword},'%')
		</if>
		<if test="searchKind == 'searchAll' and keyword != ''">
		AND
			(
			a.order_name like CONCAT('%',#{keyword},'%')
			OR
			b.project_alias like CONCAT('%',#{keyword},'%')
			)

		</if>
		ORDER BY a.order_datetime DESC
    </select>

    <!-- 일반 사용자 상품신청현황  리스트 카운터-->
    <select id="reviewChk" resultType="Int" parameterType="CustomReqProjectVO">

		SELECT count(*)
		FROM sr_approval_member
		WHERE step_id = 'WF1000A0'
		AND request_seq = #{orderNo}
		AND user_id = #{userId}

    </select>

    <select id="approveChk" resultType="Int" parameterType="CustomReqProjectVO">

		SELECT count(*)
		FROM sr_approval_member
		WHERE step_id = 'WF1000B0'
		AND request_seq = #{orderNo}
		AND user_id = #{userId}

    </select>


  	<!--catalogue 부가상품 리스트-->
    <select id="getCatalogueSubList" resultType="CustomReqCatalogueVO">
    <![CDATA[
		SELECT
			CAPR.catalog_seq,
			CAPR.catalog_category,
			CD.code_name AS catalog_category_name,
			PROD.product_seq,
			CAPR.display_name,
			CAPR.display_flag,
		 	(SELECT CONCAT(CF.file_path,CF.file_id) FROM cmm_file CF WHERE CF.program_name =CAPR.catalog_seq AND CF.program_seq = PROD.product_seq  ) AS image_path,
 			(SELECT CF.file_id FROM cmm_file CF WHERE CF.program_name =CAPR.catalog_seq AND CF.program_seq = PROD.product_seq  ) AS image_name,
		 	CAPR.description,
		 	CAPR.display_order,
		 	PROD.product_seq,
		 	PROD.product_category,
		 	/*가상서버 시작*/
		 	PROD.vcpus, 		-- vcpu
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.cpu_quantity ELSE 0 END AS cpu_quantity ,			-- vpcu 과금 단위
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.cpu_hourly_price ELSE 0 END AS cpu_hourly_price ,		-- 시간 단위 금액
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.cpu_monthly_price ELSE 0 END AS cpu_monthly_price ,		-- 월 단위 금액
		 	PROD.mem_gb,		-- 메모리
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.mem_quantity ELSE 0 END AS mem_quantity ,			-- mem 과금 단위
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.mem_hourly_price ELSE 0 END AS mem_hourly_price ,		-- 시간 단위 금액
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.mem_monthly_price ELSE 0 END AS mem_monthly_price ,		-- 월 단위 금액
		 	PROD.vm_disk_gb,	-- 디스크
			CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.disk_quantity ELSE 0 END AS vm_disk_quantity ,			-- disk 과금 단위
			CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.disk_hourly_price ELSE 0 END AS vm_disk_hourly_price ,		-- 시간 단위 금액
			CASE CAPR.catalog_category  WHEN 'CATACATE_VM' THEN PRIC.disk_monthly_price ELSE 0 END AS vm_disk_monthly_price ,	-- 월 단위 금액
		 	/*가상서버 끝*/

		 	/*블록 디스크 시작*/
		 	PROD.disk_gb,	-- 블록 디스크 용량
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_DISK' THEN PRIC.disk_quantity ELSE 0 END AS disk_quantity ,			-- disk 과금 단위
			CASE CAPR.catalog_category  WHEN 'CATACATE_DISK' THEN PRIC.disk_hourly_price ELSE 0 END AS disk_hourly_price ,		-- 시간 단위 금액
			CASE CAPR.catalog_category  WHEN 'CATACATE_DISK' THEN PRIC.disk_monthly_price ELSE 0 END AS disk_monthly_price ,	-- 월 단위 금액
		 	/*블록 디스크  끝*/

		 	/*NAS 디스크 시작*/
		 	PROD.nas_gb,	-- NAS 용량
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_NAS' THEN PRIC.nas_quantity ELSE 0 END AS nas_quantity ,			-- NAS 과금 단위
			CASE CAPR.catalog_category  WHEN 'CATACATE_NAS' THEN PRIC.nas_hourly_price ELSE 0 END AS nas_hourly_price ,		-- 시간 단위 금액
			CASE CAPR.catalog_category  WHEN 'CATACATE_NAS' THEN PRIC.nas_monthly_price ELSE 0 END AS nas_monthly_price ,		-- 월 단위 금액
		 	/*NAS 디스크  끝*/

		 	/*로드밸런서 시작*/
		 	PROD.loadbalancer_ea,	-- 로드 밸런서 갯수
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_LOADBALANCER' THEN PRIC.loadbalancer_quantity ELSE 0 END AS loadbalancer_quantity ,			-- 로드밸런서 과금 단위
			CASE CAPR.catalog_category  WHEN 'CATACATE_LOADBALANCER' THEN PRIC.loadbalancer_hourly_price ELSE 0 END AS loadbalancer_hourly_price ,		-- 시간 단위 금액
			CASE CAPR.catalog_category  WHEN 'CATACATE_LOADBALANCER' THEN PRIC.loadbalancer_monthly_price ELSE 0 END AS loadbalancer_monthly_price ,	-- 월 단위 금액
		 	/*N로드밸런서  끝*/

		 	/*공인IP 시작*/
		 	PROD.publicip_ea,	-- 공인 IP 갯수
		 	CASE CAPR.catalog_category  WHEN 'CATACATE_PUBLICIP' THEN PRIC.publicip_quantity ELSE 0 END AS publicip_quantity ,			-- 공인IP 과금 단위
			CASE CAPR.catalog_category  WHEN 'CATACATE_PUBLICIP' THEN PRIC.publicip_hourly_price ELSE 0 END AS publicip_hourly_price ,		-- 시간 단위 금액
			CASE CAPR.catalog_category  WHEN 'CATACATE_PUBLICIP' THEN PRIC.publicip_monthly_price ELSE 0 END AS publicip_monthly_price ,		-- 월 단위 금액
		 	/*공인IP 끝*/

		 	CASE CAPR.catalog_category
		 	WHEN 'CATACATE_VM' THEN ((PROD.vcpus / PRIC.cpu_quantity) * PRIC.cpu_hourly_price) + ((PROD.mem_gb / PRIC.mem_quantity) * PRIC.mem_hourly_price) + ((PROD.vm_disk_gb / PRIC.disk_quantity) * PRIC.disk_hourly_price)
		 	WHEN 'CATACATE_DISK' THEN (PROD.disk_gb / PRIC.disk_quantity) * PRIC.disk_hourly_price
		 	WHEN 'CATACATE_NAS' THEN (PROD.nas_gb / PRIC.nas_quantity) * PRIC.nas_hourly_price
		 	WHEN 'CATACATE_PUBLICIP' THEN (PROD.publicip_ea / PRIC.publicip_quantity) * PRIC.publicip_hourly_price
		 	WHEN 'CATACATE_LOADBALANCER' THEN (PROD.loadbalancer_ea / PRIC.loadbalancer_quantity) * PRIC.loadbalancer_hourly_price
		 	ELSE 0 END AS hourly_price,

		 	CASE CAPR.catalog_category
		 	WHEN 'CATACATE_VM' THEN ((PROD.vcpus / PRIC.cpu_quantity) * PRIC.cpu_monthly_price) + ((PROD.mem_gb / PRIC.mem_quantity) * PRIC.mem_monthly_price) + ((PROD.vm_disk_gb / PRIC.disk_quantity) * PRIC.disk_monthly_price)
		 	WHEN 'CATACATE_DISK' THEN (PROD.disk_gb / PRIC.disk_quantity) * PRIC.disk_monthly_price
		 	WHEN 'CATACATE_NAS' THEN (PROD.nas_gb / PRIC.nas_quantity) * PRIC.nas_monthly_price
		 	WHEN 'CATACATE_PUBLICIP' THEN (PROD.publicip_ea / PRIC.publicip_quantity) * PRIC.publicip_monthly_price
		 	WHEN 'CATACATE_LOADBALANCER' THEN (PROD.loadbalancer_ea / PRIC.loadbalancer_quantity) * PRIC.loadbalancer_monthly_price

		 	ELSE 0 END AS monthly_price

		FROM	bss_product_catalog CATA,
			bss_product_catalog_item CAPR,
			cmm_code CD,
			(
				/* 상품 구성 */
				SELECT
					PROD.product_seq,
					PROD.product_name,
					PROD.product_category,
					IFNULL(VM.vcpus,0) AS vcpus ,
					IFNULL(VM.mem_gb,0) AS mem_gb,
					IFNULL(VM.disk_gb,0) AS vm_disk_gb,
					IFNULL(DSK.disk_gb,0) AS disk_gb,
					IFNULL(NAS.nas_gb,0) AS nas_gb,
					IFNULL(BAL.loadbalancer_ea,0) AS loadbalancer_ea,
					IFNULL(IP.publicip_ea,0) AS publicip_ea
				 FROM bss_product PROD
				 LEFT OUTER JOIN bss_product_vm VM		-- 가상서버
				 ON PROD.product_seq = VM.product_seq
				 LEFT OUTER JOIN bss_product_disk DSK		-- 블록 디스크
				 ON PROD.product_seq = DSK.product_seq
				 LEFT OUTER JOIN bss_product_nas NAS		-- NAS
				 ON PROD.product_seq = NAS.product_seq
				 LEFT OUTER JOIN bss_product_loadbalancer BAL	-- 로드 밸런서
				 ON PROD.product_seq = BAL.product_seq
				 LEFT OUTER JOIN bss_product_publicip IP	-- 공인IP
				 ON PROD.product_seq = IP.product_seq
				 WHERE PROD.del_flag = 'N'

			) PROD,
			( /* 가격표 */
				SELECT	SUM(CASE ITEM.item_id WHEN 'CPU010' THEN PRIC.hourly_price ELSE 0 END) cpu_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'CPU010' THEN PRIC.monthly_price ELSE 0 END) cpu_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'CPU010' THEN ITEM.quantity ELSE 0 END) cpu_quantity,
					SUM(CASE ITEM.item_id WHEN 'MEM010' THEN PRIC.hourly_price ELSE 0 END) mem_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'MEM010' THEN PRIC.monthly_price ELSE 0 END) mem_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'MEM010' THEN ITEM.quantity ELSE 0 END) mem_quantity,
					SUM(CASE ITEM.item_id WHEN 'DISK010' THEN PRIC.hourly_price ELSE 0 END) disk_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'DISK010' THEN PRIC.monthly_price ELSE 0 END) disk_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'DISK010' THEN ITEM.quantity ELSE 0 END) disk_quantity,

					SUM(CASE ITEM.item_id WHEN 'NAS010' THEN PRIC.hourly_price ELSE 0 END) nas_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'NAS010' THEN PRIC.monthly_price ELSE 0 END) nas_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'NAS010' THEN ITEM.quantity ELSE 0 END) nas_quantity,

					SUM(CASE ITEM.item_id WHEN 'LOADBALANCER010' THEN PRIC.hourly_price ELSE 0 END) loadbalancer_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'LOADBALANCER010' THEN PRIC.monthly_price ELSE 0 END) loadbalancer_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'LOADBALANCER010' THEN ITEM.quantity ELSE 0 END) loadbalancer_quantity,

					SUM(CASE ITEM.item_id WHEN 'PUBLICIP010' THEN PRIC.hourly_price ELSE 0 END) publicip_hourly_price,
					SUM(CASE ITEM.item_id WHEN 'PUBLICIP010' THEN PRIC.monthly_price ELSE 0 END) publicip_monthly_price,
					SUM(CASE ITEM.item_id WHEN 'PUBLICIP010' THEN ITEM.quantity ELSE 0 END) publicip_quantity

				FROM	bill_product_catalog POLC,
					bill_policy_item POIT,
					bill_product ITEM,
					bill_product_catalog_item PRIC
				WHERE	POLC.apply_date = (
						SELECT	MAX(A.apply_date)
						FROM	bill_product_catalog A
						WHERE	A.apply_date <= #{applyDate}
						AND	A.del_flag = 'N'
					)
				AND	POLC.policy_seq = POIT.policy_seq
				AND	POIT.item_id = ITEM.item_id
				AND	ITEM.item_id IN ('CPU010', 'MEM010', 'DISK010', 'NAS010', 'LOADBALANCER010','PUBLICIP010', 'SCM010', 'BACKUP010', 'MCA010', 'SECURITY010')
				AND	POIT.policy_seq = PRIC.policy_seq
				AND	POIT.item_id = PRIC.item_id
			) PRIC

		WHERE	CATA.apply_date = (
						SELECT	MAX(A.apply_date)
						FROM	bss_product_catalog A
						WHERE	A.apply_date <= #{applyDate}
						AND	A.del_flag = 'N'
					)
		AND	CATA.catalog_seq = CAPR.catalog_seq
		AND	CAPR.product_seq = PROD.product_seq
		AND CAPR.catalog_category = CD.code_id
		AND CD.code_key_id = 'CATALOG_CATEGORY'
		AND CAPR.catalog_category <> 'CATACATE_OS'
		AND	CAPR.display_flag ='Y'
		AND	CAPR.basic_product_flag = 'Y'
	  	AND	CAPR.catalog_category IN('CATACATE_DISK', 'CATACATE_NAS','CATACATE_PUBLICIP', 'CATACATE_LOADBALANCER')
		ORDER BY CAPR.catalog_category, CAPR.display_order
	]]>
  	</select>

  	<!--프로젝트 vm리스트-->
    <select id="getVmNetworkList" resultType="CustomReqCatalogueVO">
		SELECT
			OV.vm_uuid
			,OV.hostname_alias
		FROM
			oss_vm OV,oss_vm_network OVN
		WHERE
			OV.vm_uuid=OVN.Vm_uuid
		AND
			OV.expire_datetime IS NULL
		AND
			OVN.network_id=#{networkId}
  	</select>

    <!-- 프로젝트 속한 네트워크 리스트-->
    <!-- 2019.10.29 프로젝트에 상관없이 네트워크 목록 보여줌(KEPCO) 장중일 -->
    <!-- 2019.12.10 특정 네트워크 안보이게 쿼리로 요청 함. 요청자 정희철 / 수정 장중일 -->
    <select id="getNetworkList" resultType="CustomReqCatalogueVO">
		SELECT
			*
		FROM
			oss_network
		WHERE
			network_id  <![CDATA[!=]]> 'a5af821b-c9a8-4888-b972-04d43168a5ce'
		<!-- WHERE project_id=#{projectId} -->
  	</select>

  	<!-- 카테고리 주문시 bss_order_product_backup_vm 입력 -->
<!--
    <update id="setOrderBackVm" parameterType="CustomReqOrderVO" >
		INSERT INTO bss_order_product_backup_vm
			(
				order_product_seq,
				vm_uuid
			)
		VALUES
			(
				#{orderProductSeq},
				#{vmUuid}
			)
	</update>
-->
  	<!-- 카테고리 주문시 bss_basket_backup_vm 입력 -->
<!--
    <update id="setBasketBackVm" parameterType="CustomReqBasketVO" >
		INSERT INTO bss_basket_backup_vm
			(
				basket_seq
 				,vm_uuid
			)
		VALUES
			(
				#{basketSeq}
 				,#{vmUuid}
			)
	</update>
-->
	<!--bss_basket_backup_vm 리스트-->
<!--
    <select id="getBasketBackVmList" resultType="CustomReqBasketVO">
		SELECT
			*
		FROM
			bss_basket_backup_vm
		WHERE
			basket_seq=#{basketSeq}
  	</select>
-->
   	<!--카탈로그  장바구니 bss_basket_backup_vm del-->
	<!--
	<update id="setBasketBackupVmDel" parameterType="CustomReqBasketVO" >
		DELETE FROM
			bss_basket_backup_vm
		WHERE	basket_seq = #{basketSeq}
  	</update>
-->

  	<!--상품 승인 메일 발송 승인모델 단계 관리자 구성원 리스트 2017.08.25 이윤준 -->
    <select id="getApprovalModelMemberlist3" resultType="CustomReqCustomerVO">
		SELECT
			a.step_id,
			a.user_id,
			a.apprv_auth_flag,
			a.mail_recv_flag,
			a.sms_recv_flag,
			a.push_recv_flag,
			b.step_level,
			c.user_name,
			c.user_mail,
			c.user_phone
		FROM
			approval_model_member 	a , approval_model_step b, cmm_user c
		WHERE a.step_id=b.step_id
		AND c.user_id=a.user_id
		AND c.del_flag = 'N'
		AND b.model_id=(SELECT model_id FROM sr_approval_flow WHERE flow_id='AFW0040') 	AND b.step_level=#{stepLevel}
  	</select>

  	<select id="getBasketCnt" parameterType="String" resultType="Integer">
  		SELECT COUNT(*) FROM
  			bss_basket
  		WHERE
  			user_id = #{userId}
  	</select>

  	<select id="checkProject" parameterType="CustomReqCatalogueVO" resultType="CustomReqBasketCountVO">
  		select
			IFNULL(SUM((SELECT COUNT(*) FROM bss_basket_vm A LEFT JOIN oss_project B ON A.project_id = B.project_id WHERE basket_seq = A.basket_seq AND B.project_box_id != #{projectBoxId} AND A.basket_seq = BB.basket_Seq)),0) AS vm_count,
			IFNULL(SUM((SELECT COUNT(*) FROM bss_basket_disk A LEFT JOIN oss_project B ON A.project_id = B.project_id WHERE basket_seq = A.basket_seq AND B.project_box_id != #{projectBoxId} AND A.basket_seq = BB.basket_Seq)),0) AS disk_count,
			IFNULL(SUM((SELECT COUNT(*) FROM bss_basket_service A LEFT JOIN oss_project B ON A.project_id = B.project_id WHERE basket_seq = A.basket_seq AND B.project_box_id != #{projectBoxId} AND A.basket_seq = BB.basket_Seq)),0) AS service_count
		FROM
			bss_basket BB
		where
			user_id = #{userId}
  	</select>

  	<select id="detailProjectId" parameterType="CustomReqOrderVO" resultType="String">
  		select
  			project_id
  		FROM
  			oss_project
  		WHERE 1=1
  		AND project_box_id = #{projectBoxId}
  		AND cloud_id = #{cloudId}
  		<if test="envType != '' and envType != null">
  			AND env_type = #{envType}
  		</if>
  	</select>

  	<select id="detailProjectId2" parameterType="CustomReqOrderVO" resultType="String">
  		select
  			project_id
  		FROM
  			oss_project
  		WHERE
  			project_box_id = #{projectBoxId}
  		AND
  			cloud_id = (select cloud_id from bss_product_template where product_seq = #{productSeq})
  	</select>

  	<select id="getOpsNasProjectId" parameterType="CustomReqCatalogueVO" resultType="String">
  		select
  			project_id
  		FROM
  			oss_project
  		WHERE
  			project_box_id = #{projectBoxId}
  		AND
  			env_type = #{envType}
  	</select>

  	 <select id="getSnapshotInfo" parameterType="CustomReqOrderVO" resultType="CustomReqOrderVO">
		SELECT
  	 		*
  	 	FROM
  	 		oss_snapshot a
  	 	LEFT JOIN oss_disk b
	  	 	ON a.disk_id = b.disk_id
  	 	WHERE
  	 		snapshot_id = #{snapshotId}
  	 </select>

    <insert id="insertSrApprovalStepHis" parameterType="CustomReqCustomerVO" >

			INSERT INTO sr_approval_step_his (
												step_id,
												request_seq,
												flow_id,
												step_name,
												step_level,
												left_step_id,
												right_step_id,
												apprv_state,
												apprv_user_id,
												apprv_user_name,
												apprv_datetime,
												apprv_description,
												apprv_schedule_user_id,
												apprv_schedule_user_name,
												reg_datetime
									) 	SELECT
												step_id,
												request_seq,
												flow_id,
												step_name,
												step_level,
												left_step_id,
												right_step_id,
												apprv_state,
												apprv_user_id,
												apprv_user_name,
												apprv_datetime,
												apprv_description,
												apprv_schedule_user_id,
												apprv_schedule_user_name,
												#{regDatetime}
									FROM  sr_approval_step WHERE request_seq = #{requestSeq}
  	</insert>


  	 <insert id="deleteSrApprovalStep" parameterType="CustomReqCustomerVO" >
			DELETE FROM 	sr_approval_step
			WHERE request_seq = #{requestSeq}

  	 </insert>

  	<!--catalogue os 리스트 -->
    <select id="getCatalogueAppVersionList" resultType="CustomReqCatalogueVO">
    <![CDATA[
		SELECT
			CATA.catalog_seq ,
			CAPR.product_seq,
			PROD.product_name,
			PROD.product_category,
			PRODOS.item_id,
			OC.cloud_name,
			OC.cloud_type,
			PRODOS.vm_image_id 		as template_name,
			PRODOS.vm_image_name 	as template_name_space
		FROM
			bss_product_catalog CATA,
			bss_product_catalog_item CAPR,
			bss_product PROD,
			bss_product_os PRODOS,
			oss_cloud OC
		WHERE
			CATA.apply_date = (SELECT MAX(A.apply_date) FROM bss_product_catalog A
								WHERE	A.apply_date <= #{applyDate}
								  AND A.del_flag = 'N')
			AND	CATA.catalog_seq = CAPR.catalog_seq
			AND	CAPR.catalog_category = 'CATACATE_OS'
			AND	CAPR.product_seq = PROD.product_seq
			AND	PROD.product_seq = PRODOS.product_seq
	]]>
 			<if test="cloudId != '' or cloudId != null ">
			AND PRODOS.cloud_id = #{cloudId}
			</if>
			AND OC.cloud_id = PRODOS.cloud_id
			AND CAPR.del_flag = 'N'
  	</select>

  	<!-- 개발환경 신청 개발자 라인 등록쿼리 -->
    <update id="setDevUserInsert" parameterType="CustomReqOrderVO">
		INSERT INTO bss_order_product_env_user (
				env_user_id,
				env_user_name,
				env_user_email,
				env_user_password,
				order_product_seq,
				env_access_level,
				env_user_group_role,
				reg_datetime,
				reg_user_id,
				mod_datetime,
				mod_user_id,
				del_flag
			)
		VALUES
			(
				#{envUserId},
				#{envUserName},
				#{envUserEmail},
				#{envUserPassword},
				#{orderProductSeq},
				#{envAccessLevel},
				#{envUserGroupRole},
				NOW(),
				#{regUserId},
				NOW(),
				#{modUserId},
				'N'
			);
  	</update>

  	<select id="getAutoScaleOutCnt" parameterType="String" resultType="Integer">
  		SELECT COUNT(*) FROM
  			oss_scale_out
  		WHERE
  			app_uid = #{appUid}
  			AND del_flag = 'N'
  	</select>

  	<select id="getAppCnt" parameterType="String" resultType="Integer">
  		SELECT
			COUNT(*)
		FROM
			oss_app
		WHERE
			project_id IN (
				SELECT
					project_id
				FROM
					oss_project
				WHERE
					project_box_id = #{projectBoxId}
			)
  	</select>

  	<select id="pathChk" parameterType="String" resultType="Integer">
  		SELECT
  			COUNT(*)
  		FROM
  			oss_nas
  		WHERE
  			nas_file_system_path = #{nasFileSystemPath}
  		AND
  			del_flag = 'N'
  	</select>

  	<select id="checkContainerTerminal" parameterType="String" resultType="Integer">
		SELECT
			COUNT(*)
  		FROM
  			oss_service
  		WHERE
  			vm_uuid = #{vmUuid}
  	</select>
</mapper>