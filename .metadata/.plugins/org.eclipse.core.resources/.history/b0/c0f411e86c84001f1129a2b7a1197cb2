package com.ivucenter.cloud.portal.login;

import java.util.Date;

import org.apache.commons.lang.time.DateFormatUtils;
import org.apache.commons.lang.time.DateUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;

import com.ivucenter.cloud.portal.cmm.user.CmmUserService;
import com.ivucenter.cloud.portal.cmm.user.CustomCmmUserVO;
import com.ivucenter.cloud.portal.util.CodeUtil;
import com.ivucenter.cloud.portal.util.TokenGenerator;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class MngAuthenticationProvider implements AuthenticationProvider{ 
    
	@Autowired
	private CmmUserService service;
	
	@Autowired
	private LoginService loginService;
	
	@Override
	public Authentication authenticate(Authentication authentication) throws AuthenticationException {
		log.debug("authenticate() init"); 
		String sId = authentication.getName();    
		String sPw = TokenGenerator.generate(sId, authentication.getCredentials().toString());
		
		// 관리자 DB 정보
		CustomCmmUserVO req = new CustomCmmUserVO();
		req.setUserId(sId);		
		CustomCmmUserVO res = service.loginChk(req);

		if(res == null) { throw new BadCredentialsException(CodeUtil.LOGIN_FAIL_MESSAGE); }
		
		// 패스워드 일치 여부
		if(res.getUserPassword().equals(sPw) == false ){ 
			service.failPassword(req);
			loginService.writeHistory(sId, "MNG","N","LogIn",CodeUtil.LOGIN_PASSWORD_MESSAGE); // history write
			throw new BadCredentialsException(CodeUtil.LOGIN_PASSWORD_MESSAGE); 
		}
		
		// 접근 권한 체크
		String sRoles = res.getUserAuthority();
		if(sRoles == null){ 
			loginService.writeHistory(sId, "MNG","N","LogIn",CodeUtil.LOGIN_AUTHFAIL_MESSAGE); // history write
			throw new BadCredentialsException(CodeUtil.LOGIN_AUTHFAIL_MESSAGE); 
		}
		// 세부 권한 체크는 @Secured() 어노테이션에서 담당
//		if(sRoles.charAt(0) != '1'){ 
//			loginService.writeHistory(sId, "MNG","N","LogIn",CodeUtil.LOGIN_AUTHFAIL_MESSAGE); // history write
//			throw new BadCredentialsException(CodeUtil.LOGIN_AUTHFAIL_MESSAGE); 
//		}
		if(res.getUserBlock().equals("Y")){ 
			loginService.writeHistory(sId, "MNG","N","LogIn",CodeUtil.LOGIN_FAIL_MESSAGE3); // history write
			throw new BadCredentialsException(CodeUtil.LOGIN_FAIL_MESSAGE3); 
		}
		// 유저 상태 체크(잠금/탈퇴/퇴사)		
		if(res.getUserStatus().equals(CodeUtil.LOGIN_USER_STATUS_ABSENCE)) {
			loginService.writeHistory(sId, "MNG","N","LogIn",CodeUtil.LOGIN_ABSENCE_MESSAGE); // history write
			throw new BadCredentialsException(CodeUtil.LOGIN_ABSENCE_MESSAGE); 
		}
		if(res.getUserStatus().equals(CodeUtil.LOGIN_USER_STATUS_WITHDRAWAL) || res.getDelFlag().equals("Y") ) {
			loginService.writeHistory(sId, "MNG","N","LogIn",CodeUtil.LOGIN_WITHDRAWAL_MESSAGE); // history write
			throw new BadCredentialsException(CodeUtil.LOGIN_WITHDRAWAL_MESSAGE); 
		}
		if(res.getUserStatus().equals(CodeUtil.LOGIN_USER_STATUS_RETIREMENT)) {
			loginService.writeHistory(sId, "MNG","N","LogIn",CodeUtil.LOGIN_RETIREMENT_MESSAGE); // history write
			throw new BadCredentialsException(CodeUtil.LOGIN_RETIREMENT_MESSAGE); 
		}
		
		// 패스워드 5회 실패
		if(res.getPasswordFailCnt() > 4 ){
			loginService.writeHistory(sId, "MNG","N","LogIn",CodeUtil.LOGIN_PASSWORDFAIL_MESSAGE); // history write
			throw new BadCredentialsException(CodeUtil.LOGIN_PASSWORDFAIL_MESSAGE); 
		}
		
		// 패스워드 변경 90일 경과 (사용자랑 동일하게 수정하게함. 2019.11.14 장중일) 
		if(res.getPwdModDatetime() != null) {
			final Integer baseTime = Integer.parseInt(DateFormatUtils.format(DateUtils.addDays(new Date(), -90), "yyyyMMdd"));
			final Integer modiTime = Integer.parseInt(DateFormatUtils.format(res.getPwdModDatetime(), "yyyyMMdd"));		
			if( sId.equals("admin") == false && (baseTime > modiTime) ){
				res.setPwdInitFlag("C");
			}
		}
					
		UserSession userSession = new UserSession(sId, sPw, sRoles, res.getUserName(), res.getPwdInitFlag(), res.getDeptCode() ,res.getApprvPass());
		UsernamePasswordAuthenticationToken result = new UsernamePasswordAuthenticationToken(userSession, sPw, userSession.getAuthorities());
		
		// 로그인 시간, 실패 카운트 초기화
		service.loginOk(req);
		loginService.writeHistory(sId, "MNG", "Y","LogIn",""); // history write
		log.debug("authenticate() end : " + result.toString());
		return result;
	}

	@Override
	public boolean supports(Class<?> authentication) {
		return authentication.equals(UsernamePasswordAuthenticationToken.class);
	}
	
}
